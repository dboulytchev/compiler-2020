-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[st, w], stmt) {
  case stmt of
      Assn (x, e) -> [st <- [x, evalExpr (st, e)], w]
    | Seq (l, r)  -> eval (eval(c, l), r)
    | Skip        -> c 
    | Read (x)    -> 
        case readWorld (w) of
          [v, neww] -> [st <- [x, v], neww]
        esac
    | Write (e)   -> [st, writeWorld (evalExpr (st, e), w)] 
  esac  
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
