
-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        If     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval ([state, world], stmt) {
  case stmt of
    Read   (val)            -> case readWorld(world) of 
                                    [x, worldResult] -> [state <- [val, x], worldResult]
                               esac
  | Write  (expr)           -> [state, writeWorld(evalExpr(state, expr), world)]
  | Seq    (x1, x2)         -> eval(eval([state, world], x1), x2)
  | Assn   (val, expr)      -> [state <- [val, evalExpr(state, expr)], world]
  | If     (expr, st1, st2) -> if evalExpr(state, expr) != 0 
                               then eval([state, world], st1) 
                               else eval([state, world], st2) fi
  | While  (expr, st1)      -> if evalExpr(state, expr) != 0
                               then eval(eval([state, world], st1), stmt)
                               else [state, world] fi
  | Repeat (st1, expr)      -> case eval([state, world], st1) of
                               [new_state, new_world] -> if evalExpr(new_state, expr) != 0
                               then [new_state, new_world]
                               else eval([new_state, new_world], stmt) fi
                               esac
  | _                       -> [state, world]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}