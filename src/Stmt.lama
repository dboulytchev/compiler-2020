-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval ([state, world], stmt) {
   case stmt of
      Seq(stmt1, stmt2) -> eval(eval([state, world], stmt1), stmt2)
    | Read(name) -> case readWorld(world) of
        [value, world2] -> [state <- [name, value], world2]
      esac
    | Write(expr) -> [state, writeWorld(evalExpr(state, expr), world)]
    | Assn(name, value) -> [state <- [name, evalExpr(state, value)], world]
    | While(cond, body) -> if evalExpr(state, cond) != 0 then eval(eval([state, world], body), stmt)  else [state, world] fi
    | Repeat (body, cond) -> case eval([state, world], body) of
          [state1, world1] -> if evalExpr(state1, cond) != 0 then [state1, world1] else eval([state1, world1], stmt) fi
      esac
    | If(cond, onTrue, onFalse) -> eval([state, world], if evalExpr(state, cond) != 0 then onTrue else onFalse fi)
    | Skip -> [state, world]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
