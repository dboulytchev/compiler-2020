-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c, stmt) {
  local state = c[0];
  local world = c[1];
  case stmt of
        Skip            ->  c
    |   Read(x)         ->  case readWorld(world) of
                                [value, newWorld] -> [state <- [x, value], newWorld]
                            esac
    |   Write(x)        ->  [state, writeWorld(evalExpr(state, x), world)]
    |   Assn(x, value)  ->  [state <- [x, evalExpr(state, value)], world]
    |   Seq(stmt1,stmt2)->  eval(eval(c, stmt1) ,stmt2)
    |   If (x, stmt1, stmt2) -> if evalExpr(state, x) != 0
                                    then eval(c, stmt1)
                                    else eval(c, stmt2)
                                fi
    |   While (x, stmt1) -> if evalExpr(state, x) != 0
                               then eval(eval(c, stmt1), stmt)
                               else c
                            fi
    |   Repeat (stmt1, x) -> case eval(c, stmt1) of
                                  [sp, wp] -> if evalExpr(sp, x) != 0
                                                        then [sp, wp]
                                                        else eval([sp, wp], stmt)
                                                      fi
                             esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
