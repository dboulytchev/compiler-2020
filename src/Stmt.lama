-- Statement evaluator.

import State;
import Expr;
import World;

(**
Evaluates a statement "stmt" in a configuration "c".
A configuration is a pair of a state "s" and a world "w".
Returns a final configuration (if any)

A statement is represented by a data structure of the following shape:

@type Stmt = Assn   (#string, Expr)    |
             Seq    (Stmt, Stmt)       |
             Skip                      |
             Read   (#string)          |
             Write  (Expr)             |
             If     (Expr, Stmt, Stmt) |
             While  (Expr, Stmt)       |
             Repeat (Stmt, Expr)
*)

fun eval (config @ [state, world], stmt) {
  case stmt of
    Skip           -> config
  | Seq     (l, r) -> config.eval(l).eval(r)
  | Read    (x)    -> case readWorld(world) of
                        [value, newworld] -> [state <- [x, value], newworld]
                      esac
  | Write   (e)    -> [state, writeWorld(state.evalExpr(e), world)]
  | Assn    (x, e) -> [state <- [x, state.evalExpr(e)], world]
  | If (e, s1, s2) -> config.eval(if state.evalExpr(e) then s1 else s2 fi)
  | While   (e, s) -> if state.evalExpr(e)
                      then config.eval(s).eval(stmt)
                      else config
                      fi
  | Repeat  (s, e) -> case config.eval(s) of
                        newconfig @ [newstate, _] -> if newstate.evalExpr(e) 
                                                     then newconfig
                                                     else newconfig.eval(stmt)
                                                     fi
                      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld(input)], stmt).snd.getOutput
}
