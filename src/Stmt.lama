-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c@[s, w], stmt) {
  case stmt of
      Skip -> c
    | Seq(stmt1, stmt2) -> eval (eval ([s, w], stmt1), stmt2)
    | Read(x) -> case readWorld (w) of 
        [n, w2] -> [s <- [x, n], w2]
      esac
    | Write(e) -> [s, writeWorld (evalExpr (s, e), w)]
    | Assn(x, e) -> [s <- [x, evalExpr (s, e)], w]
    | If(e, stmt1, stmt2) -> if evalExpr (s, e) != 0 then eval ([s, w], stmt1) else eval ([s, w], stmt2) fi
    | While (e, stmt1) -> if evalExpr (s, e) != 0 then eval (eval ([s, w], stmt1), stmt) else [s, w] fi
    | Repeat (stmt1, e) -> case eval ([s, w], stmt1) of
                                [s, w] -> if evalExpr (s, e) != 0 then [s, w] else eval ([s, w], stmt) fi
                           esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
