-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
    Assn (a, b)    -> [state <- [a, evalExpr (state, b)], world]
  | Seq (a, b)     -> eval (eval (c, a), b)
  | Skip           -> c
  | Read (a)       -> local ret = readWorld (world); 
                      [state <- [a, ret[0]], ret[1]]
  | Write (e)      -> [state, writeWorld (evalExpr (state, e), world)]
  | If (e, s1, s2) -> if evalExpr (state, e) != 0 then eval (c, s1) else eval (c, s2) fi
  | While (e, s)   -> if evalExpr (state, e) != 0 then eval (eval (c, s), stmt) else c fi
  | Repeat (s, e)  -> local ret = eval (c, s);
                      if evalExpr (ret[0], e) == 0 then eval (ret, stmt) else ret fi
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
