-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
    Skip -> c
  | Assn(varStr, expr) -> 
      [state <- [varStr, evalExpr(state, expr)], world]
  | Read(varStr) ->
      case readWorld(world) of 
        [n, w] -> [state <- [varStr, n], w] 
      esac
  | Write(expr) -> 
      [state, writeWorld(evalExpr(state, expr), world)]
  | Seq(s1, s2) -> 
      eval(eval(c, s1), s2)
  | If(e, s1, s2) -> 
      if   evalExpr(state, e) != 0
      then eval(c, s1)
      else eval(c, s2)
      fi
  | cycle@While(cond, body) ->
      if   evalExpr(state, cond) != 0
      then eval(eval(c, body), cycle)
      else c
      fi
  | Repeat(body, cond) -> 
      eval(eval(c, body), While(Binop("==", cond, Const(0)), body))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
