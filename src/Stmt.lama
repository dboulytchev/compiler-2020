-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval ([st, w], stmt) {
    case stmt of
            Read(x) -> case readWorld(w) of [val, new_w] -> [st <- [x, val], new_w] esac
        |   Write(e) -> [st, writeWorld(evalExpr(st, e), w)]
        |   Assn(x, e) -> [st <- [x, evalExpr(st, e)], w]
        |   Seq(s1, s2) -> eval(eval([st, w], s1), s2)
        |   Skip -> [st, w]
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
