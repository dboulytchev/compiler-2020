-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c@[state, world], stmt) {
    --local state = c[0];
    --local world = c[1];
    case stmt of
      Assn(str, expr) -> [state <- [str, evalExpr(state, expr)], world]

    | Seq (stmtA, stmtB)-> eval(eval([state, world], stmtA), stmtB)

    | Read(str) ->
      case readWorld(world) of 
        [value, restWorld] -> [state <-[str, value], restWorld]
      esac

    | Write (expr) -> [state, writeWorld(evalExpr(state,expr), world)]

    | Skip -> [state, world]

    | If (expr, state1, state2)  -> if evalExpr (state, expr) != 0 then eval (c, state1) else eval (c, state2) fi

    | While (expr, st)   -> if evalExpr (state, expr) != 0 then eval (eval (c, st), stmt) else c fi

    | Repeat (st, expr)  -> local ret = eval (c, st);

     if evalExpr (ret[0], expr) == 0 then eval (ret, stmt) else ret fi

    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
