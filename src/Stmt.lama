-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval ([st, w], stmt) {
  case stmt of
    Assn(x, val) -> [st <- [x, evalExpr(st, val)], w]
  | Seq(first, second) -> eval(eval([st, w], first), second)
  | Skip -> [st, w]
  | Read(x) -> case readWorld(w) of
      [val, w2] -> [st <- [x, val], w2]
    esac
  | Write(val) -> [st, writeWorld(evalExpr(st, val), w)]
  | If (expression, state1, state2) -> if evalExpr (st, expression) != 0
      then eval ([st, w], state1)
      else eval ([st, w], state2)
    fi
  | While (expression, state) -> if evalExpr (st, expression) != 0
      then eval (eval ([st, w], state), stmt)
      else [st, w]
    fi
  | Repeat (state, expression) -> local ret = eval ([st, w], state);
                                  if evalExpr (ret[0], expression) == 0
      then eval (ret, stmt)
      else ret
    fi
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
