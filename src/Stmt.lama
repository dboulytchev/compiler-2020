-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
fun eval (c@[s, w], stmt) {
	case stmt of
		Assn(x, expr) -> [s <- [x, evalExpr(s, expr)], w]
  | Seq(stmt1 , stmt2) -> eval(eval(c, stmt1), stmt2)
  | Skip -> c
  | Read(str) -> case readWorld(w) of
                   [n, w] -> [s <- [str, n], w]
                 esac
  | Write(expr) -> [s, writeWorld(evalExpr(s, expr), w)]
  | If (expr, stmt1, stmt2) -> if evalExpr(s, expr) != 0 then eval([s, w], stmt1) else eval([s, w], stmt2) fi
  | While (expr, stmt1) -> if evalExpr(s, expr) != 0 then eval(eval([s, w], stmt1), stmt) else [s, w] fi
  | Repeat (stmt1, expr) -> case eval([s, w], stmt1) of
                              [sp, wp]-> if evalExpr(sp, expr) != 0 then [sp, wp] else eval([sp, wp], stmt) fi
                            esac
	esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
