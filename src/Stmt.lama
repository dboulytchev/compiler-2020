-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of 
    Assn(x, expr) -> [state <- [x, evalExpr(state, expr)], world]
  | Seq(stmt1 , stmt2) -> eval(eval(c, stmt1), stmt2)
  | Skip -> c
  | Read(str) -> case readWorld(world) of
                   [n, world] -> [state <- [str, n], world]
                 esac
  | Write(expr) -> [state, writeWorld(evalExpr(state, expr), world)]
  | If (expr, stmt1, stmt2) -> if evalExpr(state, expr) != 0 then eval([state, world], stmt1) else eval([state, world], stmt2) fi
  | While (expr, stmt1) -> if evalExpr(state, expr) != 0 then eval(eval([state, world], stmt1), stmt) else [state, world] fi
  | Repeat (stmt1, expr) -> case eval([state, world], stmt1) of
                              [statep, worldp]-> if evalExpr(statep, expr) != 0 then [statep, worldp] else eval([statep, worldp], stmt) fi
                            esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
