-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c @ [s, w], stmt) {
  case stmt of
    Assn(var, expr) -> [s <- [var, evalExpr(s, expr)], w]
  | Seq(a, b)       -> eval(eval(c, a), b)
  | Skip            -> c
  | Read(var)       -> case readWorld(w) of [val, new_w] -> [s <- [var, val], new_w] esac
  | Write(expr)     -> [s, writeWorld(evalExpr(s, expr), w)]
  | If (x, a, b) -> if evalExpr(s, x) == 0
                      then eval(c, b)
                      else eval(c, a)
                    fi
  | Repeat (a, x) -> case eval(c, a) of
                       [sp, wp] -> if evalExpr(sp, x) == 0
                                     then eval([sp, wp], stmt)
                                     else [sp, wp]
                                   fi
                     esac
  | While (x, a) -> if evalExpr(s, x) == 0
                      then c
                      else eval(eval(c, a), stmt)
                    fi
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
