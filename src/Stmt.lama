-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c @ [state, world], stmt) {
  case stmt of
      Skip -> c
    | Read (x) -> case readWorld (world) of
                    [value, newworld] -> [state <- [x, value], newworld]
                  esac
    | Write (e) -> [state, writeWorld(state.evalExpr(e), world)]
    | Assn (x, e) -> [state <- [x, state.evalExpr(e)], world]
    | Seq (l, r) -> c.eval(l).eval(r)
    | If     (expr, st1, st2) -> if evalExpr(state, expr) != 0 
                                 then eval([state, world], st1) 
                                 else eval([state, world], st2) fi
    | While  (expr, st1)      -> if evalExpr(state, expr) != 0
                                 then eval(eval([state, world], st1), stmt)
                                 else [state, world] fi
    | Repeat (st1, expr)      -> case eval([state, world], st1) of
                                [new_state, new_world] -> if evalExpr(new_state, expr) != 0
                                then [new_state, new_world]
                                else eval([new_state, new_world], stmt) fi
                                esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}

