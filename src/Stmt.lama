-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval ([s, w], stmt) {
  case stmt of
    Read (x) -> case readWorld(w) of 
                  [z, wd] -> [s <- [x, z], wd]
                esac
  | Write (e) -> [s, writeWorld(evalExpr(s, e), w)]
  | Assn (x, e) -> [s <- [x, evalExpr(s, e)], w]
  | Seq (s1, s2) -> eval(eval([s, w], s1), s2)
  | Skip -> [s, w]
  | If (e, s1, s2) -> if evalExpr(s, e) != 0 then eval([s, w], s1) else eval([s, w], s2) fi
  | While (e, s1) -> if evalExpr(s, e) != 0 then eval(eval([s, w], s1), stmt) else [s, w] fi
  | Repeat (s1, e) -> case eval([s, w], s1) of
                        [sp, wp] -> if evalExpr(sp, e) != 0 then [sp, wp] else eval([sp, wp], stmt) fi
                      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
