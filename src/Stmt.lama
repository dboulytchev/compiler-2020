-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)

fun eval (c@[s, w], stmt) {
  case stmt of
        Skip ->  c
      | Read(x) -> case readWorld(w) of [value, nw] -> [s <- [x, value], nw] esac
      | Write(x) -> [s, writeWorld(evalExpr(s, x), w)]
      | Assn(x, value) -> [s <- [x, evalExpr(s, value)], w]
      | Seq(stmt1,stmt2) -> eval(eval(c, stmt1) ,stmt2)
      | If (x, stmt1, stmt2) -> if evalExpr(s, x) != 0
                                  then eval(c, stmt1)
                                  else eval(c, stmt2)
                                fi
      | While (x, stmt1) -> if evalExpr(s, x) != 0
                              then eval(eval(c, stmt1), stmt)
                              else c
                            fi
      | Repeat (stmt1, x) -> case eval(c, stmt1) of
                                 [sp, wp] -> if evalExpr(sp, x) != 0
                                                then [sp, wp]
                                                else eval([sp, wp], stmt)
                                             fi
                             esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
