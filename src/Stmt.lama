-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)
fun eval (c@[s, w], stmt) {
	case stmt of
		Assn    (x, e)    -> [s <- [x, evalExpr (s, e)], w]
		| Seq (s1, s2)    -> eval (eval (c, s1), s2)
		| Read     (x)    -> case readWorld (w) of
							    [n, w] -> [s <- [x, n], w]
						     esac
		| Write    (e)    -> [s, writeWorld (evalExpr (s, e), w)]
		| Skip            -> c
        | If (e, s1, s2)  -> if evalExpr (s, e) != 0 then eval (c, s1) else eval (c, s2) fi
        | While (e, st)   -> if evalExpr (s, e) != 0 then eval (eval (c, st), stmt) else c fi
        | Repeat (st, e)  -> local ret = eval (c, st);
                    if evalExpr (ret[0], e) == 0 then eval (ret, stmt) else ret fi
	esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}