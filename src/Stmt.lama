-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
fun eval ([state, world], stmt) {
  case stmt of
    Skip -> [state, world]
  | Assn (var, expr) -> [state <- [var, evalExpr (state, expr)], world]
  | Read (var) -> case readWorld (world) of
                    [value, newWorld] -> [state <- [var, value], newWorld]
                  esac
  | Write (expr) -> [state, writeWorld (evalExpr (state, expr), world)]
  | Seq (lhs, rhs) -> eval (eval ([state, world], lhs), rhs)
  | _ -> failure ("invalid statement: %s\n", stmt.string)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
