-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[st, s, w], insns) {
    case insns of  
      CONST (x) : rest  -> eval(env, [x:st, s, w], rest)
      | BINOP (op) : rest -> case st of
                         y : x : stt -> eval(env, [binop(op, x, y) : stt, s, w], rest)
                       esac
      | READ : rest -> case readWorld(w) of
                         [z, wd] -> eval(env, [z:st, s, wd], rest)
                       esac
      | WRITE : rest -> case st of
                         z : stt -> eval(env, [stt, s, writeWorld(z, w)], rest)
                        esac
      | LD (x) : rest -> eval(env, [s(x):st, s, w], rest)
      | LDA (x) : rest ->  eval(env, [Ref (x) : st, s, w], rest)
      | ST (x) : rest -> case st of
                         z : stt -> eval(env, [stt, s <- [x, z], w], rest)
                        esac
      | STI : rest ->  case st of
                         z : Ref(x) : stt -> eval(env, [z:st, s <- [x, z], w], rest)
                        esac
      | LABEL (l) : rest -> eval(env, c, rest)
      | JMP (l) : rest -> eval(env, c, fromLabel(env, l))
      | CJMP ("nz", l) : rest -> case st of
                         0 : stt -> eval(env, [stt, s, w], rest)
                        | _ : stt -> eval(env, [stt, s, w], fromLabel(env, l))
                        esac
      | CJMP ("z", l) : rest -> case st of
                         0 : stt -> eval(env, [stt, s, w], fromLabel(env, l))
                        | _ : stt -> eval(env, [stt, s, w], rest)
                        esac
      | DROP : rest -> case st of
                         _ : stt -> eval(env, [st, s, w], rest)
                        esac
      | _ -> c
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile (stmt, env) {
      case stmt of
          Const (x) -> [singleton(CONST (x)), env]
        | Var (x) -> [singleton(LD (x)), env]
        | Ref (x) -> [singleton(LDA (x)), env]
        | Read (x) -> [{READ, ST (x), DROP}, env]
        | Write (e) -> case compile(e, env) of [ce, env1] ->
                          [{ce, WRITE}, env1]
                       esac
        | Assn (x, e) -> case compile(x, env) of [cs1, env1] ->
                          case compile(e, env1) of [cs2, env2] ->
                               [{cs1, cs2, STI}, env2]
                          esac
                         esac
        | Seq (s1, s2) -> 
              case compile(s1, env) of [cs1, env1] -> 
                case compile(s2, env1) of [cs2, env2] -> 
                  [{cs1, cs2}, env2]
                esac
              esac
        | Skip -> [{}, env]
        | If (e, s1, s2) -> 
             case genLabels(env, 2) of [ls2, lexit, env1] ->
                case compile(s1, env1) of [cs1, env2] ->
                  case compile(s2, env2) of [cs2, env3] ->
                    case compile(e, env3) of [ce, env3] ->
                      [{ce, CJMP("z", ls2), cs1, JMP(lexit), LABEL(ls2), cs2, LABEL(lexit)}, env3]
                    esac
                  esac
                esac
              esac
        | While (e, s1) -> 
              case genLabels(env, 2) of [le, ls, env1] ->
                case compile(s1, env1) of [cs1, env2] ->
                  case compile(e, env2) of [ce, env2] ->
                    [{JMP(le), LABEL(ls), cs1, LABEL(le), ce, CJMP("nz", ls)}, env2]
                  esac
                esac
              esac
        | Repeat (s1, e) ->
              case genLabels(env, 1) of [ls, env1] ->
                case compile(s1, env1) of [cs1, env2] ->
                  case compile(e, env2) of [ce, env2] ->
                    [{LABEL(ls), cs1, ce, CJMP("z", ls)}, env2]
                  esac
                esac
              esac
        | Ignore (state) -> case compile(state, env) of [cs1, env1] ->
                              [{cs1, DROP}, env1]
                            esac
        | Binop (op, l, r) -> case compile(l, env) of [cs1, env1] ->
                                case compile(r, env1) of [cs2, env2] ->
                                  [{cs1, cs2, BINOP(op)}, env2]
                                esac
                              esac
      esac
  }
  
  deepFlatten(compile(stmt, initCompEnv())[0])
  }
