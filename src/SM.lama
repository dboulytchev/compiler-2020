-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
<<<<<<< HEAD
fun eval ([stack, state, world], insns) {
  case insns of
    BINOP (op) :  reminder -> case stack of
                                   right : left : stackReminder -> eval([binOp(op, left, right) : stackReminder, state, world], reminder)
                              esac
  | CONST (val) : reminder -> eval([val:stack, state, world], reminder)
  | READ        : reminder -> case readWorld(world) of
                                   [val, worldResult] -> eval([val:stack, state, worldResult], reminder)
                              esac
  | WRITE       : reminder -> case stack of
                                   val : stackReminder -> eval([stackReminder, state, writeWorld(val, world)], reminder)
                              esac
  | LD    (val) : reminder -> eval([state(val):stack, state, world], reminder)
  | ST    (val) : reminder -> case stack of
                                   x : stackReminder -> eval([stackReminder, state <- [val, x], world], reminder)
                              esac
  | _                      -> [stack, state, world]
  esac
=======
fun eval (env, c, insns) {
  failure ("SM eval not implemented\n")
>>>>>>> upstream/A07-scopes-functions-int
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

<<<<<<< HEAD
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Binop (op, left, right) -> {compileExpr(left), compileExpr(right), BINOP (op)}
  | Const (val)             -> singleton(CONST (val))
  | Var   (val)             -> singleton(LD (val))
  | _                       -> failure("Wrong expr")
  esac
=======
-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
>>>>>>> upstream/A07-scopes-functions-int
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Read  (val)       -> {READ, ST (val)}
  | Write (expr)      -> deepFlatten({compileExpr(expr), WRITE})
  | Seq   (x1, x2)    -> deepFlatten({compileSM (x1), compileSM (x2)})
  | Assn  (val, expr) -> deepFlatten({compileExpr(expr), ST (val)})
  | _                 -> {}
  esac
}