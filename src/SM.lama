-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([sk, st, w], insns) {
	case insns of
		CONST (c) : ins -> eval ([c : sk, st, w], ins)

		| READ : ins ->
			case
        readWorld (w) of	[v, nw] -> eval ([v : sk, st, nw], ins)
			esac

		| WRITE : ins ->
			case
        sk of	head : t ->	eval ([t, st, writeWorld (head, w)], ins)
			esac

		| ST (x) : ins -> 
			case
        sk of	head : t -> eval ([t, st <- [x, head], w], ins)
			esac

		| LD (x) : ins -> eval ([st (x) : sk, st, w], ins)

		| BINOP (o) : ins -> 
			case
        sk of	r : l : t -> eval ([evalBinop (o, l, r) : t, st, w], ins)
			esac
		| {} -> [sk, st, w]
	esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (x) -> singleton (CONST (x))
  | Var (x) -> singleton (LD (x))
  | Binop (o, l, r) -> deepFlatten (compileExpr (l) +++ compileExpr(r) +++ singleton (BINOP (o)))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, e) -> deepFlatten (compileExpr (e) +++ singleton (ST (x)))
  | Read (x) -> { READ, ST (x) }
  | Write (x) -> deepFlatten (compileExpr (x) +++ singleton (WRITE))
  | Seq (s1, s2) -> deepFlatten (compileSM (s1) +++ compileSM (s2))
  esac 
}
