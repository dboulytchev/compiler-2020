-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  fun evalInternal (c@[stack, state, world], instruction) {
    case instruction of
      Load  (x)         -> [state (x) : stack, state, world]
    | Store (x)         -> [tl (stack), state <- [x, hd (stack)], world]
    | READ              -> local ret = readWorld (world);
                           [ret[0] : stack, state, ret[1]]
    | WRITE             -> [tl (stack), state, writeWorld (hd (stack), world)]
    | Const (x)         -> [x : stack, state, world]

    | Binop (op,  a, b) -> [(fun (a : b : last) { (sym2fun (op)) (b, a) : last }) (stack), state, world]
    esac
  }

  fun makeStep (context, instructions) {
    case instructions of
      i : is -> makeStep (evalInternal (context, i), is)
    | {} -> context
    esac
  }

  makeStep (c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (a)           -> Load (a) : {}
  | Const (a)         -> Const (a) : {}
  | Binop (op,  a, b) -> {compileExpr (a), compileExpr (b), Binop (op,  a, b)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compileSMinternal (stmt) {
    case stmt of
      Seq (a, b)  -> {compileSM (a), compileSM (b)}
    | Read (a)    -> {READ, Store (a)}
    | Write (e)   -> {compileExpr (e), WRITE}
    | Assn (a, e) -> {compileExpr (e), Store (a)}
    | _           -> {}
    esac
  }
  deepFlatten (compileSMinternal (stmt))
}
