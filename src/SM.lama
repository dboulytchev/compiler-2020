-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, [stack, st, w], insns) {
	case insns of
		  CONST(c):other -> eval(env, [c:stack, st, w], other)
		| BINOP(op):other -> case stack of
				r:l:rest -> eval(env, [evalOp(op, l, r):rest, st, w], other)
			esac
		| LD(x):other -> eval(env, [st(x):stack, st, w], other)
    | LDA(x):other -> eval(env, [Ref(x):stack, st, w], other)
		| ST(x):other -> case stack of
				head:_ -> eval(env, [stack, st <- [x, head], w], other)
			esac
    | STI:other -> case stack of
				head:Ref(x):rest -> eval(env, [head:rest, st <- [x, head], w], other)
			esac
		| READ:other -> case readWorld(w) of
				[val, w2] -> eval(env, [val:stack, st, w2], other)
			esac
		| WRITE:other -> case stack of
				head:rest -> eval(env, [rest, st, writeWorld(head, w)], other)
			esac
    | LABEL(l):other -> eval(env, [stack, st, w], other)
    | JMP(l):other -> eval(env, [stack, st, w], fromLabel(env, l))
    | CJMP(c, l):other -> case c of 
        "z" -> case stack of
              0:rest -> eval(env, [rest, st, w], fromLabel(env, l))
            | _:rest -> eval(env, [rest, st, w], other)
          esac
      | "nz" -> case stack of
              0:rest -> eval(env, [rest, st, w], other)
            | _:rest -> eval(env, [rest, st, w], fromLabel(env, l))
          esac
      esac
    | DROP:other -> case stack of _:rest -> eval(env, [rest, st, w], other) esac
		| {} -> [stack, st, w]
	esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compileIf(env, expr, stmt1, stmt2) {
    case genLabels(env, 2) of [lStmt1, lEnd, env2] ->
      case compile(stmt1, env2) of [res1, env3] ->
        case compile(stmt2, env3) of [res2, env4] -> 
          case compile(expr) of [eRes, env5] ->
            [{
              eRes,
              CJMP("nz", lStmt1),
              res2,
              JMP(lEnd),
              LABEL(lStmt1),
              res1,
              LABEL(lEnd)
            }, env4]
          esac
        esac
      esac
    esac
  }

  fun compileWhile(env, expr, stmt) {
    case genLabels(env, 2) of [lExpr, lStmt, env2] ->
      case compile(stmt, env2) of [res, env3] ->
        case compile(expr) of [eRes, env4] ->
          [{
            JMP(lExpr),
            LABEL(lStmt),
            res,
            LABEL(lExpr),
            eRes,
            CJMP("nz", lStmt)
          }, env3]
        esac
      esac
    esac
  }

  fun compileRepeat(env, stmt, expr) {
    case genLabel(env) of [lStmt, env2] ->
      case compile(stmt, env2) of [res, env3] ->
        case compile(expr) of [eRes, env4] ->
          [{
            LABEL(lStmt),
            res,
            eRes,
            CJMP("z", lStmt)
          }, env3]
        esac
      esac
    esac
  }

  fun compile(stmt, env) {
    case stmt of
        Const(c) -> [singleton(CONST(c)), env]
      | Var(x) -> [singleton(LD(x)), env]
      | Binop(op, l, r) -> case compile(l, env) of
          [lRes, env2] -> case compile(r, env2) of
            [rRes, env3] -> [{ lRes, rRes, BINOP(op) }, env3]
          esac
        esac
      | Assn(x, e) -> case compile(x, env) of
          [xRes, env2] -> case compile(e, env2) of
            [eRes, env3] -> [{ xRes, eRes, STI }, env3]
          esac
        esac
      | Read(x) -> [{ READ, ST(x), DROP }, env]
      | Write(val) -> case compile(val, env) of [res, env2] -> [{ res, WRITE }, env2] esac
      | Seq(stmt1, stmt2) -> case compile(stmt1, env) of
          [res1, env2] -> case compile(stmt2, env2) of
            [res2, env3] -> [{res1, res2}, env3]
          esac
        esac
      | If(expr, stmt1, stmt2) -> compileIf(env, expr, stmt1, stmt2)
      | While(expr, stmt1) -> compileWhile(env, expr, stmt1)
      | Repeat(stmt1, expr) -> compileRepeat(env, stmt1, expr)
      | Skip -> [{}, env]
      | Ref(x) -> [singleton(LDA(x)), env]
      | Ignore(e) -> case compile(e, env) of [res, env2] -> [{ res, DROP }, env2] esac
    esac
  }
  deepFlatten(compile(stmt, initCompEnv())[0])
}
