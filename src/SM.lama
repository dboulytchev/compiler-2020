-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, s, w], insns) {
  case insns of 
    {} -> [stack, s, w]
  | READ : other -> case readWorld (w) of
      [n, w] -> eval ([n : stack, s, w], other)
    esac
  | WRITE : other -> case stack of
      n : stack -> eval([stack, s, writeWorld (n, w)], other)
    esac
  | CONST (n) : other -> eval ([n : stack, s, w], other)
  | LD (x) : other -> eval ([s(x) : stack, s, w], other)
  | ST (x) : other -> case stack of
      n : stack -> eval ([stack, s <- [x, n], w], other)
    esac
  | BINOP (operation) : other -> case stack of
      second : first : stack -> eval ([evalBinOperation (operation, first, second) : stack, s, w], other)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> singleton (LD (x))
  | Const (n) -> singleton (CONST (n))
  | Binop (operation, first, second) -> {compileExpr (first), compileExpr (second), BINOP (operation)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile (stmt) {
    case stmt of
      Skip -> {}
    | Read (x) -> {READ, ST(x)}
    | Write (expr) -> {compileExpr (expr), WRITE}
    | Assn (x, expr) -> {compileExpr (expr), ST(x)}
    | Seq (state1, state2) -> {compile (state1), compile (state2)}
    esac
  }
  deepFlatten (compile (stmt))
}
