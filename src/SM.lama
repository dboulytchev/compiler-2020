-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns | None -> failure("No label %s\n", l) esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c @ [stack, state, w], insns) {
  fun evalProxy (newState, insns) {
    case newState of 
        SJump(newC, newInsns) -> [env, newC, newInsns]
      | newC                  -> [env, newC, insns]
    esac
  }
  fun evalInner ([env, c @ [stack, state, w], insns]) {
  case insns of
      h : t -> case h of
          CONST(n)       -> [n:stack, state, w]
        | BINOP(op)      -> case stack of
                r:l:sttail -> [op.evalOp(l, r):sttail, state, w]
              | _          -> failure("Not enough values on stack for BINOP %s in statement %s\n", op.string, insns.string)
            esac
        | LD(x)          -> [state.get(x):stack, state, w]
        | LDA(x)         -> [Ref(x):stack, state, w]
        | ST(x)          -> case stack of
                h:_        -> [stack, state <- [x, h], w]
              | _          -> failure("Not enough values on stack for ST in statement %s\n", insns.string)
            esac
        | STI            -> case stack of
                h:Ref(x):sttail -> [h:sttail, state <- [x, h], w]
              | _               -> failure("Not enough values on stack for STI in statement %s\n", insns.string)
            esac
        | DROP           -> case stack of
                _:sttail   -> [sttail, state, w]
              | _          -> failure("No values on stack to DROP in statement %s\n", insns.string)
            esac
        | READ           -> case readWorld(w) of
                [v, w]  -> [v:stack, state, w]
            esac
        | WRITE          -> case stack of
                h:sttail   -> [sttail, state, writeWorld(h, w)]
              | _          -> failure("Not enough values on stack for WRITE in statement %s\n", insns.string)
            esac
        | JMP(l)         -> SJump(c, fromLabel(env, l))
        | CJMP("z", l)   -> case stack of
                0:sttail   -> SJump([sttail, state, w], fromLabel(env, l))
              | _:sttail   -> [sttail, state, w]
            esac
        | LABEL(_) -> c
        esac . evalProxy(t)
    | _ -> c
  esac
  }
  local sm = [env, c, insns];
  while sm[2] != {} do
    sm := evalInner(sm)
  od;
  case sm of [env, c, insns] -> c esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState(), createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns nested lists with stack machine
-- instructions.
fun compileSMunflat (stmt) {
  fun compEasy(stmt) {
    case stmt of 
        Read(x)     -> {READ, ST(x), DROP}
      | Skip        -> {}
      | Ref(x)      -> singleton(LDA(x))
      | Var(x)      -> singleton(LD(x))
      | Const(n)    -> singleton(CONST(n))
    esac
  }
  fun compRec(stmt, env) {
    case stmt of
        Seq(s1, s2) -> case compRec(s1, env) of
          [comp1, env] -> case compRec(s2, env) of
            [comp2, env] -> [{comp1, comp2}, env]
          esac esac
      | Assn(x, v) -> case compRec(x, env) of
          [comp1, env] -> case compRec(v, env) of
            [comp2, env] -> [{comp1, comp2, STI}, env]
          esac esac
      | Binop(op, l, r) -> case compRec(l, env) of
          [comp1, env] -> case compRec(r, env) of
            [comp2, env] -> [{comp1, comp2, BINOP(op)}, env]
          esac esac
      | Write(e) -> case compRec(e, env) of
          [comp1, env] -> [{comp1, WRITE}, env]
          esac
      | Ignore(e) -> case compRec(e, env) of
          [comp1, env] -> [{comp1, DROP}, env]
          esac
      | While(e, x) -> case env.genLabels(2) of
          [bgn, end, env] -> case compRec(x, env) of
            [compx, env] -> case compRec(e, env) of
              [compCond, env] ->
                [{LABEL(bgn), compCond, CJMP("z", end), compx, JMP(bgn), LABEL(end)}, env]
          esac esac esac
      | Repeat(x, e) -> case env.genLabels(1) of
          [bgn, env] -> case compRec(x, env) of
            [compx, env] -> case compRec(e, env) of
              [compCond, env] ->
                [{LABEL(bgn), compx, compCond, CJMP("z", bgn)}, env]
          esac esac esac
      | If(e, x, Skip) -> case env.genLabels(1) of
          [end, env] -> case compRec(x, env) of
            [compx, env] -> case compRec(e, env) of
              [compCond, env] ->
                [{compCond, CJMP("z", end), compx, LABEL(end)}, env]
          esac esac esac
      | If(e, t, f) -> case env.genLabels(2) of
          [end, els, env] -> case compRec(t, env) of
            [compx, env] -> case compRec(f, env) of
              [compf, env] -> case compRec(e, env) of
                [compCond, env] ->
                  [{compCond, CJMP("z", els), compx, JMP(end), LABEL(els), compf, LABEL(end)}, env]
          esac esac esac esac
      | _ -> [compEasy(stmt), env]
    esac
  }
  compRec(stmt, initCompEnv())[0]
}

-- Compiles a statement into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  stmt . compileSMunflat . deepFlatten
}
