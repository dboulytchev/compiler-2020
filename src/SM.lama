-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, [s, st, w], insns) {
  case insns of
    CONST (c) : o -> eval (env, [c : s, st, w], o)
  | READ : o -> case readWorld (w) of
      [v, nw] -> eval (env, [v : s, st, nw], o)
    esac
  | WRITE : o -> case s of
      h : no -> eval (env, [no, st, writeWorld (h, w)], o)
    esac
  | BINOP (op) : o -> case s of
      r : l : no -> eval (env, [evalBinop (op, l, r) : no, st, w], o)
    esac
  | LD (x) : o -> eval (env, [st (x) : s, st, w], o)
  | ST (x) : o -> case s of
      h : no -> eval (env, [no, st <- [x, h], w], o)
    esac
  | LABEL (l) : o -> eval (env, [s, st, w], o)
  | JMP (l) : o -> eval (env, [s, st, w], fromLabel (env, l))
  | CJMP (c, l) : o -> case c of
      "z" -> case s of
          0 : no -> eval (env, [no, st, w], fromLabel (env, l))
        | _ : no -> eval (env, [no, st, w], o)
        esac
    | "nz" -> case s of
          0 : no -> eval (env, [no, st, w], o)
        | _ : no -> eval (env, [no, st, w], fromLabel (env, l))
        esac
    esac
  | {} -> [s, st, w]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Const (c) -> { CONST (c) }
    | Var (x) -> { LD (x) }
    | Binop (op, l, r) -> { compileExpr(l), compileExpr(r), BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile (stmt, env) {
      case stmt of
        Assn (x, e) -> [{ compileExpr (e), ST (x) }, env]
      | Read (x) -> [{ READ, ST (x) }, env]
      | Write (e) -> [{ compileExpr (e), WRITE }, env]
      | Seq (s1, s2) -> case compile (s1, env) of
          [ns1, nenv1] -> case compile (s2, nenv1) of
            [ns2, nenv2] -> [{ ns1, ns2 }, nenv2]
          esac
        esac
      | Skip -> [{}, env]
      | If (e, s1, s2) -> case genLabels (env, 2) of
          [ls, l, nenv1] -> case compile (s1, nenv1) of
            [ns1, nenv2] -> case compile (s2, nenv2) of
              [ns2, nenv3] -> [{ compileExpr (e), CJMP ("z", ls), ns1, JMP (l), LABEL (ls), ns2, LABEL (l) }, nenv3]
            esac
          esac
        esac
      | While (e, s1) -> case genLabels (env, 2) of
          [ls, l, nenv1] -> case compile (s1, nenv1) of [ns1, nenv2] ->
            [{ JMP (ls), LABEL (l), ns1, LABEL (ls), compileExpr (e), CJMP ("nz", l) }, nenv2]
          esac
        esac
      | Repeat (s1, e) -> case genLabels (env, 1) of
          [l, nenv1] -> case compile (s1, nenv1) of
            [ns1, nenv2] -> [{ LABEL (l), ns1, compileExpr (e), CJMP ("z", l) }, nenv2]
          esac
        esac
      esac
  }

  deepFlatten (compile (stmt, initCompEnv ())[0])
}
