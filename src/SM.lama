-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cstack, state, world], insns) {
    case insns of
    BINOP  (op)         : reminder -> case stack of
                                           x : val : stack_reminder -> eval([evalOp(op, val, x) : stack_reminder, cstack, state, world], reminder)
                                      esac
  | CONST  (val)        : reminder -> eval([val:stack, cstack, state, world], reminder)
  | READ                : reminder -> case readWorld(world) of
                                           [x, new_world] -> eval([x:stack, cstack, state, new_world], reminder)
                                      esac
  | WRITE               : reminder -> case stack of
                                           x : stack_reminder -> eval([stack_reminder, cstack, state, writeWorld(x, world)], reminder)
                                      esac
  | LD     (val)        : reminder -> eval([lookup(state, val):stack, cstack, state, world], reminder)
  | ST     (val)        : reminder -> case stack of
                                           x : stack_reminder -> assign(state, val, x);
                                           eval([stack, cstack, state, world], reminder)
                                      esac
  | LABEL  (val)        : reminder -> eval(c, reminder)
  | JMP    (val)        : reminder -> eval(c, fromLabel(env, val))
  | CJMP   (val, label) : reminder -> case val of 
                               "z" -> case stack of 
                                           0 : cjmpReminder -> eval([cjmpReminder, cstack, state, world], fromLabel(env, label))
                                         | _ : cjmpReminder -> eval([cjmpReminder, cstack, state, world], reminder)
                                      esac
                            | "nz" -> case stack of
                                           0 : cjmpReminder -> eval([cjmpReminder, cstack, state, world], reminder)
                                         | _ : cjmpReminder -> eval([cjmpReminder, cstack, state, world], fromLabel(env, label))
                                      esac
                                      esac
  | LDA    (val)        : reminder -> eval([Ref (val) : stack, cstack, state, world], reminder)
  | STI                 : reminder -> case stack of
                                           x : Ref(val) : stack_reminder -> assign(state, val, x);
                                           eval([x:stack_reminder, cstack, state, world], reminder)
                                      esac
  | DROP                : reminder -> case stack of
                                           x : stack_reminder -> eval([stack_reminder, cstack, state, world], reminder)
                                      esac
  | BEGIN  (f, a, l)    : reminder -> case take(stack, a) of
                                           [stack_reminder, args] -> local v = makeState(a, l);
                                           foldl (fun (i, arg) {assign(v, Arg (i), arg); i + 1}, 0, args);
                                           eval([stack_reminder, cstack, v, world], reminder) 
                                      esac
  | CALL   (f, n)       : reminder -> eval([stack, [state, reminder] : cstack, state, world], fromLabel(env, f))
  | END                 : reminder -> case cstack of
                                           {} -> c
                                         | [v, q] : cstack_reminder -> eval([stack, cstack_reminder, v, world], q)
                                      esac
  | GLOBAL (val)        : reminder -> assign(state, Glb (val), 0); eval([stack, cstack, state, world], reminder)
  | _                              -> c
  esac 
  }

  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
       fun compileArgs (args, env) {
           case args of 
                {}         -> [{}, env]
              | {val}      -> compile(val, env)
              | val : vals -> case compile(val, env) of [cval, env] ->
                                   case compileArgs(vals, env) of [cvals, env] ->
                                        [{cval, cvals}, env]
                                   esac
                              esac
           esac
       }

       fun compileFunc(code, env, f) {
           case f of
                {} -> case getFuns(env) of
                           [{}, env] -> code
                         | [f, env] -> compileFunc(code, env, f)
                      esac
              | Fun (fLabel, args, body, state) : fs -> 
                      case compile(body, addArgs(beginFun(env, state), args)) of
                           [cf, env] -> compileFunc({code, LABEL (fLabel), BEGIN (fLabel, args.size, getLocals(env)), cf, END}, env, fs)
                      esac
           esac
       }
  
  fun compile (stmt, env) {
      case stmt of
           Skip                      -> [{}, env]
         | Const  (val)              -> [singleton(CONST (val)), env]
         | Var    (val)              -> [singleton(LD (lookupVar(env, val))), env]
         | Ref    (val)              -> [singleton(LDA (lookupVar(env, val))), env]
         | Read   (val)              -> [{READ, ST (lookupVar(env, val)), DROP}, env]
         | Write  (expr)             -> case compile(expr, env) of [val, env1] ->
                                             [{val, WRITE}, env1]
                                        esac
         | Assn   (Ref (val), expr)  -> case compile(expr, env) of [csexpr, env] ->
                                             [{csexpr, ST (lookupVar(env, val))}, env]
                                        esac
         | Assn   (val, expr)        -> case compile(val, env) of [val1, env1] ->
                                             case compile(expr, env1) of [val2, env2] ->
                                                  [{val1, val2, STI}, env2]
                                             esac
                                        esac
         | Seq    (val1, val2)       -> case compile(val1, env) of [cval1, env1] -> 
                                             case compile(val2, env1) of [cval2, env2] -> 
                                                  [{cval1, cval2}, env2]
                                             esac
                                        esac
         | Ignore (val)              -> case compile(val, env) of [val1, env1] -> 
                                             [{val1, DROP}, env1]
                                        esac
         | Binop  (op, left, right)  -> case compile(left, env) of [val1, env1] ->
                                             case compile(right, env1) of [val2, env2] ->
                                                  [{val1, val2, BINOP(op)}, env2]
                                             esac
                                        esac
         | While  (expr, val)        -> case genLabels(env, 2) of [le, ls, env1] ->
                                             case compile(val, env1) of [val1, env2] ->
                                                  case compile(expr, env2) of [ce, env2] ->
                                                       [{JMP(le), LABEL(ls), val1, LABEL(le), ce, CJMP("nz", ls)}, env2]
                                                  esac
                                             esac 
                                        esac
         | If     (expr, val1, val2) -> case genLabels(env, 2) of [ls2, left_val, env1] ->
                                             case compile(val1, env1) of [val11, env2] ->
                                                  case compile(val2, env2) of [val12, env3] ->
                                                       case compile(expr, env3) of [ce, env3] ->
                                                            [{ce, CJMP("z", ls2), val11, JMP(left_val), LABEL(ls2), val12, LABEL(left_val)}, env3]
                                                       esac
                                                  esac
                                             esac 
                                        esac
         | Repeat (val, expr)        -> case genLabels(env, 1) of [ls, env1] ->
                                             case compile(val, env1) of [val1, env2] ->
                                                  case compile(expr, env2) of [ce, env2] ->
                                                       [{LABEL(ls), val1, ce, CJMP("z", ls)}, env2]
                                                  esac
                                             esac 
                                        esac   
         | Call   (f, args)          -> case compileArgs(args, env) of [ca, env] ->
                                             case lookupFun(env, f) of Fun (fl, n) ->
                                                  [{ca, CALL (fl, n)}, env]
                                             esac
                                        esac
         | Scope  (defs, expr)       -> case foldl (fun ([env, fs, gs], def) {
                                             case def of
                                                  Local (xs) -> [addVars(env, xs), fs, if isGlobal(env) then
                                                                                          {map (fun (val) {GLOBAL (val)}, xs), gs}
                                                                                       else
                                                                                          gs
                                                                                       fi ]
                                                | Fun (f, args, body) -> case genFunLabel(env, f) of [fl, env] ->
                                                                              [addFun(env, f, fl, args.size), [fl, args, body] : fs, gs]
                                                                         esac
                                             esac
                                        }, [beginScope(env), {}, {}], defs) of [env, fs, gs] ->
                                        case compile(expr, foldl(fun (env, [name, args, body]) {rememberFun(env, name, args, body)}, env, fs)) of 
                                             [cexpr, env] -> [{gs, cexpr}, endScope(env)]
                                        esac
                                        esac
      esac
  }
  
  case compile(stmt, initCompEnv()) of
       [code, env] -> deepFlatten(compileFunc({LABEL ("main"), BEGIN ("main", 0, getLocals(env)), code, END}, env, {}))
  esac
}