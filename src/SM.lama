-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of 
    {} -> c
    | BINOP (op) : ins -> case stack of
                           y : x : stmt -> eval(env, [evalOp(op, x, y) : stmt, state, world], ins)
                         esac
    | CONST (x) : ins  -> eval(env, [x:stack, state, world], ins)
    | READ : ins -> case readWorld(world) of
                     [z, worldR] -> eval(env, [z:stack, state, worldR], ins)
                   esac
    | WRITE : ins -> case stack of
                      z : stmt -> eval(env, [stmt, state, writeWorld(z, world)], ins)
                    esac
    | LD (x) : ins -> eval(env, [state(x):stack, state, world], ins)
    | ST (x) : ins -> case stack of
                       z : stmt -> eval(env, [stack, state <- [x, z], world], ins)
                     esac
    | LABEL (l) : ins -> eval(env, c, ins)
    | JMP (l) : ins -> eval(env, c, fromLabel(env, l))
    | CJMP ("z", l) : ins -> case stack of
                              0 : stmt -> eval(env, [stmt, state, world], fromLabel(env, l))
                            | _ : stmt -> eval(env, [stmt, state, world], ins)
                            esac
    | CJMP ("nz", l) : ins -> case stack of
                              0 : stmt -> eval(env, [stmt, state, world], ins)
                            | _ : stmt -> eval(env, [stmt, state, world], fromLabel(env, l))
                            esac
    | LDA (x) : ins -> eval (env, [Ref (x) : stack , state, world], ins)
    | STI : ins -> case stack of
                     z : Ref (x) :stmt -> eval (env, [z:stmt, state <- [x, z], world], ins)
                   esac
    | DROP : ins -> case stack of
                      z : stmt -> eval (env, [stmt, state, world], ins)
                    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile (stmt, env){
    case stmt of
      Skip -> [{}, env]
    | Ignore (state) -> case compile(state, env) of [cs1, env1] ->
                      [{cs1, DROP}, env1]
                    esac
    | Const (x) -> [singleton (CONST (x)), env]
    | Var (x) -> [singleton (LD (x)), env]
    | Ref (x) -> [singleton (LDA (x)), env]
    | Assn (x, expr) -> case compile (x, env) of [cs1, env1] ->
                          case compile (expr, env1) of [cs2, env2] ->
                            [{cs1, cs2, STI}, env2]
                          esac
                        esac
    | Write (expr) -> case compile (expr, env) of [cexpr, env1] ->
                        [{cexpr, WRITE}, env1]
                      esac
    | Read (x) -> [{READ, ST (x), DROP}, env]
    | Seq (state1, state2) ->  case compile (state1, env) of [cs1, env1] -> 
                                case compile (state2, env1) of [cs2, env2] -> 
                                  [{cs1, cs2}, env2]
                                esac
                              esac
    | Binop (op, left, right) -> case compile (left, env) of [cs1, env1] ->
                                   case compile (right, env1) of [cs2, env2] ->
                                     [{cs1, cs2, BINOP(op)}, env2]
                                   esac
                                 esac
    | If (expr, state1, state2) -> case genLabels (env, 2) of [ls2, lexit, env1] ->
                                     case compile (state1, env1) of [cs1, env2] ->
                                       case compile (state2, env2) of [cs2, env3] ->
                                         case compile (expr, env3) of [cexpr, env3] ->
                                           [{cexpr, CJMP("z", ls2), cs1, JMP(lexit), LABEL(ls2), cs2, LABEL(lexit)}, env3]
                                         esac
                                      esac
                                    esac 
                                  esac
    | While (expr, state1) -> case genLabels (env, 2) of [le, ls, env1] ->
                                case compile (state1, env1) of [cs1, env2] ->
                                  case compile (expr, env2) of [cexpr, env2] ->
                                    [{JMP(le), LABEL(ls), cs1, LABEL(le), cexpr, CJMP("nz", ls)}, env2]
                                  esac
                              esac 
                            esac
    | Repeat (state1, expr) -> case genLabels(env, 1) of [ls, env1] ->
                                 case compile(state1, env1) of [cs1, env2] ->
                                   case compile (expr, env2) of [cexpr, env2] ->
                                     [{LABEL(ls), cs1, cexpr, CJMP("z", ls)}, env2]
                                   esac
                                 esac 
                               esac
    esac
  }
  deepFlatten(compile(stmt, initCompEnv())[0])
}
