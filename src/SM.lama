-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[st, s, w], insns) {
	case insns of
		{} -> c
		| CONST  (n) : ins -> eval ([n : st, s, w], ins)
		| ST     (x) : ins -> case st of n : st ->
								eval ([st, s <- [x, n], w], ins)
					 		  esac
		| LD     (x) : ins -> eval ([s (x) : st, s, w], ins)
		| BINOP (op) : ins -> case st of r : l : st ->
								eval ([evalBinop (op, l, r) : st, s, w], ins)
					 		  esac
		| READ       : ins -> case readWorld (w) of [n, w] ->
					          	eval ([n : st, s, w], ins)
					          esac
		| WRITE      : ins -> case st of n : st ->
					            eval ([st, s, writeWorld (n, w)], ins)
					          esac
	esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
	case expr of
		Const         (c) -> singleton (CONST (c))
		| Var         (x) -> singleton (LD (x))
		| Binop (op, l, r) -> { compileExpr (l), compileExpr (r), BINOP (op) }
	esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
	fun compile (stmt) {
		case stmt of
			Skip -> {}
			| Read     (x) -> {READ, ST (x)}
			| Write    (e) -> {compileExpr (e), WRITE}
			| Assn  (x, e) -> {compileExpr (e), ST (x)}
			| Seq (s1, s2) -> {compile (s1), compile (s2)}
		esac
	}
	deepFlatten (compile (stmt))
}