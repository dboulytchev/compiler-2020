-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
 fun eval (config@[stack, cst, state, world], insns) {
    case insns of
        CONST (value) : rmd -> eval ([value : stack, cst, state, world], rmd) 

      | READ : rmd -> case 
      
              readWorld (world) of [value, world2] -> eval ([value : stack, cst, state, world2], rmd)
              
              esac

      | WRITE : rmd -> case
      
              stack of value : stackrmd -> eval([stackrmd, cst, state, writeWorld (value, world)], rmd)
              
              esac

      
      | BINOP (operation) : rmd -> case 
      
              stack of r : l : stackrmd -> eval ([evalOp(operation, l, r) : stackrmd, cst, state, world], rmd)
                                              

              esac
      | LD (value) : rmd -> eval ([lookup (state, value) : stack, cst, state, world], rmd)

      | ST (value) : rmd ->case 
      
              stack of   

              v : nst ->  assign (state, value, v); eval (config, rmd)

              esac

      | LABEL (l) : rmd -> eval (config, rmd)

      | {} -> config

      | JMP (l) : rmd -> eval ([stack, cst, state, world], fromLabel (env, l))

      | CJMP (c, l) : rmd -> case c of

              "nz" -> case stack of

              0 : nSt -> eval ([nSt, cst, state, world], rmd)
              | _ : nSt -> eval ([nSt, cst, state, world], fromLabel (env, l))

              esac

              | "z" ->  case stack of

              0 : nSt -> eval ([nSt, cst, state, world], fromLabel (env, l))
              | _ : nSt -> eval ([nSt, cst, state, world], rmd)
              
              esac
              esac
      | DROP : rmd -> case 
      
              stack of      x : nSt -> eval ([nSt, cst, state, world], rmd)

              esac 


      | LDA (value) : rmd -> eval ([Ref (value) : stack, cst, state, world], rmd)    

      | STI : rmd -> case stack of      x : Ref (val) : nSt -> 
      
              
              
              assign (state, val, x); 
              
              eval ([x : nSt, cst, state, world], rmd)
          
              esac
      | GLOBAL (value) : rmd -> 
      
              assign (state, Glb (value), 0);
              eval (config, rmd)

      | CALL (f, n) : rmd -> 
              case f[0] of '_' ->
              case take (stack, n) of [n_stack, args] ->
              case evalBuiltin (substring (f, 1, f.length - 1), args, world) of

              [z, n_world] -> eval ([z : n_stack, cst, state, n_world], rmd)

              esac
              esac
          | _ -> eval ([stack, [state, rmd] : cst, state, world], fromLabel (env, f))
              esac
      | BEGIN (_, arg, l) : rmd -> 

              case take (stack, arg) of [nSt, args] -> 

              local n_state = makeState (arg, l);
              foldl (fun (val, n_a) { 
                
                assign (n_state, Arg (val), n_a); 
                
                val + 1 
                
                }, 0, args);

              eval ([nSt, cst, n_state, world], rmd) 

              esac
      | END : rmd ->
              case cst of

              {} -> config

            | [ns, q] : ncst -> eval ([stack, ncst, ns, world], q)

              esac

      | STRING (x) : rmd -> 
      
              eval ([x : stack, cst, state, world], rmd)

      | ARRAY (x) : rmd ->

              case take (stack, x) of

                [n_stack, args] ->
                
                  eval ([listArray (args) : n_stack, cst, state, world], rmd)
              esac

      | STA : rmd ->

              case stack of

                v : i : a : n_stack -> a[i] := v; eval ([v : n_stack, cst, state, world], rmd)

              esac
      | ELEM : rmd ->

              case stack of i : a : n_stack ->
                
              eval ([a[i] : n_stack, cst, state, world], rmd)

              esac
      | BUILTIN (f, n) : rmd ->
              case take (stack, n) of [n_stack, args] ->
              case evalBuiltin (f, args, world) of [x, n_world] -> 
              
              eval ([x : n_stack, cst, state, n_world], rmd)
                  
              esac
              esac
    | _ -> config
    esac 

 
  } 
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (expr) {


  fun compile (stmt, env) {

      case stmt of

      Skip -> [{}, env]

      | Const (val) -> [singleton (CONST (val)), env]


      | Var (val) -> [singleton (LD (lookupVar (env, val))), env]


      | Ref (val) -> [singleton (LDA (lookupVar (env, val))), env]




      | Assn (Ref (val), expr) ->

          case compile (expr, env) of[n_state, env_1] -> 

          [{ n_state, ST (lookupVar (env, val)) }, env_1]

          esac



      | Assn (ElemRef (a, i), expr) ->

          case compile (a, env) of [n_c1, n_env1] ->
          case compile (i, n_env1) of [n_c2, n_env2] ->
          case compile (expr, n_env2) of [n_c3, n_env3] -> 
          
          [{ n_c1, n_c2, n_c3, STA }, n_env3]

          esac
          esac
          esac


      | Assn (val, expr) ->

          case compile (val, env) of [n_state_1, env_1] ->
          case compile (expr, env_1) of [n_state_2, env_2] -> 

          [{ n_state_1, n_state_2, STI }, env_2]

          esac
          esac



      | Binop (operation, l, r) ->

          case compile (l, env) of [n_state_1, env_1] ->
          case compile (r, env_1) of [n_state_2, env_2] -> 

          [{ n_state_1, n_state_2, BINOP (operation) }, env_2]

          esac
          esac

      | Seq (state_1, state_2) ->

          case compile (state_1, env) of [n_state_1, env_1] ->
          case compile (state_2, env_1) of [n_state_2, env_2] -> 

          [{ n_state_1, n_state_2 }, env_2]

          esac
          esac


      | Ignore (s) ->

          case compile (s, env) of

          [n_state, n_env] -> [{ n_state, DROP }, n_env]

          esac


      | If (expr, state_1, state_2) ->

          case genLabels (env, 2) of [ls, l, env_1] ->
          case compile (state_1, env_1) of [n_state_1, env_2] ->
          case compile (state_2, env_2) of [n_state_2, n_env3] ->
          case compile (expr, n_env3) of[nev, n_env3] -> 
          
          [{ nev, CJMP ("z", ls), n_state_1, JMP (l), LABEL (ls), n_state_2, LABEL (l) }, n_env3]
          
          esac
          esac
          esac
          esac


      | While (expr, state_1) ->

          case genLabels (env, 2) of [ls, l, env_1] ->
          case compile (state_1, env_1) of [n_state_1, env_2] ->
          case compile (expr, env_2) of[nev, env_2] -> 
                  
          [{ JMP (ls), LABEL (l), n_state_1, LABEL (ls), nev, CJMP ("nz", l) }, env_2]
                  
          esac
          esac 
          esac


      | Repeat (state_1, expr) ->

          case genLabels (env, 1) of [l, env_1] ->
          case compile (state_1, env_1) of [n_state, env_2] ->
          case compile (expr, env_2) of [nev, env_2] -> 
          
          [{ LABEL (l), n_state, nev, CJMP ("z", l) }, env_2]
          
          esac
          esac 
          esac

      | Call (f, args) ->

          case compileArguments (args, env) of[n_args, n_env] ->
          case f of "read" -> 
        
          [{ n_args, CALL ("_read", 0) }, n_env]

          | "write" -> [{ n_args, CALL ("_write", 1) }, n_env]

          | _ ->

          case lookupFun (env, f) of Fun (l, n) -> 

           [{ n_args, CALL (l, n) }, n_env]

          esac
          esac
          esac


      | Scope (defs, expr) -> 
      
          case foldl (fun ([env, funcs, glbs], def) {

          case def of

          Fun (func, args, body) ->

          case genFunLabel (env, func) of

          [l, n_env] -> [addFun (n_env, func, l, args.size), [l, args, body] : funcs, glbs]

          esac

          | Local (vals) -> [
            
            addVars (env, vals),funcs,

                    if isGlobal (env) 
                    
                    then { 

                      map (fun (val) { GLOBAL (val) }, vals), glbs 
                      
                      }

                    else glbs

                    fi
                    ]

          esac},

          [beginScope (env), {}, {}], defs) of [env, funcs, glbs] ->

          case compile (expr, foldl (fun (env, [n, args, body]) { 
            
            rememberFun (env, n, args, body) },
            
             env, funcs)) of

          [n_e, n_env] -> [{ glbs, n_e }, endScope (n_env)]

          esac
          esac

      | String (x) -> [singleton (STRING (x)), env]


      | Array (args) ->

          case compileArguments (args, env) of  [n_args, n_env] -> 

         [{ n_args, ARRAY (args.size) }, n_env]

          esac

      | Elem (expr, i) ->

          case compile (expr, env) of[n_c1, n_env1] ->
          case compile (i, n_env1) of[n_c2, n_env2] -> 

          [{ n_c1, n_c2, ELEM }, n_env2]

          esac
          esac


       | Builtin (f, args) ->

          case compileArguments (args, env) of[ n_args, n_env] ->
           
          [{ n_args, BUILTIN (f, args.size)}, n_env]

          esac
      esac
  }

 fun compileArguments (args, env) {

        case args of 
          {} -> [{}, env]
        | { arg } -> compile (arg, env)
        | arg : rmd ->

        case compile (arg, env) of [n_arg, n_env] ->
        case compileArguments (rmd, n_env) of

        [n_args, n_env1] -> [{ n_arg, n_args }, n_env1]

        esac
        esac
        esac

  }

  fun compileFunctions (config, env) {

    fun compileFunction (config, env, funcs) {
      case funcs of {} ->
      case getFuns (env) of

      [{}, n_env] -> config
      | [funcs, n_env] -> compileFunction (config, n_env, funcs)

      esac
      | Fun (funlbls, args, body, state) : rmd -> 

      case compile (body, addArgs (beginFun (env, state), args)) of [n_func, n_env] ->

       compileFunction (
                {
        config, LABEL (funlbls), BEGIN (funlbls, args.size, getLocals (n_env)), n_func, END
            
            }, 
                  n_env, rmd)
      esac
      esac
    }

    compileFunction (config, env, {})
  }

  case compile (expr, initCompEnv ().beginScope) of

    [n_config, n_env] -> deepFlatten (compileFunctions ({
      
       LABEL ("main"), BEGIN ("main", 0, getLocals (n_env)), n_config, END 
       
       },

        n_env))

  esac
}
