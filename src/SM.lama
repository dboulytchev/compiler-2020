-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], program) {
  case program of
    BINOP (op) : tail -> 
        case stack of
          right : left : stackTail -> 
             eval ([evalBinop (op, left, right) : stackTail, state, world], tail) 
        esac

  | CONST (n) : tail -> 
        eval ([n : stack, state, world], tail)

  | READ      : tail -> 
        local readResult = world.readWorld;
        eval ([readResult[0] : stack, state, readResult[1]], tail)

  | WRITE      : tail ->
        case stack of
          top : stackTail -> 
              eval ([stackTail, state, writeWorld (top, world)], tail)
        esac

  | LD (x)    : tail ->
        eval ([state (x) : stack, state, world], tail)

  | ST (x)    : tail ->
        case stack of 
          top : stackTail ->
              eval ([stackTail, state <- [x, top], world], tail)
        esac  

  | _                -> [stack, state, world]
  esac 
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Binop (op, l, r)  -> { l.compileExpr, r.compileExpr, singleton (BINOP (op)) }
  | Const (n)         -> singleton (CONST (n))
  | Var (x)           -> singleton (LD (x))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    fun compile (stmt) {
      case stmt of
        Read (x)       -> { READ, ST (x) }
      | Write (x)      -> { compileExpr (x), WRITE }
      | Seq (x1, x2)   -> { compile (x1), compile (x2) }
      | Assn (x, e)    -> { compileExpr (e), ST (x) }
      | Skip           -> { }
      esac 
    }

    stmt.compile.deepFlatten
}
