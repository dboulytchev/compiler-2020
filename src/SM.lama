-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      CONST(value) : next  -> eval([value:st, cst, s, w], next)
    | READ : next -> case readWorld(w) of
        [value, wNew] -> eval([value:st, cst, s, wNew], next)
      esac
    | WRITE : next -> case st of
        head : tail -> eval([tail, cst, s, writeWorld(head, w)], next)
      esac
    | LD(name):next     -> eval([lookup(s, name):st, cst,  s, w], next)
    | LDA(name):next    -> eval([Ref(name):st, cst, s, w], next)
    | ST(name):next     -> case st of
        head:tail -> assign(s, name, head); 
                     eval([st, cst, s, w], next)
      esac
    | STI:next          -> case st of
        value:Ref(name):tail -> assign(s, name, value);
                                eval([value:tail, cst, s, w], next)
      esac
    | DROP:next         -> case st of
        value:tail -> eval([tail, cst, s, w], next)
      esac
    | BINOP(op):next    -> case st of
        right:left:tail -> eval([evalOp(op, left, right):tail, cst, s, w], next)
      esac
    | LABEL(label):next -> eval(c, next)
    | JMP(label):_ -> eval(c, fromLabel(env, label))
    | CJMP ("nz", label):next  -> case st of
        0:tail -> eval([tail, cst, s, w], next)
      | _:tail -> eval([tail, cst, s, w], fromLabel(env, label))
      esac
    | CJMP ("z", label):next  -> case st of
        0:tail -> eval([tail, cst, s, w], fromLabel(env, label))
      | _:tail -> eval([tail, cst, s, w], next)
      esac
    | END:_ -> case cst of
        {} -> c
      | [sl, e]:cstt -> eval([st, cstt, sl, w], e)
      esac
    | CALL(fn, _):next -> eval([st, [s, next]:cst, s, w], fromLabel(env, fn))
    | BEGIN(_, nArgs, locals):next -> case take(st, nArgs) of
        [stNew, args] -> local newState = makeState(nArgs, locals);
                         foldl(fun(i, arg) {assign(newState, Arg(i), arg); i + 1}, 0, args);
                         eval([stNew, cst, newState, w], next)
      esac
    | GLOBAL(name):next -> assign(s, Glb(name), 0);
                           eval(c, next)
    | _ -> c
  esac 
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
  fun compileArgs (args, env) {
    case args of 
      {} -> [{}, env]
    | arg : tail -> case compileSM(arg, env) of
        [ca, env] ->
                  case compileArgs(tail, env) of [cas, env] ->
                    [{ca, cas}, env]
                  esac
                esac
    esac
  }
  
  fun compileSM (stmt, env) {
      case stmt of
      Skip -> [{}, env]
    | Ref(name) -> [singleton(LDA(lookupVar(env, name))), env]
    | Var(name) -> [singleton(LD(lookupVar(env, name))), env]
    | Const(value) -> [singleton(CONST(value)), env]
    | Binop(op, left, right) -> 
        case compileSM(left, env) of 
          [compLeft, env] -> 
            case compileSM(right, env) of
              [compRight, env] -> [{ compLeft, compRight, BINOP (op) }, env]
            esac
        esac
    | Assn (Ref(name), right) ->
        case compileSM(right, env) of
            [codeLeft, env] -> [{codeLeft, ST(lookupVar(env, name))}, env]
        esac
    | Assn(left, right) -> 
        case compileSM (left, env) of 
          [codeLeft, env] ->
            case compileSM(right, env) of 
              [codeRight, env] -> [{ codeLeft, codeRight, STI }, env]
            esac
        esac
    | Read(name) -> [{ READ, ST(lookupVar(env,name)), DROP}, env]
    | Write(value) -> 
        case compileSM(value, env) of 
          [code, env] -> [{code, WRITE}, env]
        esac
    | Ignore(value) -> 
        case compileSM(value, env) of
          [code, env] -> [{code, DROP}, env]
        esac
    | Seq(stmt1, stmt2) -> case compileSM(stmt1, env) of 
        [code1, env] -> case compileSM(stmt2, env) of 
          [code2, env] -> [{code1, code2}, env]
        esac
      esac
    | While(cond, body) -> case genLabels(env, 2) of 
        [labelExit, labelNext, env] -> case compileSM(body, env) of
          [codeBody, env] -> case compileSM(cond, env) of
            [codeCond, env] -> [{ JMP(labelExit), 
                                  LABEL(labelNext),
                                  codeBody,
                                  LABEL(labelExit),
                                  codeCond,
                                  CJMP("nz", labelNext)
                                }, env]
          esac
        esac
      esac
    | Repeat(body, cond) -> case genLabel(env, 1) of 
        [label, env] -> case compileSM(body, env) of
          [codeBody, env] -> case compileSM(cond, env) of
            [codeCond, env] -> [{ LABEL(label),
                                  codeBody,
                                  codeCond,
                                  CJMP("z", label)
                                }, env]
          esac
        esac
      esac
    | If(cond, onTrue, onFalse) -> case genLabels(env, 2) of 
        [labelTrue, labelFalse, env] -> case compileSM(onTrue, env) of 
          [trueCode, env] -> case compileSM(onFalse, env) of 
            [falseCode, env] -> case compileSM(cond, env) of
              [condCode, env] -> [{ condCode,
                                    CJMP("z", labelFalse),
                                    trueCode,
                                    JMP(labelTrue),
                                    LABEL(labelFalse),
                                    falseCode,
                                    LABEL(labelTrue)
                                  }, env]
              esac
            esac
          esac
        esac
    | Call(fn, args) -> case compileArgs(args, env) of
          [codeArgs, env] -> case lookupFun(env, fn) of
              Fun(entryPoint, nArgs) -> [{codeArgs, CALL(entryPoint, nArgs)}, env]
          esac
      esac
    | Scope(defs, expr) ->

      fun defsFolder ([env, functions, globals], def) {
        case def of
            Local(names) -> [
              addVars(env, names),
              functions,
              if isGlobal(env) then
                {map (fun(x) {GLOBAL (x)}, names), globals}
              else
                globals
              fi
            ]
          | Fun(f, args, body) -> case genFunLabel(env, f) of
                [flabel, env] -> [addFun(env, f, flabel, args.size),
                                  [flabel, args, body] : functions,
                                  globals
                                 ]
            esac
        esac
      }

      case foldl(defsFolder, [beginScope(env), {}, {}], defs) of
        [env, functions, globals] -> 
           local remembered = foldl(fun(env, [name, args, body]) {
               rememberFun(env, name, args, body)
             }, env, functions);

           case compileSM(expr, remembered) of 
               [code, env] -> [{globals, code}, endScope(env)]
           esac
       esac
     esac
  }
  
  fun compileFuncs(code, env) {
    fun compileFuncs(code, env, funcs) {
      case funcs of
        {} -> case getFuns(env) of
            [{}, env] -> code
          | [fs, env] -> compileFuncs(code, env, fs)
        esac
      | Fun(funcLabel, args, body, state):tail -> case compileSM(body, addArgs(beginFun(env, state), args)) of
          [codeFunc, env] -> compileFuncs({code,
                                     LABEL(funcLabel),
                                     BEGIN(funcLabel, args.size, getLocals(env)),
                                     codeFunc,
                                     END},
                                    env, tail)
        esac
      esac
    }
    
    compileFuncs(code, env, {})
  }
  
  case compileSM(stmt, initCompEnv()) of
    [code, env] -> deepFlatten(compileFuncs({LABEL ("main"), BEGIN ("main", 0, getLocals(env)), code, END}, env))
  esac
}

