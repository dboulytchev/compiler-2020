-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[st, s, w], insns) {
    case insns of 
    {} -> c
  | READ : other -> case readWorld (w) of [n, w] -> eval (env, [n : st, s, w], other) esac
  | WRITE : other -> case st of n : st -> eval (env, [st, s, writeWorld (n, w)], other) esac
  | CONST (n) : other -> eval (env, [n : st, s, w], other)
  | BINOP (op) : other -> case st of rhs : lhs : st -> eval (env, [evalOp (op, lhs, rhs) : st, s, w], other) esac
  | LD (x) : other -> eval (env, [s(x) : st, s, w], other)
  
  | LABEL (l) : other -> eval (env, c, other)
  | JMP (l) : other -> eval (env, c, fromLabel (env, l))
  | CJMP ("nz", l) : other -> case st of 
                                  0 : subSt -> eval (env, [subSt, s, w], other)
                                | _ : subSt -> eval (env, [subSt, s, w], fromLabel (env, l))
                              esac
  | CJMP ("z", l) : other -> case st of
                                  0 : subSt -> eval (env, [subSt, s, w], fromLabel (env, l))
                                | _ : subSt -> eval (env, [subSt, s, w], other)
                              esac
  | LDA (x) : other -> eval (env, [Ref (x) : st, s, w], other)
  | ST (x) : other -> case st of n : _ -> eval (env, [st, s <- [x, n], w], other) esac
  | STI : other -> case st of n : Ref (x) : st -> eval (env, [n : st, s <- [x, n], w], other) esac
  | DROP : other -> case st of _ : st -> eval (env, [st, s, w], other) esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile (stmt, env) {
    case stmt of
      Const (n) -> [singleton (CONST (n)), env]
    | Var (x) -> [singleton (LD (x)), env]
    | Ref (x) -> [singleton (LDA (x)), env]
    | Ignore (s) -> case compile (s, env) of [s, env] -> [{s, DROP}, env] esac
    | Binop (op, lhs, rhs) -> case compile (lhs, env) of
                        [s1, env] -> case compile (rhs, env) of
                                       [s2, env] -> [{s1, s2, BINOP (op)}, env]
                                      esac
                              esac
    | Assn (x, e) -> case compile (x, env) of
                        [s1, env] -> case compile (e, env) of [s2, env] ->
                                           [{s1, s2, STI}, env]
                                       esac
                      esac
    | Seq (s1, s2) -> case compile (s1, env) of 
                        [s1, env] -> case compile (s2, env) of
                                          [s2, env] -> [{s1, s2}, env]
                                     esac
                      esac
    | Skip -> [{}, env]
    | Read (x) -> [{READ, ST (x), DROP}, env]
    | Write (e) -> case compile (e, env) of
                    [e, env] -> [{e, WRITE}, env]
                   esac
    | If (s1, s2, s3) -> case genLabels (env, 2) of
                          [l1, l2, env] ->
                              case compile (s2, env) of
                                [s2, env] ->
                                  case compile (s3, env) of
                                    [s3, env] ->
                                      case compile (s1, env) of
                                        [s1, env] -> [{s1, CJMP ("z", l1), s2, JMP (l2), LABEL (l1), s3, LABEL (l2)}, env]
                                      esac
                                  esac
                              esac
                         esac
    | While (s1, s2) -> case genLabels (env, 2) of
                        [l1, l2, env] ->
                          case compile (s2, env) of
                            [s2, env] ->
                              case compile (s1, env) of
                                [s1, env] -> [{JMP (l1), LABEL (l2), s2, LABEL (l1), s1, CJMP ("nz", l2)}, env]
                              esac
                          esac
                      esac
    | Repeat (s1, s2) -> case genLabel (env) of
                        [l, env] ->
                          case compile (s1, env) of
                            [s1, env] ->
                              case compile (s2, env) of
                                [s2, env] -> [{LABEL (l), s1, s2, CJMP ("z", l)}, env]
                              esac
                          esac
                       esac
    esac
  }
  deepFlatten (compile (stmt, initCompEnv ())[0])
}
