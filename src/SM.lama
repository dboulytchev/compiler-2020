-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c @ [stack, state, w], insns) {
  case insns of
      h : t -> case h of
                     CONST(n)  -> [n:stack, state, w]
                   | BINOP(op) -> case stack of
                                      r:l:sttail -> [op.applyInfixOp(l, r):sttail, state, w]
                                    | _          -> failure("Not enough values on stack for BINOP %s in statement %s\n", op.string, insns.string)
                                  esac
                   | LD(x)     -> [state(x):stack, state, w]
                   | ST(x)     -> case stack of
                                      h:sttail -> [sttail, state <- [x, h], w]
                                    | _        -> failure("Not enough values on stack for ST in statement %s\n", insns.string)
                                  esac
                   | READ      -> case readWorld(w) of
                                      [v, ww]  -> [v:stack, state, ww]
                                  esac
                   | WRITE     -> case stack of
                                      h:sttail -> [sttail, state, writeWorld(h, w)]
                                    | _        -> failure("Not enough values on stack for WRITE in statement %s\n", insns.string)
                                  esac
               esac . eval(t)
    | _ -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Const(c)       -> singleton(CONST(c))
    | Var(x)         -> singleton(LD(x))
    | Binop(op, l, r)-> flatten({compileExpr(l), compileExpr(r), singleton(BINOP(op))})
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn(x, v)  -> flatten({compileExpr(v), singleton(ST(x))})
    | Read(x)     -> {READ, ST(x)}
    | Write(v)    -> flatten({compileExpr(v), singleton(WRITE)})
    | Seq(s1, s2) -> flatten({compileSM(s1), compileSM(s2)})
  esac
}
