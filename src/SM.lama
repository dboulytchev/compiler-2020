-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, w], insns) {
  case insns of
    CONST(c):other  -> eval([c:stack, st, w], other)
  | BINOP(op):other -> case stack of
                         r:l:rest -> eval([evalBinop(op, l, r):rest, st, w], other)
                       esac
  | LD(x):other     -> eval([st(x):stack, st, w], other)
  | ST(x):other     -> case stack of
                         head:rest -> eval([rest, st <- [x, head], w], other)
                       esac
  | READ:other      -> case readWorld(w) of
                         [val, w2] -> eval([val:stack, st, w2], other)
                       esac
  | WRITE:other     -> case stack of
                         head:rest -> eval([rest, st, writeWorld(head, w)], other)
                       esac
  | {}              -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const(c) -> singleton(CONST(c))
  | Var(x) -> singleton(LD(x))
  | Binop(op, l, r) -> { compileExpr(l), compileExpr(r), BINOP(op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile(stmt) {
    case stmt of
      Read(x) -> { READ, ST(x) }
    | Write(val) -> deepFlatten({ compileExpr(val), singleton(WRITE) })
    | Assn(x, val) -> deepFlatten({ compileExpr(val), singleton(ST(x)) })
    | Seq(stmt1, stmt2) -> deepFlatten({ compileSM(stmt1), compileSM(stmt2) })
    esac
  }
  deepFlatten(compile(stmt))
}
