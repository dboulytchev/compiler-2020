-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (state)    -> sprintf ("BINOP %state", state)
  | LD    (x)    -> sprintf ("LD %state", x)
  | LDA   (x)    -> sprintf ("LDA %state", x)
  | ST    (x)    -> sprintf ("ST %state", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (state)    -> sprintf ("LABEL %state", state)
  | JMP   (l)    -> sprintf ("JMP %state", l)
  | CJMP  (c, l) -> sprintf ("CJMP %state, %state", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
    local stack = c[0];
    local state = c[1];
    local world = c[2];
    case insns of
          CONST(c):other            ->  eval(env, [c:stack, state, world], other)
        | BINOP(operation):other    ->  case stack of
                                            right:left:rest -> eval(env, [evalOp(operation, left, right):rest, state, world], other)
                                        esac
        | READ:other                ->  case readWorld(world) of
                                            [value, newWorld] -> eval(env, [value:stack, state, newWorld], other)
                                        esac
        | WRITE:other               ->  case stack of
                                            head:rest -> eval(env, [rest, state, writeWorld(head, world)], other)
                                        esac
        | LD(x):other               ->  eval(env, [state(x):stack, state, world], other)
        | LDA (x):other             ->  eval(env, [Ref (x) : stack, state, world], other)
        | ST(x):other               ->  case stack of
                                            head:rest -> eval(env, [stack, state <- [x, head], world], other)
                                        esac
        | STI : other               ->  case stack of
                                            head:Ref (x):rest -> eval(env, [head:rest, state <- [x, head], world], other)
                                        esac
        | LABEL(l):other             -> eval(env, c, other)
        | JMP(l):other               -> eval(env, c, fromLabel(env, l))
        | CJMP(flag, l):other        -> case flag of
                                       "nz" ->   case stack of
                                                      0 : newStack -> eval(env, [newStack, state, world], other)
                                                    | _ : newStack -> eval(env, [newStack, state, world], fromLabel(env, l))
                                                esac
                                     | "z" ->  case stack of
                                                      0 : newStack -> eval(env, [newStack, state, world], fromLabel(env, l))
                                                    | _ : newStack -> eval(env, [newStack, state, world], other)
                                                esac
                                       esac
        | DROP:other                -> case stack of
                                         head:rest -> eval(env, [rest, state, world], other)
                                       esac
        | _ -> c
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    fun compileIfStmt(e, s1, s2, env) {
        case genLabels(env, 2) of [ls2, lexit, env1] ->
          case compile(s1, env1) of [cs1, env2] ->
            case compile(s2, env2) of [cs2, env3] ->
              case compile(e, env3) of [ce, env3] ->
                [{ce, CJMP("z", ls2), cs1, JMP(lexit), LABEL(ls2), cs2, LABEL(lexit)}, env3]
              esac
            esac
          esac
        esac
    }

    fun compileWhile(e, s1, env) {
        case genLabels(env, 2) of [le, ls, env1] ->
          case compile(s1, env1) of [cs1, env2] ->
            case compile(e, env2) of [ce, env2] ->
              [{JMP(le), LABEL(ls), cs1, LABEL(le), ce, CJMP("nz", ls)}, env2]
            esac
          esac
        esac
    }

    fun compileRepeat(s1, e, env) {
        case genLabels(env, 1) of [ls, env1] ->
          case compile(s1, env1) of [cs1, env2] ->
            case compile(e, env2) of [ce, env2] ->
              [{LABEL(ls), cs1, ce, CJMP("z", ls)}, env2]
            esac
          esac
        esac
    }
    fun compile (stmt, env) {
          case stmt of
            Const (x) -> [singleton(CONST (x)), env]
          | Var (x) -> [singleton(LD (x)), env]
          | Ref (x) -> [singleton(LDA (x)), env]
          | Read (x) -> [{READ, ST (x), DROP}, env]
          | Write (e) -> case compile(e, env) of [ce, env1] ->
                           [{ce, WRITE}, env1]
                         esac
          | Assn (x, e) -> case compile(x, env) of [cs1, env1] ->
                             case compile(e, env1) of [cs2, env2] ->
                               [{cs1, cs2, STI}, env2]
                             esac
                           esac
          | Seq (s1, s2) ->
                case compile(s1, env) of [cs1, env1] ->
                  case compile(s2, env1) of [cs2, env2] ->
                    [{cs1, cs2}, env2]
                  esac
                esac
          | Skip -> [{}, env]
          | Ignore (state) -> case compile(state, env) of [cs1, env1] ->
                            [{cs1, DROP}, env1]
                          esac
          | Binop (op, l, r) -> case compile(l, env) of [cs1, env1] ->
                                  case compile(r, env1) of [cs2, env2] ->
                                    [{cs1, cs2, BINOP(op)}, env2]
                                  esac
                                esac
          | If (x, stmt1, stmt2)    ->  { compileIfStmt(x, stmt1, stmt2, env) }
          | While (x, stmt)         ->  { compileWhile(x, stmt, env) }
          | Repeat (stmt, x)        ->  { compileRepeat(stmt, x, env) }
        esac
      }

      deepFlatten(compile(stmt, initCompEnv())[0])
}
