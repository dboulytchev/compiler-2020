-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
<<<<<<< HEAD
fun eval (c@[sk, s, w], insns) {
	case insns of
		CONST (const) : i -> eval ([const : sk, s, w], i)
		| READ : i -> case readWorld (w) of [v, nw] -> eval ([v : sk, s, nw], i) esac
		| WRITE : i -> case sk of head : t ->	eval ([t, s, writeWorld (head, w)], i) esac
		| ST (x) : i ->  case sk of	head : t -> eval ([t, s <- [x, head], w], i) esac
		| LD (x) : i -> eval ([s (x) : sk, s, w], i)
		| BINOP (o) : i -> case sk of r : l : t -> eval ([evalBinop (o, l, r) : t, s, w], i) esac
		| {} -> c
	esac
=======
fun eval (env, c, insns) {
  failure ("SM eval not implemented\n")
>>>>>>> 26bdd66800647cf6329a6967b8a2dc442feac576
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

<<<<<<< HEAD
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
	case expr of
	    Const (x) -> singleton (CONST (x))
	  | Var (x) -> singleton (LD (x))
	  | Binop (op, l, r) -> {compileExpr (l), compileExpr(r), BINOP (op)}
  	esac
=======
-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
>>>>>>> 26bdd66800647cf6329a6967b8a2dc442feac576
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile (stmt) {
	case stmt of
	    Skip -> {}
	  | Assn (x, e) -> {compileExpr (e), ST (x)}
	  | Read (x) -> { READ, ST (x) }
	  | Write (x) -> {compileExpr (x), WRITE}
	  | Seq (s1, s2) -> {compile (s1), compile (s2)}
  	esac 
  }
  deepFlatten (compile (stmt))
}
