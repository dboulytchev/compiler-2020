-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, s, w], insns) {
  case insns of 
    {} -> c
  | READ : other -> case readWorld (w) of [n, w] -> eval ([n : stack, s, w], other) esac
  | WRITE : other -> case stack of n : stack -> eval([stack, s, writeWorld (n, w)], other) esac
  | CONST (n) : other -> eval ([n : stack, s, w], other)
  | BINOP (op) : other -> case stack of rhs : lhs : stack -> eval ([evalBinop (op, lhs, rhs) : stack, s, w], other) esac
  | LD (x) : other -> eval ([s(x) : stack, s, w], other)
  | ST (x) : other -> case stack of n : stack -> eval ([stack, s <- [x, n], w], other) esac
  esac
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Const (n) -> singleton (CONST (n))
  | Var (x) -> singleton (LD (x))
  | Binop (op, lhs, rhs) -> {compileExpr (lhs), compileExpr (rhs), BINOP (op)}
  esac
}


-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile (stmt) {
    case stmt of
      Assn (x, e) -> {compileExpr (e), ST (x)}
    | Seq (s1, s2) -> {compile (s1), compile (s2)}
    | Skip -> {}
    | Read (x) -> {READ, ST (x)}
    | Write (e) -> {compileExpr (e), WRITE}
    esac
  }
  deepFlatten (compile (stmt))
}

