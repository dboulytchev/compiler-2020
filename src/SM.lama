-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;



-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], insns) {
  case insns of
    CONST(value):next -> eval([value:stack, state, world], next)
  | READ:next         -> case readWorld(world) of
                           [value, world2] -> eval([value:stack, state, world2], next)
                            | _ -> failure("11111")
                        esac
  | ST(name):next     -> case stack of
                           head:tail -> eval([tail, state <- [name, head], world], next)
                         esac
  | LD(name):next     -> eval([state(name):stack, state, world], next)
  | BINOP(op):next    -> case stack of 
                           right:left:tail -> eval([evalBinary(op, left, right):tail, state, world], next)
                         esac
  | WRITE:next        -> case stack of
                           head:tail -> eval([tail, state, writeWorld(head, world)], next)
                         esac
  | {}                -> [stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Const(value) -> singleton(CONST(value))
  | Var(name) -> singleton(LD(name))
  | Binop(op, left, right) -> flatten({compileExpr(left), compileExpr(right), singleton(BINOP(op))})
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Read(value) -> {READ, ST(value) }
  | Write(expr) -> flatten({compileExpr(expr), singleton(WRITE)})
  | Seq(stmt1, stmt2) -> flatten({compileSM(stmt1), compileSM(stmt2)})
  | Assn(name, value) -> flatten({compileExpr(value), singleton(ST(name))})
  esac
}
