-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration

-- fun eval (env, config @ [stack, state, world], insns) {
--   fun getConfig ([stack, state, world], insn : insns) {
--     case insn of
--       CONST (n)   -> [n : stack, state, world]
--     | BINOP (op)  -> case stack of
--                        r : l : tail -> [op.evalBinop(l, r) : tail, state, world]
--                      esac
--     | LD (x)      -> [state(x) : stack, state, world]
--     | ST (x)      -> [stack.tl, state <- [x, stack.hd], world]
--     | READ        -> case readWorld(world) of
--                        [n, newworld] -> [n : stack, state, newworld]
--                      esac
--     | WRITE       -> [stack.tl, state, writeWorld(stack.hd, world)]
--     | CJMP (_, _) -> [stack.tl, state, world]
--     | _           -> [stack, state, world]
--     esac
--   }

--   fun getProgram ([stack, state, world], insn : insns) {
--     case insn of
--       JMP  (l)       -> env.fromLabel(l)
--     | CJMP ("nz", l) -> if stack.hd then env.fromLabel(l) else insns fi
--     | CJMP ("z",  l) -> if stack.hd then insns else env.fromLabel(l) fi
--     | _              -> insns
--     esac
--   }
  
--   if insns 
--   then eval(env, getConfig(config, insns), getProgram(config, insns)) 
--   else config 
--   fi
-- }

fun eval (env, config @ [stack, state, world], insns) {
  case insns of
      CONST (n)  : insns -> eval(env, [n : stack, state, world], insns)	
    | READ       : insns -> case readWorld(world) of [n, world] -> 
                              eval (env, [n : stack, state, world], insns)
                            esac
    | WRITE      : insns -> eval(env, [stack.tl, state, writeWorld(stack.hd, world)], insns)
    | ST (x)     : insns -> eval(env, [stack.tl, state <- [x, stack.hd], world], insns)
    | LD (x)     : insns -> eval(env, [state(x) : stack, state, world], insns)	
    | BINOP (op) : insns -> case stack of
                              r : l : stack -> 
                                eval(env, [op.evalBinop(l, r) : stack, state, world], insns)
                            esac
    | LABEL (_)      : insns -> eval(env, config, insns)
    | JMP (l)        : insns -> eval(env, config, env.fromLabel(l))
    | CJMP ("z", l)  : insns -> eval(env, [stack.tl, state, world], if stack.hd then insns else env.fromLabel(l) fi)
    | CJMP ("nz", l) : insns -> eval(env, [stack.tl, state, world], if stack.hd then env.fromLabel(l) else insns fi)
    | {} -> config
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Const (c)        -> singleton(CONST (c))
    | Var   (x)        -> singleton(LD (x))
    | Binop (op, l, r) -> { compileExpr(l), compileExpr(r), BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.

public fun compileSM (stmt) {
  fun compileSM (env, stmt) {
      case stmt of
          Skip -> [{}, env]
        | Read (x) -> [{READ, ST (x)}, env]
        | Write (e) -> [{compileExpr (e), WRITE}, env]
        | Assn (x, e) -> [{compileExpr (e), ST (x)}, env]
        | Seq (s1, s2) ->
            case compileSM (env, s1) of [instr1, env1] ->
              case compileSM (env1, s2) of [instr2, env2] ->
                [{instr1, instr2}, env2]
              esac
            esac
        | While (e, body) ->
            case genLabels (env,2) of [lBody, lCheck, envL] ->
              case compileSM (envL, body) of [instr1, env1] ->
                [{JMP (lCheck), LABEL (lBody), instr1, LABEL (lCheck), compileExpr (e), CJMP ("nz", lBody)}, env1]
              esac
            esac
        | If (e, sIf, sElse) -> 
            case genLabels (env, 2) of [lElse, lFi, envL] ->
              case compileSM (envL, sIf) of [instr1, env1] ->
                case compileSM (env1, sElse) of [instr2, env2] ->
                  [{compileExpr (e), CJMP ("z", lElse), instr1, JMP (lFi), LABEL (lElse), instr2, LABEL (lFi)}, env2]
                esac
              esac
            esac
        | Repeat (body, e) ->
            case genLabels (env, 1) of [lBody, envL] ->
              case compileSM (envL, body) of [instr1, env1] ->
                [{LABEL (lBody), instr1, compileExpr (e), CJMP ("z", lBody)}, env1]
              esac
            esac
      esac
  }

  initCompEnv().compileSM(stmt).fst.deepFlatten
}
