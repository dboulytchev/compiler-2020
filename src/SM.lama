-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;
import Ref;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  local context = ref (c), instructions = ref (insns), cont = ref (1);
  
  while deref (cont) do
    local ret = case deref (instructions) of
      i : is ->
        case deref (context) of
          was@[stack, state, world] -> 
            case i of
              LD    (x)        -> [[state (x) : stack, state, world], is]
            | ST    (x)        -> [[tl (stack), state <- [x, hd (stack)], world], is]
            | READ             -> local ret = readWorld (world);
                                  [[ret[0] : stack, state, ret[1]], is]
            | WRITE            -> [[tl (stack), state, writeWorld (hd (stack), world)], is]
            | CONST (x)        -> [[x : stack, state, world], is]
            | BINOP (op)       -> [[case stack of a : b : last -> sym2fun (op) (b, a) : last esac, state, world], is]
            | LABEL (_)        -> [was, is]
            | JMP   (l)        -> [was, fromLabel (env, l)]
            | CJMP  (cond, l)  -> case stack of 
                                    a : last -> 
                                      [[last, state, world], 
                                       if a == 0 && compare (cond, "z") == 0 !! a && compare (cond, "nz") == 0
                                       then fromLabel (env, l) else is fi]
                                  esac
            esac
        esac
    | {} -> cont ::= 0; [deref (context), deref (instructions)]
    esac;
    context ::= ret [0];
    instructions ::= ret [1]
  od;

  deref (context)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (a)        -> LD    (a) : {}
  | Const (a)        -> CONST (a) : {}
  | Binop (op, a, b) -> {compileExpr (a), compileExpr (b), BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compileSMinternal (env, stmt) {
    case stmt of
      Assn  (a, e)   -> [env, {compileExpr (e), ST (a)}]
    | Seq   (a, b)   -> case compileSMinternal (env, a) of 
                          [env, res1] -> 
                            case compileSMinternal (env, b) of
                              [env, res2] -> [env, {res1, res2}]
                            esac
                        esac
    | Skip           -> [env, {}]
    | Read  (a)      -> [env, {READ, ST (a)}]
    | Write (e)      -> [env, {compileExpr (e), WRITE}]
    | If (e, s1, s2) -> case genLabels (env, 2) of
                          [l1, l2, env] -> 
                            case compileSMinternal (env, s1) of
                              [env, res1] -> 
                                case compileSMinternal (env, s2) of
                                  [env, res2] -> [env, {compileExpr (e), CJMP ("z", l1), res1, JMP (l2), LABEL (l1), res2, LABEL (l2)}]
                                esac
                            esac
                        esac
    | While (e, s)   -> case genLabels (env, 2) of
                          [l1, l2, env] ->
                            case compileSMinternal (env, s) of
                              [env, res] -> [env, {JMP (l1), LABEL (l2), res, LABEL (l1), compileExpr (e), CJMP ("nz", l2)}]
                            esac
                        esac
    | Repeat (s, e)  -> case genLabel (env) of
                          [l, env] ->
                            case compileSMinternal (env, s) of
                              [env, res] -> [env, {LABEL (l), res, compileExpr (e), CJMP ("z", l)}]
                            esac
                        esac
    esac
  }
  deepFlatten (compileSMinternal (initCompEnv (), stmt) [1])
}
