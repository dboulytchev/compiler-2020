-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  case insns of 
    {} -> c
  | i : insns ->
      eval (
        case i of 
          READ -> case readWorld(world) of [n, world] -> [n : stack, state, world] esac
        | WRITE -> case stack of n: stack -> [stack, state, writeWorld(n, world)] esac
        | BINOP(op) -> case stack of x : y : stack -> [callBinOp(op, y, x) : stack, state, world] esac
        | CONST(n) -> [n : stack, state, world]
        | LD(x) -> [state(x) : stack, state, world]
        | ST(x) -> case stack of n : stack -> [stack, state <- [x,n], world] esac
        esac,
        insns
       )
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var(x) -> singleton(LD(x))
  | Const(n) -> singleton(CONST(n))
  | Binop(op, left, right) -> {compileExpr(left), compileExpr(right), BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile (stmt){
    case stmt of
      Skip -> {}
    | Assn(x, expr) -> {compileExpr(expr), ST(x)}
    | Write(expr) -> {compileExpr(expr), WRITE}
    | Read(x) -> {READ, ST(x)}
    | Seq(state1, state2) -> {compile(state1), compile(state2)}
    esac
  }
  deepFlatten(compile(stmt))
}
