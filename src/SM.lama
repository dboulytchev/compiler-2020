-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration


fun eval (config@[stack, state, world], instr) {
  case instr of 
   
  READ : rmd -> case 
  
  readWorld (world) of [value, world2] -> eval ([value : stack, state, world2], rmd)
  
  esac
  | WRITE : rmd -> case
  
   stack of value : stackrmd -> eval([stackrmd, state, writeWorld (value, world)], rmd)
   
  esac
 
  | BINOP (operation) : rmd -> case 
  
  stack of r : l : stackrmd -> eval ([evalBinop(operation, l, r) : stackrmd, state, world], rmd)
  
   esac


  | ST (value) : rmd -> case 
  
  stack of x : stackrmd -> eval ([stackrmd, state <- [value, x], world], rmd) 
  
  esac

  |CONST (value) : rmd -> eval ([value : stack,state, world], rmd)

  |LD (value) : rmd -> eval ([state(value) : stack, state, world], rmd)

  | {} -> config
  esac
}





-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (value) -> singleton(LD (value))
  | Const (value) -> singleton(CONST (value))
  | Binop (operation, l, r) -> deepFlatten (compileExpr (l) +++ compileExpr(r) +++ singleton (BINOP (operation)))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (value, expr) -> deepFlatten (compileExpr (expr) +++ singleton (ST (value)))
  | Read (value) -> { READ, ST (value) }
  | Write (value) -> deepFlatten (compileExpr (value) +++ singleton (WRITE))
  | Seq (state1,state2 ) -> deepFlatten (compileSM (state1) +++ compileSM (state2))
  | Skip -> {}
  esac 
}





