-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], insns) {
  case insns of 
    CONST(z):tail -> eval([z:stack, state, world], tail)
  | READ:tail -> 
      case readWorld(world) of 
        [item, newWorld] -> eval([item:stack, state, newWorld], tail)
      esac
  | WRITE:tail -> 
      eval(
        case stack of 
          stackHead:rest -> [rest, state, writeWorld(stackHead, world)]
        esac
      , tail
      )
  | LD(varName):tail -> eval([state(varName):stack, state, world], tail)
  | ST(varName):tail -> 
      eval(
        case stack of 
          stackHead:rest -> [rest, state <- [varName, stackHead], world]
        esac
      , tail
      )
  | BINOP(op):tail -> 
      eval(
        case stack of 
          first:rest -> case rest of 
            second: rrest -> [callBinop(op, second, first):rrest, state, world]
          esac
        esac
      , tail
      )
  | _ -> [stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns.deepFlatten)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
    case expr of 
      Var(x) -> singleton(LD(x))
      | Const(n) -> singleton(CONST(n))
      | Binop(op, l, r) -> {compileExpr(l), compileExpr(r), BINOP(op)}
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of 
    Assn(varName, expr) -> {compileExpr(expr), ST(varName)}
  | Read(varName) -> {READ, ST(varName)}
  | Write(expr) -> {compileExpr(expr), WRITE}
  | Seq(s1, s2) -> {compileSM(s1), compileSM(s2)}
  esac
}
