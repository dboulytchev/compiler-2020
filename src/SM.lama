-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  fun evalInternal (c@[stack, state, world], instruction) {
    case instruction of
      Load  (x)         -> [state (x) : stack, state, world]
    | Store (x)         -> [tl (stack), state <- [x, hd (stack)], world]
    | Read              -> local ret = readWorld (world);
                           [ret[0] : stack, state, ret[1]]
    | Write             -> [tl (stack), state, writeWorld (hd (stack), world)]
    | Const (x)         -> [x : stack, state, world]

    | Binop (op,  a, b) -> [(fun (a : b : last) { (sym2fun (op)) (b, a) : last }) (stack), state, world]
    esac
  }

  fun makeStep (context, instructions) {
    case instructions of
      i : is -> makeStep (evalInternal (context, i), is)
    | {} -> context
    esac
  }

  makeStep (c, deepFlatten (insns))
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (a)           -> Load (a) : {}
  | Const (a)         -> Const (a) : {}
  | Binop (op,  a, b) -> {compileExpr (a), compileExpr (b), Binop (op,  a, b)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Seq (a, b)  -> {compileSM (a), compileSM (b)}
  | Read (a)    -> {Read, Store (a)}
  | Write (e)   -> {compileExpr (e), Write}
  | Assn (a, e) -> {compileExpr (e), Store (a)}
  | _           -> {}
  esac
}
