-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  -- stack, state, world - stack machine configuration
  --local stack = c[0];
  --local state = c[1];
  --local world = c[2];
  case insns of
    CONST(x):         ins -> eval([x:stack, state, world], ins)
  | BINOP(operation): ins -> case stack of
                              right:left:rest -> eval([evalBinop(operation, left, right):rest, state, world], ins)
                              esac

  | LD(x):            ins -> eval([state(x):stack, state, world], ins)

  | ST(x):            ins -> case stack of
                              head:rest -> eval([rest, state <- [x, head], world], ins)
                                esac

  | READ:             ins -> case readWorld(world) of
                              [value, newWorld] -> eval([value:stack, state, newWorld], ins)
                                esac

  | WRITE:            ins -> case stack of
                              head:rest -> eval([rest, state, writeWorld(head, world)], ins)
                              esac

  | {}                      -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
  Const(x) -> singleton(CONST(x))
  | Var(x)   -> singleton(LD(x))
  | Binop(operation, left, right) -> {compileExpr(left), compileExpr(right), BINOP(operation)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    fun innerCompile (stmt) {
        case stmt of
            Skip -> {}
            |   Assn(x, e) -> {compileExpr(e), ST(x)}
            |   Read(x) -> {READ, ST(x)}
            |   Write(e) -> {compileExpr(e), WRITE}
            |   Seq(stmt1, stmt2) -> {innerCompile(stmt1), innerCompile(stmt2)}
        esac
    }
    deepFlatten (innerCompile (stmt))
}
