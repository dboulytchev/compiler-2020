-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], insns) {
  case insns of
    BINOP (op) :  reminder -> case stack of
                                   right : left : stackReminder -> eval([binOp(op, left, right) : stackReminder, state, world], reminder)
                              esac
  | CONST (val) : reminder -> eval([val:stack, state, world], reminder)
  | READ        : reminder -> case readWorld(world) of
                                   [val, worldResult] -> eval([val:stack, state, worldResult], reminder)
                              esac
  | WRITE       : reminder -> case stack of
                                   val : stackReminder -> eval([stackReminder, state, writeWorld(val, world)], reminder)
                              esac
  | LD    (val) : reminder -> eval([state(val):stack, state, world], reminder)
  | ST    (val) : reminder -> case stack of
                                   x : stackReminder -> eval([stackReminder, state <- [val, x], world], reminder)
                              esac
  | _                      -> [stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Binop (op, left, right) -> {compileExpr(left), compileExpr(right), BINOP (op)}
  | Const (val)             -> singleton(CONST (val))
  | Var   (val)             -> singleton(LD (val))
  | _                       -> failure("Wrong expr")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile_sm(stmt) {
  case stmt of
    Read  (val)       -> {READ, ST (val)}
  | Write (expr)      -> {compileExpr(expr), WRITE}
  | Seq   (x1, x2)    -> {compileSM (x1), compileSM (x2)}
  | Assn  (val, expr) -> {compileExpr(expr), ST (val)}
  | _                 -> {}
  esac
  }
  deepFlatten(compile_sm(stmt))
}
