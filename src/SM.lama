-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], program) {
  case program of
    BINOP (op) : tail -> 
        case stack of
          right : left : stackTail -> 
             eval ([evalBinop (op, left, right) : stackTail, state, world], tail) 
        esac

  | CONST (n) : tail -> 
        eval ([n : stack, state, world], tail)

  | READ      : tail -> 
        local readResult = world.readWorld;
        eval ([readResult[0] : stack, state, readResult[1]], tail)

  | WRITE      : tail ->
        case stack of
          top : stackTail -> 
              eval ([stackTail, state, writeWorld (top, world)], tail)
        esac

  | LD (x)    : tail ->
        eval ([state (x) : stack, state, world], tail)

  | ST (x)    : tail ->
        case stack of 
          top : stackTail ->
              eval ([stackTail, state <- [x, top], world], tail)
        esac  

  | _                -> [stack, state, world]
  esac 
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Binop (op, l, r)  -> { l.compileExpr, r.compileExpr, singleton (BINOP (op)) }
  | Const (n)         -> singleton (CONST (n))
  | Var (x)           -> singleton (LD (x))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    fun compile (stmt) {
      case stmt of
        Read (x)       -> { READ, ST (x) }
      | Write (x)      -> { compileExpr (x), WRITE }
      | Seq (x1, x2)   -> { compile (x1), compile (x2) }
      | Assn (x, e)    -> { compileExpr (e), ST (x) }
      | Skip           -> { }
      esac 
    }

    stmt.compile.deepFlatten
}
