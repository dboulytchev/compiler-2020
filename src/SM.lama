-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, st, w], insns) {
	case insns of
		  CONST(c):other -> eval([c:stack, st, w], other)
		| BINOP(op):other -> case stack of
				r:l:rest -> eval([evalBinop(op, l, r):rest, st, w], other)
			esac
		| LD(x):other -> eval([st(x):stack, st, w], other)
		| ST(x):other -> case stack of
				head:rest -> eval([rest, st <- [x, head], w], other)
			esac
		| READ:other -> case readWorld(w) of
				[val, w2] -> eval([val:stack, st, w2], other)
			esac
		| WRITE:other -> case stack of
				head:rest -> eval([rest, st, writeWorld(head, w)], other)
			esac
		| {} -> [stack, st, w]
	esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
	fun compile (expr) {
		case expr of
			Const(c) -> singleton(CONST(c))
			| Var(x) -> singleton(LD(x))
			| Binop(op, l, r) -> {compile(l), compile(r), BINOP(op)}
		esac
	}
	deepFlatten(compile (expr))	
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
	fun compile (stmt) {
		case stmt of
			stackip -> {}
			| Read(x) -> {READ, ST(x)}
			| Write(val) -> {compileExpr(val), WRITE}
			| Assn(x, val) -> {compileExpr (val), ST(x)}
			| Seq(stmt1, stmt2) -> {compile(stmt1), compile(stmt2)}
		esac
	}
	deepFlatten (compile (stmt))
}