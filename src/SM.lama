-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
    BINOP (op) : ins -> case st of
                           y : x : stt -> eval([evalOp(op, x, y) : stt, cst, s, w], ins)
                         esac
  | CONST (x) : ins -> eval([x:st, cst, s, w], ins)
  | READ : ins -> case readWorld(w) of
                     [z, wd] -> eval([z:st, cst, s, wd], ins)
                   esac
  | WRITE : ins -> case st of
                      z : stt -> eval([stt, cst, s, writeWorld(z, w)], ins)
                    esac
  | DROP : ins -> case st of
                     z : stt -> eval([stt, cst, s, w], ins)
                   esac
  | LD (x) : ins -> eval([lookup(s, x) : st, cst, s, w], ins)
  | LDA (x) : ins -> eval([Ref (x) : st, cst, s, w], ins)
  | ST (x) : ins -> case st of
                       z : stt -> assign(s, x, z); 
                                  eval([st, cst, s, w], ins)
                     esac
  | STI : ins -> case st of
                    z : Ref (x) : stt -> assign(s, x, z); 
                                         eval([z:stt, cst, s, w], ins)
                  esac
  | LABEL (l) : ins -> eval(c, ins)
  | JMP (l) : ins -> eval(c, fromLabel(env, l))
  | CJMP ("nz", l) : ins -> case st of
                              0 : stt -> eval([stt, cst, s, w], ins)
                            | _ : stt -> eval([stt, cst, s, w], fromLabel(env, l))
                            esac
  | CJMP ("z", l) : ins -> case st of
                              0 : stt -> eval([stt, cst, s, w], fromLabel(env, l))
                            | _ : stt -> eval([stt, cst, s, w], ins)
                            esac
  | END : ins -> case cst of
                    {} -> c
                  | [sl, q] : cstt -> eval([st, cstt, sl, w], q)
                  esac
  | CALL (f, n) : ins -> 
        case f[0] of
          '_' -> case take(st, n) of
                   [stt, args] -> case evalBuiltin(substring(f, 1, f.length-1), args, w) of [z, wd] -> eval([z:stt, cst, s, wd], ins) esac
                 esac
        | _ -> eval([st, [s, ins] : cst, s, w], fromLabel(env, f))
        esac
  | BEGIN (_, a, l) : ins -> case take(st, a) of
                                [stt, args] -> local sl = makeState(a, l);
                                               foldl (fun (i, arg) {assign(sl, Arg (i), arg); i+1}, 0, args);
                                               eval([stt, cst, sl, w], ins) 
                              esac
  | GLOBAL (x) : ins -> assign(s, Glb (x), 0); eval([st, cst, s, w], ins)
  | STRING (str) : ins -> eval([str:st, cst, s, w], ins)
  | ARRAY (n) : ins -> case take(st, n) of [stt, args] -> eval([listArray(args) : stt, cst, s, w], ins) esac
  | STA : ins -> case st of
                    v : i : a : stt -> a[i] := v; eval([v:stt, cst, s, w], ins)
                  esac
  | ELEM : ins -> case st of
                     i : a : stt -> eval([a[i]:stt, cst, s, w], ins)
                   esac
  | BUILTIN (f, n) : ins -> case take(st, n) of
                        [stt, args] -> case evalBuiltin(f, args, w) of [z, wd] -> eval([z:stt, cst, s, wd], ins) esac
                      esac
  | _ -> c
  esac 
  }

  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
    fun compileArgs (args, env) {
    case args of 
      {} -> [{}, env]
    | a : {} -> compile(a, env)
    | a : as -> case compile(a, env) of [ca, env] ->
                  case compileArgs(as, env) of [cas, env] ->
                    [{ca, cas}, env]
                  esac
                esac
    esac
  }
  
  fun compile (stmt, env) {
      case stmt of
        Const (x) -> [singleton(CONST (x)), env]
      | Var (x) -> [singleton(LD (lookupVar(env, x))), env]
      | Ref (x) -> [singleton(LDA (lookupVar(env, x))), env]
      | Assn (Ref (x), e) -> case compile(e, env) of [cse, env] ->
                               [{cse, ST (lookupVar(env, x))}, env]
                             esac
      | Assn (ElemRef (a, i), e) -> case compile(a, env) of [csa, env] ->
                                      case compile(i, env) of [csi, env] ->
                                        case compile(e, env) of [cse, env] ->
                                          [{csa, csi, cse, STA}, env]
                                        esac
                                      esac
                                    esac
      | Assn (x, e) -> case compile(x, env) of [cs1, env1] ->
                         case compile(e, env1) of [cs2, env2] ->
                           [{cs1, cs2, STI}, env2]
                         esac
                       esac
      | Seq (s1, s2) -> 
            case compile(s1, env) of [cs1, env1] -> 
              case compile(s2, env1) of [cs2, env2] -> 
                [{cs1, cs2}, env2]
              esac
            esac
      | Skip -> [{}, env]
      | Ignore (s) -> case compile(s, env) of [cs1, env1] -> 
                        [{cs1, DROP}, env1]
                      esac
      | Binop (op, l, r) -> case compile(l, env) of [cs1, env1] ->
                              case compile(r, env1) of [cs2, env2] ->
                                [{cs1, cs2, BINOP(op)}, env2]
                              esac
                            esac
      | While (e, s1) -> 
            case genLabels(env, 2) of [le, ls, env1] ->
              case compile(s1, env1) of [cs1, env2] ->
                case compile(e, env2) of [ce, env2] ->
                  [{JMP(le), LABEL(ls), cs1, LABEL(le), ce, CJMP("nz", ls)}, env2]
                esac
              esac 
            esac
      | If (e, s1, s2) -> 
            case genLabels(env, 2) of [ls2, lexit, env1] ->
              case compile(s1, env1) of [cs1, env2] ->
                case compile(s2, env2) of [cs2, env3] ->
                  case compile(e, env3) of [ce, env3] ->
                    [{ce, CJMP("z", ls2), cs1, JMP(lexit), LABEL(ls2), cs2, LABEL(lexit)}, env3]
                  esac
                esac
              esac 
            esac
      | Repeat (s1, e) ->
            case genLabels(env, 1) of [ls, env1] ->
              case compile(s1, env1) of [cs1, env2] ->
                case compile(e, env2) of [ce, env2] ->
                  [{LABEL(ls), cs1, ce, CJMP("z", ls)}, env2]
                esac
              esac 
            esac
      | Call (f, args) ->
            case compileArgs(args, env) of [cargs, env] ->
              case f of 
                "read" -> [{cargs, CALL ("_read", 0)}, env]
              | "write" -> [{cargs, CALL ("_write", 1)}, env]
              | _ -> case lookupFun(env, f) of Fun (flabel, n) ->
                       [{cargs, CALL (flabel, n)}, env]
                     esac
              esac
            esac
      | Scope (defs, e) -> 
            case foldl (fun ([env, functions, globals], def) {
                        case def of
                          Local (xs) -> [addVars(env, xs), functions, if isGlobal(env) then
                                                                        {map (fun (x) {GLOBAL (x)}, xs), globals}
                                                                      else
                                                                        globals
                                                                      fi ]
                        | Fun (f, args, body) -> case genFunLabel(env, f) of [flabel, env] ->
                              [addFun(env, f, flabel, args.size), [flabel, args, body] : functions, globals]
                            esac
                        esac
                        }, [beginScope(env), {}, {}], defs) of [env, functions, globals] ->
              case compile(e, foldl(fun (env, [name, args, body]) {rememberFun(env, name, args, body)}, env, functions)) of 
                [ce, env] -> [{globals, ce}, endScope(env)]
              esac
            esac
      | String (str) -> [singleton(STRING (str)), env]
      | Array (args) -> case compileArgs(args, env) of [cargs, env] ->
                          [{cargs, ARRAY (args.size)}, env]
                        esac
      | Elem (e, i) -> case compile(e, env) of [ce, env1] ->
                         case compile(i, env1) of [ci, env2] ->
                           [{ce, ci, ELEM}, env2]
                         esac
                       esac
      | Builtin (f, args) -> case compileArgs(args, env) of [cargs, env] ->
                               [{cargs, BUILTIN (f, args.size)}, env]
                             esac
      
      esac
  }
  
  fun compileFuns(code, env) {
    fun compileF(code, env, funs) {
      case funs of
        {} -> case getFuns(env) of
                [{}, env] -> code
              | [funs, env] -> compileF(code, env, funs)
              esac
      | Fun (fLabel, args, body, state) : fs -> 
            case compile(body, addArgs(beginFun(env, state), args)) of
              [cf, env] -> compileF({code, LABEL (fLabel), BEGIN (fLabel, args.size, getLocals(env)), cf, END}, env, fs)
            esac
      esac
    }
    
    compileF(code, env, {})
  }
  
  case compile(stmt, initCompEnv().beginScope) of
    [code, env] -> deepFlatten(compileFuns({LABEL ("main"), BEGIN ("main", 0, getLocals(env)), code, END}, env))
  esac
}
