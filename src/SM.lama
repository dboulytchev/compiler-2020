-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      CONST (x) : o  -> eval ([x : st, cst, s, w], o)
    | READ : o ->
        case readWorld (w) of
          [v, nw] -> eval ([v : st, cst, s, nw], o)
        esac
    | WRITE : o ->
        case st of
          v : no -> eval ([no, cst, s, writeWorld (v, w)], o)
        esac
    |  BINOP (op) : o ->
         case st of
           r : l : no -> eval ([evalOp (op, l, r) : no, cst, s, w], o)
         esac
    | LD (x) : o -> eval ([lookup (s, x) : st, cst, s, w], o)
    | ST (x) : o ->
        case st of
          v : no -> assign (s, x, v); eval (c, o)
        esac
    | LABEL (l) : o -> eval (c, o)
    | JMP (l) : o -> eval (c, fromLabel (env, l))
    | CJMP (f, l) : o ->
        case f of
          "nz" ->
            case st of
              0 : no -> eval ([no, cst, s, w], o)
            | _ : no -> eval ([no, cst, s, w], fromLabel (env, l))
            esac
        | "z" ->
            case st of
              0 : no -> eval ([no, cst, s, w], fromLabel (env, l))
            | _ : no -> eval ([no, cst, s, w], o)
            esac
        esac
    | LDA (x) : o -> eval ([Ref (x) : st, cst, s, w], o)
    | STI : o ->
        case st of
          v : Ref (x) : no -> assign (s, x, v); eval ([v : no, cst, s, w], o)
        esac
    | DROP : o ->
        case st of
          v : no -> eval ([no, cst, s, w], o)
        esac
    | GLOBAL (x) : o -> assign (s, Glb (x), 0); eval (c, o)
    | CALL (f, n) : o -> 
        case f[0] of
          '_' ->
            case take (st, n) of
              [nst, as] ->
                case evalBuiltin (substring (f, 1, f.length - 1), as, w) of
                  [z, nw] -> eval ([z : nst, cst, s, nw], o)
                esac
            esac
        | _ -> eval ([st, [s, o] : cst, s, w], fromLabel (env, f))
        esac
    | BEGIN (_, a, l) : o ->
        case take (st, a) of
          [nst, as] -> local ns = makeState (a, l);
                       foldl (fun (x, na) { assign (ns, Arg (x), na); x + 1 }, 0, as);
                       eval ([nst, cst, ns, w], o) 
        esac
    | END : o ->
        case cst of
          {} -> c
        | [ns, q] : ncst -> eval ([st, ncst, ns, w], q)
        esac
    | STRING (x) : o -> eval ([x : st, cst, s, w], o)
    | ARRAY (n) : o ->
        case take (st, n) of
          [nst, as] -> eval ([listArray (as) : nst, cst, s, w], o)
        esac
    | STA : o ->
        case st of
          v : i : a : nst -> a[i] := v; eval ([v : nst, cst, s, w], o)
        esac
    | ELEM : o ->
        case st of
          i : a : nst -> eval ([a[i] : nst, cst, s, w], o)
        esac
    | BUILTIN (f, n) : o ->
        case take (st, n) of
          [nst, as] ->
            case evalBuiltin (f, as, w) of
              [z, nw] -> eval ([z : nst, cst, s, nw], o)
            esac
        esac
    | _ -> c
    esac 
  }

  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (expr) {
  fun compileAs (as, env) {
    case as of 
      {} -> [{}, env]
    | { a } -> compile (a, env)
    | a : o ->
        case compile (a, env) of
          [na, nenv1] ->
            case compileAs (o, nenv1) of
              [nas, nenv2] -> [{ na, nas }, nenv2]
            esac
        esac
    esac
  }

  fun compileFs(c, env) {
    fun compileF (c, env, fs) {
      case fs of
        {} ->
          case getFuns (env) of
            [{}, nenv] -> c
          | [fs, nenv] -> compileF (c, nenv, fs)
          esac
      | Fun (l, as, b, st) : o -> 
          case compile (b, addArgs (beginFun (env, st), as)) of
            [nf, nenv] -> compileF ({ c, LABEL (l), BEGIN (l, as.size, getLocals (nenv)), nf, END}, nenv, o)
          esac
      esac
    }

    compileF (c, env, {})
  }

  fun compile (stmt, env) {
      case stmt of
        Const (x) -> [singleton (CONST (x)), env]
      | Var (x) -> [singleton (LD (lookupVar (env, x))), env]
      | Ref (x) -> [singleton (LDA (lookupVar (env, x))), env]
      | Assn (Ref (x), e) ->
          case compile (e, env) of
            [ns, nenv] -> [{ ns, ST (lookupVar (env, x)) }, nenv]
          esac
      | Assn (ElemRef (a, i), e) ->
          case compile (a, env) of
            [nc1, nenv1] ->
              case compile (i, nenv1) of
                [nc2, nenv2] ->
                  case compile (e, nenv2) of
                    [nc3, nenv3] -> [{ nc1, nc2, nc3, STA }, nenv3]
                  esac
              esac
          esac
      | Assn (x, e) ->
          case compile (x, env) of
            [ns1, nenv1] ->
              case compile (e, nenv1) of
                [ns2, nenv2] -> [{ ns1, ns2, STI }, nenv2]
              esac
          esac
      | Binop (op, l, r) ->
          case compile (l, env) of
            [ns1, nenv1] ->
              case compile (r, nenv1) of
                [ns2, nenv2] -> [{ ns1, ns2, BINOP (op) }, nenv2]
              esac
          esac
      | Skip -> [{}, env]
      | Ignore (s) ->
          case compile (s, env) of
            [ns, nenv] -> [{ ns, DROP }, nenv]
          esac
      | Seq (s1, s2) ->
          case compile (s1, env) of
            [ns1, nenv1] ->
              case compile (s2, nenv1) of
                [ns2, nenv2] -> [{ ns1, ns2 }, nenv2]
              esac
          esac
      | If (e, s1, s2) ->
          case genLabels (env, 2) of
            [ls, l, nenv1] ->
              case compile (s1, nenv1) of
                [ns1, nenv2] ->
                  case compile (s2, nenv2) of
                    [ns2, nenv3] ->
                      case compile (e, nenv3) of
                        [ne, nenv3] -> [{ ne, CJMP ("z", ls), ns1, JMP (l), LABEL (ls), ns2, LABEL (l) }, nenv3]
                      esac
                  esac
              esac
          esac
      | While (e, s1) ->
          case genLabels (env, 2) of
            [ls, l, nenv1] ->
              case compile (s1, nenv1) of
                [ns1, nenv2] ->
                  case compile (e, nenv2) of
                    [ne, nenv2] -> [{ JMP (ls), LABEL (l), ns1, LABEL (ls), ne, CJMP ("nz", l) }, nenv2]
                  esac
              esac 
          esac
      | Repeat (s1, e) ->
          case genLabels (env, 1) of
            [l, nenv1] ->
              case compile (s1, nenv1) of
                [ns, nenv2] ->
                  case compile (e, nenv2) of
                    [ne, nenv2] -> [{ LABEL (l), ns, ne, CJMP ("z", l) }, nenv2]
                  esac
              esac 
          esac
      | Call (f, as) ->
          case compileAs (as, env) of
            [nas, nenv] ->
              case f of 
                "read" -> [{ nas, CALL ("_read", 0) }, nenv]
              | "write" -> [{ nas, CALL ("_write", 1) }, nenv]
              | _ ->
                  case lookupFun (env, f) of
                    Fun (l, n) -> [{ nas, CALL (l, n) }, nenv]
                  esac
              esac
          esac
      | Scope (ds, e) -> 
          case foldl (fun ([env, fs, gs], d) {
            case d of
              Local (xs) -> [addVars (env, xs),
                             fs,
                             if isGlobal (env) then { map (fun (x) { GLOBAL (x) }, xs), gs }
                             else gs
                             fi]
            | Fun (f, as, b) ->
                case genFunLabel (env, f) of
                  [l, nenv] -> [addFun (nenv, f, l, as.size), [l, as, b] : fs, gs]
                esac
            esac
            }, [beginScope (env), {}, {}], ds) of [env, fs, gs] ->
            case compile (e, foldl (fun (env, [n, as, b]) { rememberFun (env, n, as, b) }, env, fs)) of
              [ne, nenv] -> [{ gs, ne }, endScope (nenv)]
            esac
          esac
      | String (x) -> [singleton (STRING (x)), env]
      | Array (as) ->
          case compileAs (as, env) of
            [nas, nenv] -> [{ nas, ARRAY (as.size) }, nenv]
          esac
      | Elem (e, i) ->
          case compile (e, env) of
            [nc1, nenv1] ->
              case compile (i, nenv1) of
                [nc2, nenv2] -> [{ nc1, nc2, ELEM }, nenv2]
              esac
          esac
      (*| ElemRef (e, i) ->
            case compile (e, env) of
              [nc1, nenv1] ->
                case compile (i, nenv1) of
                  [nc2, nenv2] -> [{ nc1, nc2, ELEM }, nenv2]
                esac
            esac*)
      | Builtin (f, as) ->
          case compileAs (as, env) of
            [nas, nenv] -> [{ nas, BUILTIN (f, as.size)}, nenv]
          esac
      esac
  }

  case compile (expr, initCompEnv ().beginScope) of
    [c, nenv] -> deepFlatten (compileFs ({ LABEL ("main"), BEGIN ("main", 0, getLocals (nenv)), c, END }, nenv))
  esac
}

