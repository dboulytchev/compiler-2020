-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([s, st, w], insns) {
  case insns of
    CONST (c) : o -> eval ([c : s, st, w], o)
  | READ : o -> case readWorld (w) of
                  [v, nw] -> eval ([v : s, st, nw], o)
                esac
  | WRITE : o -> case s of
                   h : no -> eval ([no, st, writeWorld (h, w)], o)
                 esac
  | BINOP (op) : o -> case s of
                       r : l : no -> eval ([evalBinop (op, l, r) : no, st, w], o)
                     esac
  | LD (x) : o -> eval ([st (x) : s, st, w], o)
  | ST (x) : o -> case s of
                    h : no -> eval ([no, st <- [x, h], w], o)
                  esac
  | _ -> [s, st, w]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (x) -> singleton (CONST (x))
  | Var (x) -> singleton (LD (x))
  | Binop (o, l, r) -> { compileExpr (l), compileExpr(r), BINOP (o) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile (stmt) {
    case stmt of
      Assn (x, e) -> { compileExpr (e), ST (x) }
    | Read (x) -> { READ, ST (x) }
    | Write (x) -> { compileExpr (x), WRITE }
    | Seq (s1, s2) -> { compile (s1), compile (s2) }
    esac
  }

  deepFlatten (compile (stmt))
}
