-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

local primary    = memo $ eta syntax (
                                      -- decimal constant
                                      loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                      -- identifier
                                      x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {fun (a) {
                                                                                                            case args of
                                                                                                              None -> case a of
                                                                                                                        Ref  -> Ref (x)
                                                                                                                      | Void -> Ignore (Var (x))
                                                                                                                      | _    -> Var (x)
                                                                                                                      esac
                                                                                                            | Some (args) -> assertValue (a, Call (x, args))
                                                                                                            esac
                                                                                                         }} |
                                    s["("] x=exp       s[")"]                                            {fun (a) {x (a)}} |
                                    s["{"] x=scopeExpr s["}"]                                            {fun (a) {x (a)}} |
                                    loc=pos h=(kIf c=exp kThen e=scopeExpr { [c, e] }) tl=(kElif c=exp kThen e=scopeExpr { [c, e] })* ending=(kElse e=scopeExpr { [e] })? kFi { fun (a) {
                                                                                                          fix(fun (rec) { 
                                                                                                                fun (list) {
                                                                                                                  case list of
                                                                                                                    q : w : tl  -> If (q [0] (Val), q [1] (a), rec (w : tl))
                                                                                                                  | [c, d] : {} -> If (c (Val), d (a), assertVoid (a, Skip, loc))
                                                                                                                  | [d] : {}    -> d (a)
                                                                                                                  esac
                                                                                                                }
                                                                                                              })((h : tl) +++ case ending of Some (ending) -> ending : {} | _ -> {} esac)
                                                                                                        }} |
                                    loc=pos kWhile cond=exp kDo body=scopeExpr kOd {fun (a) { assertVoid (a, While (cond (Val), body (Void)), loc) }} |
                                    loc=pos kRepeat body=scopeExpr kUntil cond=basic {fun (a) { assertVoid (a, distributeScope (body (Void), fun (body) { Repeat (body, cond (Val)) }), loc) }} |
                                    loc=pos kFor init=scopeExpr s[","] cond=exp s[","] step=exp kDo s=exp kOd { fun (a) { 
                                                                                                              assertVoid (a, 
                                                                                                                          distributeScope (init (Void), 
                                                                                                                                           fun (init) { 
                                                                                                                                             Seq (init, 
                                                                                                                                                  While (cond (Val), 
                                                                                                                                                         Seq (s (Void), 
                                                                                                                                                              step (Void)))) }), loc) 
                                                                                                            }} |
                                    loc=pos kSkip {fun (a) {assertVoid (a, Skip, loc)}} |
                                    loc=pos kRead s["("] x=exp s[")"] {fun (a) { assertVoid (a, Read (x (Ref)), loc) }} |
                                    loc=pos kWrite s["("] x=exp s[")"] {fun (a) { assertVoid (a, Write (x (Val)), loc) }}),
      scopeExpr  = memo $ eta syntax (defs=(kLocal locals=list[syntax(lident (s["="] e=basic { e (Val) })?)] s[";"] { Local (locals) } | 
                                            kFun name=lident args=inbr[s("("), list0(syntax(lident)), s(")")] s["{"] body=(e=scopeExpr { e (Weak) }) s["}"] { Fun (name, args, body) })* 
                                       e=exp {fun (a) {case defs of _ : _ -> expandScope (defs, e (a)) | _ -> e (a) esac}}),
      basic      = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                          fun (l, loc, r) {
                                                            fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                          }])],
                                      [Left , map (binop, singleton ("!!"))],
                                      [Left , map (binop, singleton ("&&"))],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     primary)(id)),
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
