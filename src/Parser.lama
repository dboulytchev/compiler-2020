-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  s (l) |> lift (p |> bypass (s (r)))
}

-- Rule generator for the second rule of Ostap's expr()
fun binopRule (op) { 
  [s (op), fun (l, r) {Binop (op, l, r)}]
}

-- List of available binary operations with rules
-- for Ostap's expr()    
local binopList = 
    {
    -- Binary
    [Left, singleton (binopRule ("!!"))],
    [Left, singleton (binopRule ("&&"))],
    -- Logical
    [Nona, { binopRule ("=="), binopRule ("<="), binopRule ("<"), binopRule (">="), binopRule (">"),
             binopRule ("!=") }],
    -- Arithmetic
    [Left, { binopRule ("+"), binopRule ("-") }],
    [Left, { binopRule ("*"), binopRule ("/"), binopRule ("%") }]
    };

-- Primary expression
local primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                            lident  @ fun (x) {Var (x)}               |
                            inbr ("(", exp, ")")),
      exp     = memo $ eta (expr(binopList, primary)(id));

local stmtSingle = memo $ eta (
                         kRead  |> lift(inbr("(", lident, ")") @ fun (x) { Read (x) } )           |  
                         kWrite |> lift(exp @ fun (x) { Write (x) } )                             |
                         lident  |> fun (x) { s(":=") |> lift(exp @ fun (val) { Assn (x, val) }) } |
                         kSkip   @ lift (Skip)),                                                       
      stmt       = memo $ eta (listBy (stmtSingle, s (";")) @ fun (cmd) { 
                                        foldr (fun (acc, item) { Seq (item, acc) }, Skip, cmd) 
                                    });
                         
-- Public top-level parser
public parse = stmt;
             
