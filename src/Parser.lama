-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  l |> lift (p |> bypass (r))
}

-- Rule generator for the second rule of Ostap's expr()
fun binopRule (op) { 
  [s (op), fun (l, r) {Binop (op, l, r)}]
}

-- List of available binary operations with rules
-- for Ostap's expr()    
local binopList = 
    {
    [Left, singleton (binopRule ("!!"))],
    [Left, singleton (binopRule ("&&"))],
    [Nona, { binopRule ("=="), binopRule ("<="), binopRule ("<"), binopRule (">="), binopRule (">"),
             binopRule ("!=") }],
    [Left, { binopRule ("+"), binopRule ("-") }],
    [Left, { binopRule ("*"), binopRule ("/"), binopRule ("%") }]
    };

-- Primary expression
local primary = memo $ eta (  decimal @ fun (x) { Const (stringInt (x)) } 
                            | lident  @ fun (x) { Var (x) }              
                            | inbr (s("("), exp, s(")"))),
      exp     = memo $ eta (expr(binopList, primary)(id));

local elifStmt   = memo $ eta (
                           kElse |> lift (stmt |> fun (sElse) {
                             kFi @ lift (sElse) } )
                         | kFi   @ lift (Skip)
                         | kElif |> lift (exp |> fun (e) {
                             kThen |> lift (stmt |> fun (s) {
                               elifStmt @ fun (sElif) {
                                 If (e, s, sElif) } }) }) 
                   ),

      stmtSingle = memo $ eta (
                           kRead  |> lift(inbr(s("("), lident, s(")")) @ fun (x) { Read (x) })
                         | kWrite |> lift(exp @ fun (x) { Write (x) } )
                         | lident |> fun (x) { s(":=") |> lift(exp @ fun (val) { Assn (x, val) }) } 
                         | kSkip  @ lift (Skip)  
                         | kWhile |> lift (exp |> fun (e) {
                                  kDo |> lift (stmt |> fun (st) { 
                                    kOd @ lift (While (e, st)) }) })
                         | kRepeat |> lift (stmt |> fun (st) {
                                  kUntil |> lift (exp @ fun (e) { Repeat (st, e) }) })
                         | kFor |> lift (stmt |> fun (sInit) {
                                     s(",") |> lift (exp |> fun (eExit) {
                                       s(",") |> lift (stmt |> fun (sInc) {
                                         kDo |> lift (stmt |> fun (sBody) {
                                           kOd @ lift (Seq (sInit, While (eExit, Seq (sBody, sInc))))
                                    }) }) }) })
                         | kIf |> lift (exp |> fun(e) {
                             kThen |> lift (stmt |> fun(st) {
                               elifStmt @ fun (sElse) {
                                 If (e, st, sElse) } }) }) 
                    ),

     stmt       = memo $ eta (  stmtSingle
                              | stmtSingle |> fun (s1) { 
                                  s(";") |> lift (stmt @ fun (s2) { Seq (s1, s2) }) } 
                  );
                         
-- Public top-level parser
public parse = stmt;
