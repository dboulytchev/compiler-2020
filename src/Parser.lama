-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local elifStmt = memo $ eta(pos |> fun(loc) { 
    kElif |> lift(exp |> fun(cond) {
      kThen |> lift(exp |> fun(thenStmt) {
        elifStmt @ fun(elseStmt) { fun(a) { If(cond(Val), thenStmt(a), elseStmt(a)) } }
      })
    })
  | kElse |> lift(exp |> fun(elseStmt) {
      kFi @ lift(fun(a) { elseStmt(a) })
    })
  | kFi @ lift(fun(a) { assertVoid(a, Skip, pos) })
});

local primary  = memo $ eta (
    pos |> fun(loc) { decimal @ fun (x) { fun(a) { assertValue(a, Const(stringInt(x)), loc)} } } 
  | lident  @ fun (x) { fun(a) { case a of
        Ref -> Ref(x)
      | Val -> Var(x)
      | Void -> Ignore(Var(x))
    esac } }
  | pos |> fun(loc) { kSkip @ lift( fun(a) { assertVoid(a, Skip, loc) } ) } 
  | pos |> fun(loc) { kRead |> lift (inbr (s("("), lident, s(")")) @ fun(x) { fun(a) { assertVoid(a, Read(x), loc) } } ) }
  | pos |> fun(loc) { kWrite |> lift (inbr (s("("), exp, s(")")) @ fun (x) { fun (a) { assertVoid(a, Write(x(Val)),  loc) } } ) }
  | pos |> fun(loc) { kWhile |> lift (exp |> fun (cond) {
      kDo |> lift (exp |> fun (loopStmt) {
        kOd @ lift (fun(a) { assertVoid(a, While(cond(Val), loopStmt(Void)), loc) })
      })
    }) }
  | pos |> fun(loc) { kRepeat |> lift (exp |> fun (loopStmt) {
      kUntil |> lift (basic @ fun (cond) { fun(a) { assertVoid(a, Repeat(loopStmt(Void), cond(Val)), loc) } })
    }) }
  | pos |> fun(loc) { kFor |> lift (exp |> fun (init) {
      s(",") |> lift (exp |> fun (cond) {
        s(",") |> lift (exp |> fun (step) {
          kDo |> lift (exp |> fun (loopStmt) {
            kOd @ lift (fun(a) { 
              assertVoid(a, Seq(init(Void), While(cond(Val), Seq(loopStmt(Void), step(Void)))), loc) 
            })
          })
        })
      })
    }) }
  | pos |> fun(loc) { kIf |> lift(exp |> fun(cond) {
      kThen |> lift(exp |> fun(thenStmt) {
        elifStmt @ fun(elseStmt) {fun(a) { If(cond(Val), thenStmt(a), elseStmt(a)) }}
      })
    }) }
  | inbr (s ("("), exp, s (")"))),

      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)(id)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
