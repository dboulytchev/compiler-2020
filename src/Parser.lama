-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

fun opPair(op) {
  [s(op), fun(l, r) {Binop(op, l, r)}]
}

local operations = {
  [
    Left,
    singleton( opPair("!!") )
  ],
  [
    Left,
    singleton( opPair("&&") )
  ],
  [
    Left,
    {
      opPair("<"),
      opPair("<="),
      opPair(">"),
      opPair(">="),
      opPair("=="),
      opPair("!=")
    }
  ],
  [
    Left,
    {
      opPair("+"),
      opPair("-")
    }
  ],
  [
    Left,
    {
      opPair("*"),
      opPair("/"),
      opPair("%")
    }
  ]
};

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident                                          {fun (a) {
                                                                                         case a of
                                                                                           Ref  -> Ref (x)
                                                                                         | Void -> Ignore (Var (x))
                                                                                         | _    -> Var (x)
                                                                                         esac
                                                                                      }} |
                                    $(failure ("the rest of primary parsing in not implemented\n"))),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)(id)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
fun sInbr (l, p, r) {
  inbr (s (l), p, s (r))
}


-- Primary expression
local primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                            lident @ fun(x) {Var (x)} |
                            sInbr ("(", exp, ")"));


local exp = memo $ eta ( expr(operations, primary)(id) );

local elParse = memo $ eta (
    empty @ lift (Skip) 
  | ( s ("else") |> lift (parse)) @ fun(stmt) { stmt }
  | ( s ("elif") |> lift (exp)) |> fun(localCond) { 
      (s ("then") |> lift(parse)) |> fun(localStmt) {
        elParse @ fun(rest) { If(localCond, localStmt, rest) }
      }
    }
);

local stmt = memo $ eta ( 
    s("skip") @ lift(Skip) 
  | (s("read")  |> lift(sInbr("(", lident, ")"))) @ fun(z) {Read(z)}
  | (s("write") |> lift(primary)) @ fun(x) {Write(x)}
  | (lident  |> fun(var) {(s(":=") |> lift(exp)) @ fun(val) {Assn(var, val)}})
  | (s("while") |> lift(exp |> bypass( s ("do")))) |> fun(e) {
      (parse |> bypass (s ("od"))) @ fun(body) { While(e, body) } 
    }
  | (s("if") |> lift(exp)) |> fun(cond) { 
      (s ("then") |> lift (parse)) |> fun(fbody) {
        (elParse |> bypass( s ("fi"))) @ fun(rest) { If (cond, fbody, rest) }
      }
    }
  | (s("repeat") |> lift (parse)) |> fun(stmt) {
      (s("until") |> lift (exp)) @ fun(e) { Repeat(stmt, e) }
    }
  | (s("for") |> lift (parse)) |> fun(s1) {
      (s(",") |> lift (exp)) |> fun(cond) {
        (s(",") |> lift (parse)) |> fun(s2) {
          (s("do") |> lift (parse |> bypass (s ("od")))) @ fun(s3) {
            Seq(s1, While(cond, Seq(s3, s2)))
          }
        }
      }
    }
    -- ( parse |> bypass (s ("else"))) |> fun(firstBody) {
    --     ( parse |> bypass ( s ("fi"))) @ fun(secondBody) { If(cond, firstBody, secondBody) }
    --   }
    -- }
);

local inParse = memo $ eta (
    empty @ lift(None)
  | ( s(";") |> lift(stmt) ) |> fun(z) { inParse @ fun(rest) {
     case rest of 
       None -> Some(z)
     | Some(v) -> Some(Seq(z, v))
     esac
  }}
);

-- Public top-level parser
public parse = memo $ eta (
  stmt |> fun(first) { inParse @ fun(rest) {case rest of 
      None -> first
    | Some(v) -> Seq(first, v)
    esac
  }}
);
