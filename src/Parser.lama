-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  l |> lift (p |> bypass (r))
}

fun binop (op) { 
  [s (op), fun (l, r) { Binop (op, l, r) }]
}

local operators = {
  [Left, singleton (binop ("!!"))], 
  [Left, singleton (binop ("&&"))], 
  [Nona, { binop ("=="), binop ("!="), binop ("<="), binop ("<"), binop (">="), binop (">") }], 
  [Left, { binop ("+"), binop ("-") }], 
  [Left, { binop ("*"), binop ("/"), binop ("%") }]
};

-- Primary expression
local primary = memo $ eta (
    decimal @ fun (x) {Const (stringInt (x))}
  | lident  @ fun (x) {Var (x)}
  | inbr ("(", expression, ")")
);

local expression = memo $ eta (expr (operators, primary) (id));

local statement = memo $ eta (
    kSkip  @  lift (Skip) 
  | kRead  |> lift (primary @ fun (Var (x)) { Read (x) }) 
  | kWrite |> lift (expression @ fun (x) { Write (x) }) 
  | lident |> fun (x) { s(":=") |> lift (expression @ fun (e) { Assn (x, e) }) }
);

-- Public top-level parser
public parse = memo $ eta (
    statement |> fun (s1) { s (";") |> lift (parse @ fun (s2) { Seq (s1, s2) }) }
  | statement
);
             
