-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local else_if = memo $ eta syntax (
                                  kFi { fun (a) { Skip } }
                                | kElse ex=exp kFi  { fun (a) { ex (a) } }
                                | kElif ex=exp kThen state_1=exp state_2=else_if { fun (a) { If (ex (Val), state_1 (a), state_2 (a)) }}
);

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident                                          {fun (a) {
                                                                                         case a of
                                                                                           Ref  -> Ref (x)
                                                                                         | Void -> Ignore (Var (x))
                                                                                         | _    -> Var (x)
                                                                                         esac
                                                                                      }} |
                                    loc=pos kRead val=inbr[s("("), lident, s(")")]{ 

                                      fun (a) {
                                       
                                        assertVoid (a, Read (val), loc) 
                                        
                                        } 
                                    } |

                                    loc=pos kWrite s["("] ex=exp s[")"]{

                                      fun (a) {
                                       
                                        assertVoid (a, Write (ex (Val)), loc)
                                        
                                        } 
                                    } | 
                                                  
                                    loc=pos kSkip { 
                                      
                                      fun (a) { 
                                        
                                        assertVoid (a, Skip, loc) 

                                        } 
                                    } |

                                    loc=pos kRepeat state=exp kUntil ex=basic              { 
                                      
                                      fun (a) { 
                                        
                                        assertVoid (a, Repeat ( state (Void), ex (Val)), loc) 
                                        
                                        } 
                                    } |

                                    loc=pos kIf ex=exp kThen state_1=exp state_2=else_if  { 
                                      
                                      fun (a) { 
                                        
                                        If (ex (Val), state_1 (a), state_2 (a)) 
                                      
                                       } 
                                    } |
                                    
                                    loc=pos kWhile ex=exp n_state=inbr[s("do"), exp, s("od")] { 
                                      
                                      fun (a) { 
                                        
                                        assertVoid (a, While (ex (Val), n_state (Void)), loc)

                                        } 
                                    } |

                                    loc=pos kFor state_1=exp s[","] ex=basic s[","] state_2=exp s["do"] state_3=exp s["od"] { 
                                      
                                      fun (a) { 
                                        
                                        Seq (state_1 (Void), While (ex (Val), Seq (state_3 (a), state_2 (a)))) 
                                        
                                        } 
                                    } |

                                    inbr[s("("), exp, s(")")]
                                    
                                     ),


      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)(id)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
