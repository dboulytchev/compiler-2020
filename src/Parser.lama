-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  s (l) |> lift (p |> bypass (s (r)))
}

fun binOp (op) {
    [s(op), fun(l, r) { Binop(op, l, r) }]
}

local operations = {
    [Left, singleton(binOp ("!!"))],
    [Left, singleton(binOp ("&&"))],
    [Nona, {binOp("<"), binOp(">"), binOp("<="), binOp(">="), binOp("=="), binOp("!=")}],
    [Left, {binOp("+"), binOp("-")}],
    [Left, {binOp("*"), binOp("%"), binOp("/")}]
};

-- Primary expression
local primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                            lident  @ fun (x) {Var (x)} |
                            inbr ("(", exp, ")"));

local exp = memo $ eta (expr (operations, primary)(id));

local substmt = memo $ eta (kSkip @ lift (Skip)
                         | kRead |> lift (primary @ fun (Var (x)) { Read (x) })
                         | kWrite |> lift (exp @ fun (x) { Write (x) })
                         | lident |> fun (x) { s(":=") |> lift (exp @ fun (e) {Assn (x, e) }) });

local stmt = memo $ eta (substmt | substmt |> fun (s1) {
                           s(";") |> lift (stmt @ fun (s2) { Seq (s1, s2) })
                         });
   

-- Public top-level parser
public parse = stmt;
             
