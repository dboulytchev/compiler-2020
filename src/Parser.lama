-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

local primary = memo $ eta ( pos |> fun(loc) { 
                                 decimal @ fun(strValue) {
                                     fun(c) {
                                         assertValue(c, Const(stringInt(strValue)), loc)
                                     }
                                 }
                             } |

                             lident |> fun(name) {
                                 opt(inbr(
                                         s("("),
                                         list0(exp @ fun(e) {
                                             e(Val)
                                         }),
                                         s(")")
                                     )
                                 ) @ fun(args) { 
                                     fun(c) {
                                         case args of
                                             None -> case c of
                                                 Ref  -> Ref(name)
                                               | Void -> Ignore(Var(name))
                                               | _    -> Var(name)
                                             esac
                                           | Some(args) -> assertValue(c, Call(name, args))
                                         esac
                                     } 
                                 }
                             } |

                             pos |> fun(loc) {
                                 kSkip @ lift(fun(c) {
                                     assertVoid(c, Skip, loc)
                                 })
                             } |

                             pos |> fun(loc) {
                                 kRead |> lift (inbr(s("("), lident, s(")")) @ fun(name) {
                                     fun(c) {
                                         assertVoid(c, Read(name), loc)
                                     }
                                 })
                             } |

                             pos |> fun(loc) {
                                 kWrite |> lift (inbr (s("("), exp, s(")")) @ fun(expr) {
                                     fun(c) {
                                         assertVoid(c, Write (expr(Val)),  loc)
                                     }
                                 })
                             } |

                             pos |> fun(loc) {
                                 kWhile |> lift (exp |> fun(cond) {
                                     kDo |> lift (scopeExpr |> fun(body) {
                                         kOd @ lift (fun(c) {
                                             assertVoid(c, While(cond(Val), body(Void)), loc)
                                         })
                                     })
                                 })
                             } |

                             pos |> fun(loc) {
                                 kRepeat |> lift (scopeExpr |> fun(body) {
                                     kUntil |> lift (basic @ fun(cond) {
                                         fun(c) { 
                                             assertVoid(
                                                 c,
                                                 distributeScope(body(Void), fun(s) {
                                                     Repeat(s, cond(Val))
                                                 }),
                                                 loc
                                             )
                                         }
                                     })
                                 })
                             } |

                             pos |> fun(loc) {
                                 kFor |> lift (scopeExpr |> fun(init) {
                                     s(",") |> lift (exp |> fun(cond) {
                                         s(",") |> lift (exp |> fun(update) {
                                             kDo |> lift (scopeExpr |> fun(body) {
                                                 kOd @ lift (fun(c) { 
                                                     assertVoid(
                                                         c,
                                                         distributeScope(init(Void), fun(c) {
                                                             Seq(c, While(cond(Val), Seq(body(Void), update(Void))))
                                                         }), 
                                                         loc
                                                      )
                                                 })
                                             })
                                         })
                                     })
                                 })
                             } |

                             pos |> fun(loc) {
                                 kIf |> lift (exp |> fun(cond) {
                                     kThen |> lift (scopeExpr |> fun(onTrue) {
                                         kElse |> lift (scopeExpr |> fun(onFalse) {
                                             kFi @ lift (fun(c) {
                                                 If(cond(Val), onTrue(c), onFalse(c))
                                             })
                                         }) | 
                                         kFi @ lift (fun(c) {
                                             If(cond(Val), onTrue(c), assertVoid(c, Skip, loc))
                                         }) | 
                                         stElif @ fun(onNext) {
                                             fun(c) {
                                                 If(cond(Val), onTrue(c), onNext(c))
                                             }
                                         }
                                     })
                                 })
                             } |

                             inbr (s ("("), exp, s(")")) |

                             inbr (s ("{"), scopeExpr, s("}"))
                          ),

      stElif = memo $ eta (pos |> fun(loc) {
          kElif |> lift (exp |> fun (cond) {
              kThen |> lift (scopeExpr |> fun(onTrue) {
                  kElse |> lift (scopeExpr |> fun(onFalse) {
                      kFi @ lift (fun(c) {
                          If (cond(Val), onTrue(c), onFalse(c))
                      })
                  }) | 
                  kFi @ lift (fun(c) {
                      If(cond(Val), onTrue(c), assertVoid(c, Skip, loc))
                  }) | 
                  stElif @ fun (onNext) {
                      fun(c) {
                          If(cond(Val), onTrue(c), onNext(c))
                      }
                  }
              })
          })
      }),             

      scopeExpr  = memo $ eta (rep0(definition) |> fun(defs) {
          opt(exp) @ fun(expr) {
              fun(c) {
                  fun(e) {
                      case defs of
                          {} -> e
                        | _ -> expandScope(defs, e) 
                      esac
                  } (case expr of
                        Some(v) -> v(c)
                      | _       -> Skip
                  esac)
              }
          }
      }),

      definition = memo $ eta (
          kLocal |> lift (list 
              (lident |> fun(name) {
                  opt(s("=") |> lift(basic @ fun(c) {
                      c(Val)
                  })) @ 
                  fun(value) {
                      [name, value]
                  }
              }) |> fun (defs) {
                  s(";") @ lift (Local(defs))
              }) |
          kFun |> lift ( lident |> fun(fn) {
              inbr(s("("), list0(lident), s(")")) |> fun(args) {
                  inbr(s("{"), scopeExpr, s("}")) @ fun(c) {
                      Fun(fn, args, c(Weak))
                  }
              }
          }) 
      ),

      basic      = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                          fun (l, loc, r) {
                                                            fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                          }])],
                                      [Left , map (binop, singleton ("!!"))],
                                      [Left , map (binop, singleton ("&&"))],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     primary)(id)),
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
