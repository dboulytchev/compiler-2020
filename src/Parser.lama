-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  s (l) |> lift (p |> bypass (s (r)))
}

fun binop (op) { 
  [s (op), fun (l, r) { Binop (op, l, r) }]
}

local operators = {
  [Left, singleton (binop ("!!"))], 
  [Left, singleton (binop ("&&"))], 
  [Nona, { binop ("=="), binop ("!="), binop ("<="), 
           binop ("<") , binop (">="), binop (">") }], 
  [Left, { binop ("+"), binop ("-") }], 
  [Left, { binop ("*"), binop ("/"), binop ("%") }]
};

-- Primary expression
local primary = memo $ eta (
                      decimal @ fun (x) {Const (stringInt (x))}
                    | lident  @ fun (x) {Var (x)}
                    | inbr ("(", expression, ")") );

local expression = memo $ eta (expr (operators, primary)(id));

local stElif = memo $ eta ( kElif |> lift (expression |> fun (expr) {
                              kThen |> lift (stmt |> fun (stmt1) {
                                kElse |> lift (stmt |> fun (stmt2) {
                                  kFi @ lift (If (expr, stmt1, stmt2))
                                })
                                | kFi @ lift (If (expr, stmt1, Skip))
                                | stElif @ fun (stmt2) {If (expr, stmt1, stmt2)}
                              })
                            })
                          );

local substmt = memo $ eta (kSkip @ lift (Skip)
                       | kRead |> lift (primary @ fun (Var (x)) { Read (x) })
                       | kWrite |> lift (expression @ fun (x) { Write (x) })
                       | lident |> fun (x) { s(":=") |> lift (expression @ fun (expr) {Assn (x, expr) }) }
                       | kIf |> lift (expression |> fun(expr) {
                           kThen |> lift (stmt |> fun (stmt1) {
                             kElse |> lift ( stmt |> fun (stmt2) {
                               kFi @ lift (If (expr, stmt1, stmt2))
                             })
                             | kFi @ lift (If (expr, stmt1, Skip))
                             | stElif @ fun (stmt2) {If (expr, stmt1, stmt2)}
                           })
                         })
                       | kWhile |> lift (expression |> fun (expr) {
                           kDo |> lift (stmt |> fun (state) {
                             kOd @ lift (While (expr, state))
                           })
                         })
                       | kRepeat |> lift (stmt |> fun (state) {
                           kUntil |> lift (expression @ fun (expr) {Repeat (state, expr)})
                         })
                       | kFor |> lift (stmt |> fun (stmt1) {
                           s(",") |> lift (expression |> fun (expr) {
                             s(",") |> lift (stmt |> fun (stmt2) {
                               kDo |> lift (stmt |> fun (stmt3) {
                                 kOd @ lift (Seq (stmt1, While (expr, Seq (stmt3, stmt2))))
                               })
                             })
                           })
                         })
                       );

local stmt = memo $ eta (substmt | substmt |> fun (s1) {
                           s(";") |> lift (stmt @ fun (s2) { Seq (s1, s2) })
                         }); 

-- Public top-level parser
public parse = stmt;   
