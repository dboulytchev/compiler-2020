-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  l |> lift (p |> bypass (r))
}

fun binop (op) { 
  [s (op), fun (l, r) { Binop (op, l, r) }]
}

local operators = {
  [Left, singleton (binop ("!!"))], 
  [Left, singleton (binop ("&&"))], 
  [Nona, { binop ("=="), binop ("!="), binop ("<="), binop ("<"), binop (">="), binop (">") }], 
  [Left, { binop ("+"), binop ("-") }], 
  [Left, { binop ("*"), binop ("/"), binop ("%") }]
};

-- Primary expression
local primary = memo $ eta (
    decimal @ fun (x) {Const (stringInt (x))}
  | lident  @ fun (x) {Var (x)}
  | inbr(s("("), expression, s(")"))
);

local expression = memo $ eta (expr (operators, primary) (id));

local statement = memo $ eta (
    kSkip  @  lift (Skip)
  | kRead  |> lift (primary @ fun (Var (x)) { Read (x) })
  | kWrite |> lift (expression @ fun (x) { Write (x) })
  | lident |> fun (x) { s(":=") |> lift (expression @ fun (e) { Assn (x, e) }) }
  | kWhile |> lift (expression |> fun (e) {
      inbr(kDo, parse, kOd) @ fun (s) {
        While (e, s)
      }
    })
  | kRepeat |> lift (parse |> fun (s) {
      kUntil |> lift (expression @ fun (e) { Repeat (s, e) })
    })
  | kFor |> lift (statement |> fun (init) {
      s (",") |> lift (expression |> fun (condition) {
        s (",") |> lift (statement |> fun (step) {
          inbr(kDo, parse, kOd) @ fun (s) {
            Seq (init, While (condition, Seq (s, step)))
          }
        }) 
      }) 
    })
  | kIf |> lift (expression |> fun(e) {
      kThen |> lift (parse |> fun (s1) {
        elsePart @ fun (s2) {
          If (e, s1, s2) 
        } 
      }) 
    }) 
);

local elsePart = memo $ eta (
    kFi @ lift (Skip)
  | kElse |> lift (parse |> bypass(kFi))
  | kElif |> lift (expression |> fun (e) {
      kThen |> lift (parse |> fun (s1) {
        elsePart @ fun (s2) {
          If (e, s1, s2) 
        } 
      }) 
    })
);

-- Public top-level parser
public parse = memo $ eta (
    statement |> fun (s1) { s (";") |> lift (parse @ fun (s2) { Seq (s1, s2) }) }
  | statement
);
             
