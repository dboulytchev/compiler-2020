-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}
 
local primary = memo $ eta ( 
                            pos    |> fun(loc) { decimal @ fun (x) { fun(val) { assertValue(val, Const (stringInt (x)), loc) } } }
                          | pos    |> fun(loc) { strlit  @ fun (x) { fun(val) { assertValue(val, String (x), loc) } } } 
                          | pos    |> fun(loc) { chrlit  @ fun (x) { fun(val) { assertValue(val, Const  (x), loc) } } } 
                          | pos    |> fun(loc) { inbr(s("["),     list0 (exp @ fun(expr) { expr(Val) } ), s("]")) @ fun (x) { fun(val) { assertValue(val, Array (x), loc) } } } 
                          | lident |> fun(x)   { opt(inbr(s("("), list0 (exp @ fun(expr) { expr(Val) } ), s(")"))) @ fun(args) { 
                                      fun(val) { case args of
                                                      None -> case val of
                                                                   Ref  -> Ref (x)
                                                                 | Void -> Ignore (Var (x))
                                                                 | _    -> Var (x)
                                                              esac
                                                    | Some (args) -> assertValue (val, Call (x, args))
                                                 esac
                                               } } } 
                          | pos    |> fun(loc) { kSkip   @  lift (fun(val) { assertVoid(val, Skip, loc) } ) } 
                          | pos    |> fun(loc) { kWhile  |> lift (exp       |> fun (exp) {
                                                 kDo     |> lift (sc_expr   |> fun (stat) {
                                                 kOd     @  lift (fun(val)  {  assertVoid(val, While (exp(Val), stat(Void)), loc) })
                                               })
                                               }) 
                                               } 
                          | pos    |> fun(loc) { kRepeat |> lift (sc_expr   |> fun (stat) {
                                                 kUntil  |> lift (basic @ fun (expr) { fun(val) { 
                                                            assertVoid(val, distributeScope(stat(Void), fun(stat) { Repeat (stat, expr(Val)) }), loc) } })
                                               }) 
                                               } 
                          | pos    |> fun(loc) { kFor    |> lift (sc_expr   |> fun (stat1)  {
                                                 s(",")  |> lift (exp       |> fun (expr)   {
                                                 s(",")  |> lift (exp       |> fun (stat2)  {
                                                 kDo     |> lift (sc_expr   |> fun (stat3)  {
                                                 kOd     @  lift (fun (val) { 
                                                            assertVoid(val, distributeScope (
                                                            stat1(Void), fun(stat1) {Seq (stat1, While (expr(Val), Seq(stat3(Void), stat2(Void))))}), loc 
                                               )})
                                               })
                                               })
                                               })
                                               }) 
                                               }                               
                          | pos    |> fun(loc) { kIf     |> lift (exp       |> fun (expr)  {
                                                 kThen   |> lift (sc_expr   |> fun (stat1) {
                                                 kElse   |> lift (sc_expr   |> fun (stat2) {
                                                 kFi     @  lift (fun(val)  { If (expr(Val), stat1(val), stat2(val)) })
                                               }) 
                                               | kFi     @  lift (fun(val)  { If (expr(Val), stat1(val), assertVoid(val, Skip, loc)) })  
                                               | elif_st @  fun  (stat2)    {fun(val) { If (expr(Val), stat1(val), stat2(val)) }}
                                               })
                                               }) 
                                               } 
                          | inbr  (s ("("), exp,     s (")")) 
                          | inbr  (s ("{"), sc_expr, s ("}"))
                          ),     
      elif_st = memo $ eta (
                            pos    |> fun(loc) { kElif   |> lift (exp       |> fun (expr)  {
                                                 kThen   |> lift (sc_expr   |> fun (stat1) {
                                                 kElse   |> lift (sc_expr   |> fun (stat2) {
                                                 kFi     @  lift (fun(val)  { If (expr(Val), stat1(val), stat2(val)) })
                                               }) 
                                               | kFi     @  lift (fun(val)  { If (expr(Val), stat1(val), assertVoid(val, Skip, loc)) })  
                                               | elif_st @  fun  (stat2)    {fun(val) { If (expr(Val), stat1(val), stat2(val)) }}
                                               })
                                               }) 
                                               }
                           ), 
      sc_expr = memo $ eta syntax (d=def* e=exp? {fun (val) {fun (e) {
                                                                        case d of
                                                                          {} -> e
                                                                        | _  -> expandScope (d, e) 
                                                                        esac
                                                                      } (case e of 
                                                                           Some (e) -> e (val)
                                                                         | _        -> Skip
                                                                         esac)
                                                                      }}),
      def     = memo $ eta syntax (kLocal ds=list[syntax (lident (s["="] e=basic {e (Val)})?)] s[";"] {Local (ds)} 
                                 | kFun name=lident args=inbr[s("("), list0 (lident), s(")")] body=inbr[s("{"), sc_expr, s("}")] 
                                   {Fun (name, args, body (Weak))}
                                   ),                 
      basic   = memo $ eta (expr   ({[Right, singleton ([s (":="),
                                                        fun (left, loc, right) {
                                                        fun (val) {assertValue (val, Assn (left (Ref), right (Val)), loc)}
                                                        }])],
                                     [Left , map (binop, singleton ("!!"))],
                                     [Left , map (binop, singleton ("&&"))],
                                     [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                     [Left , map (binop, {"+", "-"})],
                                     [Left , map (binop, {"*", "/", "%"})]
                                   },
                                      postfix)(id)),
      postfix = memo $ eta syntax (loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] {Index (i (Val))} |
                                                            -s["."] kLength {Length}
                                                           )* {fun (val) {foldl (fun (e, p) { case p of                                                                                   
                                                                                                   Length    -> fun (val) {assertValue (val, Builtin ("length", singleton (e (Val))), loc)}
                                                                                                 | Index (i) -> fun (val) {case val of
                                                                                                                                Ref -> ElemRef (e (Val), i)
                                                                                                                              | _   -> assertValue (val, Elem (e (Val), i), loc)
                                                                                                                           esac
                                                                                                                          }
                                                                                              esac                                                                            
                                                                                            }, e, ps) (val)
                                                                         }  
                                                              }
                                  ),                                 
      exp     = memo $ eta syntax (basic | stat1=basic s[";"] stat2=exp {fun (val) {Seq (stat1 (Void), stat2 (val))}});

-- Public top-level parser
public parse = syntax (s=sc_expr {s (Void)});