-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }


  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

local elsePart = memo $ eta syntax (
                                  kFi { fun (a) { Skip }}
                                | kElse e=exp kFi  { fun (a) { e (a) }}
                                | kElif cond=exp kThen body=exp next=elsePart { fun (a) { If (cond (Val), body (a), next (a)) }}
);


local primary  = memo $ eta syntax (
                                    -- decimal constant
                                      loc=pos x=decimal  {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}
                                      -- identifier
                                    | x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {fun (a) {
                                                                                                            case args of
                                                                                                              None -> case a of
                                                                                                                        Ref  -> Ref (x)
                                                                                                                      | Void -> Ignore (Var (x))
                                                                                                                      | _    -> Var (x)
                                                                                                                      esac
                                                                                                            | Some (args) -> assertValue (a, Call (x, args))
                                                                                                            esac
                                                                                                         }}
                                    -- skip
                                    | loc=pos kSkip {fun (a) {assertVoid (a, Skip, loc) }}
                                    -- read (var)
                                    | loc=pos kRead var=inbr[s("("), lident, s(")")]   { fun (a) { assertVoid (a, Read (var), loc) }}
                                    -- write (expr)
                                    | loc=pos kWrite s["("]  e=exp s[")"] { fun (a) { assertVoid (a, Write (e (Val)), loc) }}
                                    -- while expr do expr od
                                    | loc=pos kWhile cond=exp body=inbr[s("do"), scopeExpr, s("od")] { fun (a) { assertVoid (a, While (cond (Val), body (Void)), loc) }}
                                    -- if e then s1 else s2
                                    | loc=pos kIf cond=exp kThen body=exp sNext=elsePart { fun (a) { If (cond (Val), body (a), sNext (a)) }}
                                    -- repeat e until e
                                    | loc=pos kRepeat body=scopeExpr kUntil cond=basic { fun (a) { assertVoid (a, distributeScope (body (Void), fun (body) { Repeat ( body, cond (Val)) }), loc)}}
                                    -- for 
                                    | loc=pos kFor s1=scopeExpr s[","] cond=basic s[","] s2=exp s["do"] s3=scopeExpr s["od"] { fun (a) { distributeScope(s1 (Void), fun (s1) { Seq (s1, While (cond (Val), Seq (s3 (a), s2 (a)))) })}}
                                    -- { scopeExpr }
                                    | inbr[s("{"), scopeExpr, s("}")]
                                    -- (expr)
                                    | inbr[s("("), exp, s(")")]
                                    ),
      definition = memo $ eta syntax (
                                      loc=pos kLocal vars=list[syntax(lident (s["="] e=basic { e(Val) } )? )] s[";"] { Local (vars) }
                                    | loc=pos kFun nm=lident args=inbr[s("("), list0(syntax(lident)), s(")")] body=inbr[s("{"), scopeExpr, s("}")] { Fun (nm, args, body (Weak))}
                                    ),
      scopeExpr  = memo $ eta syntax (
                                      df=definition*  e=exp { fun (a) { case df of 
                                                                         {} -> e (a) 
                                                                        | _ -> expandScope (df, e (a))
                                                                        esac
                                                                      }}
                                    ),
      basic      = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                          fun (l, loc, r) {
                                                            fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                          }])],
                                      [Left , map (binop, singleton ("!!"))],
                                      [Left , map (binop, singleton ("&&"))],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     primary)(id)),
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});


-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
