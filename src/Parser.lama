-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident                                          {fun (a) {
                                                                                         case a of
                                                                                           Ref  -> Ref (x)
                                                                                         | Void -> Ignore (Var (x))
                                                                                         | _    -> Var (x)
                                                                                         esac
                                                                                      }} |
                                    loc=pos   kRead s["("] x=lident s[")"]  {fun (a) {assertVoid (a, Read (x), loc)}} |
                                    loc=pos   kWrite s["("] e=exp s[")"]  {fun (a) {assertVoid (a, Write (e(Val)), loc)}} |
                                    loc=pos kSkip  {fun (a) {assertVoid (a, Skip, loc)}} |
                                    loc=pos kWhile c=exp kDo s=exp kOd {fun (a) {assertVoid (a, While (c (Val), s (Void)), loc)}} |
                                    loc=pos kFor i=exp s[","] c=exp s[","] step=exp kDo s=exp kOd {
                                      fun (a) {assertVoid (a, Seq (i (Void), While (c (Val), Seq ( s (Void), step (Void)))), loc)}
                                    } |
                                    loc=pos kRepeat s=exp kUntil c=primary {fun (a) {assertVoid (a, Repeat (s (Void), c (Val)), loc)}} |
                                    loc=pos kIf c=exp kThen s=exp subif=subIf {fun (a) {If (c (Val), s (a), subif (a))}} |
                                    inbr[s("("), exp, s(")")]),
      subIf    = memo $ eta syntax ( 
                                    kElif c=exp kThen s=exp sub=subIf {fun (a) {If (c (Val), s (a), sub (a))}} |
                                    kElse s=exp kFi {fun (a) {s (a)}} |
                                    kFi {fun (a) {Skip}}
                                    ),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)(id)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
