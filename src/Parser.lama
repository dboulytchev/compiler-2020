-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local elseClause = memo $ eta syntax (
                                  kFi { fun (ctx) { Skip }}
                                | kElse onFalse = exp kFi  { 
                                   fun (ctx) { onFalse(ctx) }
                                }
                                | kElif cond=exp 
                                  kThen onTrue = exp 
                                        onFalse = elseClause { fun (ctx) { If (cond(Val), onTrue(ctx), onFalse(ctx)) }}
);


local primary  = memo $ eta syntax (
                                    -- decimal constant
                                      loc=pos x=decimal  {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}

                                    | x=lident           { fun (ctx) { case ctx of   
                                                             Ref  -> Ref (x) 
                                                             | Void -> Ignore (Var (x)) 
                                                             | _    -> Var (x) esac
                                                           }
                                                         }

                                    | loc=pos kSkip {fun (x) {assertVoid (x, Skip, loc) }}

                                    | loc=pos kRead name = inbr[s("("), lident, s(")")]   { fun (x) { assertVoid (x, Read (name), loc) }}

                                    | loc=pos kWrite s["("] value=exp s[")"] { fun (x) { assertVoid (x, Write (value (Val)), loc) }}

                                    | loc=pos kWhile cond = exp
                                                     body = inbr[s("do"), exp, s("od")] { 
                                                         fun (x) {
                                                             assertVoid(x, While(cond(Val), body(Void)), loc) 
                                                         }
                                                     }

                                    | loc=pos kIf   cond = exp 
                                              kThen onTrue = exp
                                                    onFalse = elseClause { 
                                                        fun (x) { 
                                                            If (cond(Val), onTrue(x), onFalse(x))
                                                        }
                                                    }

                                    | loc=pos kRepeat body = exp 
                                              kUntil  cond = basic { 
                                                fun(x) {
                                                    assertVoid(x, Repeat(body(Void), cond(Val)), loc)
                                                }
                                              }

                                    | loc=pos kFor init = exp s[","] 
                                                   cond = basic s[","] 
                                                   update = exp s["do"] 
                                                   body = exp s["od"] { 
                                                       fun(x) { Seq(init(Void), 
                                                                    While(cond(Val),
                                                                          Seq(body(x), 
                                                                              update(x)
                                                                             )
                                                                         )
                                                                )
                                                              }
                                                   }
                                    | inbr[s("("), exp, s(")")]
                                    ),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)(id)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
