-- Parser

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  l |> lift (p |> bypass (r))
}

fun bin (o) {
  [s(o), fun(l, r) { Binop (o, l, r) }]
}

local ops = { [Left, singleton (bin ("!!"))],
              [Left, singleton (bin ("&&"))],
              [Nona, { bin ("<"),
                       bin (">"),
                       bin ("<="),
                       bin (">="),
                       bin ("=="),
                       bin ("!=") }],
              [Left, { bin ("+"),
                       bin ("-")}],
              [Left, { bin ("*"),
                       bin ("/"),
                       bin ("%")}]};

-- Primary expression
local primary = memo $ eta (decimal @ fun (x) { Const (stringInt (x)) } |
                            lident  @ fun (x) {Var (x)} |
                            inbr (s ("("), exp, s (")"))),
      exp = memo $ eta (expr(ops, primary)(id));

local elif_st = memo $ eta (kElif   |> lift(exp  |> fun(condition){
                            kThen   |> lift(stmt |> fun(then_stmt){
                            elif_st @ fun(else_stmt) { If(condition, then_stmt, else_stmt)}})}) |

                            kElse   |> lift(stmt |> fun(else_stmt){
                            kFi     @ lift(else_stmt)}) |

                            kFi     @ lift(Skip)
);

local st = memo $ eta (kSkip @ lift (Skip) |
                       kRead   |> lift (primary @ fun (Var (x)) { Read (x) }) |

                       kWrite  |> lift (exp @ fun (x) { Write (x) }) |

                       lident  |> fun (x) { s(":=") |> lift (exp @ fun (e) { Assn (x, e) }) } |

                       kIf     |> lift(exp |> fun(condition) {
                       kThen   |> lift(stmt |> fun(then_stmt) {
                       elif_st @ fun(else_stmt) { If(condition, then_stmt, else_stmt)}})}) |

                       kWhile  |> lift(exp |> fun(condition) {
                       kDo     |> lift(stmt |> fun(loop_stmt)  {
                       kOd     @  lift(While(condition, loop_stmt))})}) |

                       kRepeat |> lift(stmt |> fun(loop_stmt)  {
                       kUntil  |> lift(exp @  fun(condition) {
                       Repeat(loop_stmt, condition)})}) |

                       kFor    |> lift(stmt |> fun(first_condition) {
                       s(",")  |> lift(exp  |> fun(second_condition){
                       s(",")  |> lift(stmt |> fun(third_condition) {
                       kDo     |> lift(stmt |> fun(loop_stmt)  {
                       kOd     @  lift(Seq(first_condition, While(second_condition, Seq(loop_stmt, third_condition))))})})})}));

local stmt = memo $ eta (st |
                         st |> fun (s1) { s(";") |> lift (stmt @ fun (s2) { Seq (s1, s2) }) });


-- Public top-level parser
public parse = stmt;