-- Expression evaluator

import List;
import State;

-- Binary expression evaluator : takes operator and operands
-- returns integer value
public fun evalBinop (op, l, r) {
  case op of 
    "+"   -> l + r
  | "-"   -> l - r
  | "*"   -> l * r
  | "/"   -> l / r
  | "%"   -> l % r
  | "=="  -> l == r
  | "!="  -> l != r
  | "<"   -> l < r
  | "<="  -> l <= r
  | ">"   -> l > r
  | ">="  -> l >= r
  | "&&"  -> l && r
  | "!!"  -> l !! r
  esac
}

-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (state, expr) {
  case expr of 
    Binop (op, l, r) -> evalBinop (op, evalExpr (state, l), evalExpr (state, r))
  | Const (x)        -> x 
  | Var (x)          -> x.state
  | _                -> failure ("No implementation for this expression")
  esac
}
