-- Expression evaluator

import List;
import State;

public fun evalBinop (op, val_l, val_r) {
    case op of
        "+" -> val_l + val_r
    |   "-" -> val_l - val_r
    |   "*" -> val_l * val_r
    |   "/" -> val_l / val_r
    |   "%" -> val_l % val_r
    |   "==" -> val_l == val_r
    |   "!=" -> val_l != val_r
    |   "<" -> val_l < val_r
    |   "<=" -> val_l <= val_r
    |   ">" -> val_l > val_r
    |   ">=" -> val_l >= val_r
    |   "&&" -> val_l && val_r
    |   "!!" -> val_l !! val_r
    esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
    case expr of
        Const (x) -> x
    |   Var (x) -> st(x)
    |   Binop(op, expr_l, expr_r) -> evalBinop(op, evalExpr(st, expr_l), evalExpr(st, expr_r))
    esac
}
