-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (st, expr) {
  case expr of
    Const (x) -> x
  | Var (x) -> st(x)
  | Binop ("+", l, r) -> evalExpr(st, l) + evalExpr(st, r)
  | Binop ("-", l, r) -> evalExpr(st, l) - evalExpr(st, r)
  | Binop ("*", l, r) -> evalExpr(st, l) * evalExpr(st, r)
  | Binop ("/", l, r) -> evalExpr(st, l) / evalExpr(st, r)
  | Binop ("%", l, r) -> evalExpr(st, l) % evalExpr(st, r)
  | Binop ("==", l, r) -> evalExpr(st, l) == evalExpr(st, r)
  | Binop ("!=", l, r) -> evalExpr(st, l) != evalExpr(st, r)
  | Binop ("<", l, r) -> evalExpr(st, l) < evalExpr(st, r)
  | Binop ("<=", l, r) -> evalExpr(st, l) <= evalExpr(st, r)
  | Binop (">", l, r) -> evalExpr(st, l) > evalExpr(st, r)
  | Binop (">=", l, r) -> evalExpr(st, l) >= evalExpr(st, r)
  | Binop ("&&", l, r) -> evalExpr(st, l) && evalExpr(st, r)
  | Binop ("!!", l, r) -> evalExpr(st, l) !! evalExpr(st, r)
  esac
}
