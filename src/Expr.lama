-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalScope (s, ds) {
  foldl (fun (s, d) {
                      case d of
                        Local (xs) -> s.addNames (xs)
                      | Fun (f, a, e) -> s.addFunction (f, a, e)  
                      esac
                    }, s, ds)
}

fun evalVal (st, ns, vs) {
  foldl (fun (s, [n, v]) { s.addName (n, Val (v)) }, st, zip (ns, vs))
}

fun eval (config@[state, world], expr) {

  case expr of

    Const (value) ->                      [config, value]

  | Var (value) ->                        [config, 
  
                                          case lookup (state, value) of

                                          Val (nv) -> nv

                                          esac]

  | Ref (value) ->                       [config, Ref (value)]

  | Binop (oper, left, right) ->
                                          case evalList (config, { left, right }) of

                                          [n_c, { n_left, n_right }] ->

                                          [n_c, evalOp (oper, n_left, n_right)]

                                          esac


  | Assn (left, right) ->                 case evalList (config, { left, right }) of

                                          [[n_state, n_world], { Ref (n_left), n_right }] ->

                                          [[n_state <- [n_left, Val (n_right)], n_world], n_right]

                                          | [n_c, { ElemRef (a, i), v }] -> 

                                          a[i] := v; [n_c, v]

                                          esac

  | Skip ->                               [config, BOTTOM]

  | Seq (state_1, state_2) ->
                                          case eval (config, state_1) of

                                            [n_c, _] -> eval (n_c, state_2)

                                          esac

  | Ignore (state) ->
                                          case eval (config, state) of

                                            [n_c, _] -> [n_c, BOTTOM]

                                          esac

  | If (exp, state_1, state_2) ->
                                          case eval (config, exp) of

                                            [n_c, 0] -> eval (n_c, state_2)
                                          | [n_c, _] -> eval (n_c, state_1)

                                          esac
  | While (exp, n_state) ->
                                          case eval (config, exp) of

                                            [n_c, 0] -> [n_c, BOTTOM]
                                          | [n_c1, _] ->

                                          case eval (n_c1, n_state) of
                                          
                                            [n_c2, _] -> eval (n_c2, expr)

                                          esac
                                          esac
  | Repeat (n_state, exp) ->
                                          case eval (config, n_state) of

                                            [n_c1, _] ->

                                          case eval (n_c1, exp) of

                                            [n_c2, 0] -> eval (n_c2, expr)
                                          | [n_c2, _] -> [n_c2, BOTTOM]

                                          esac
                                          esac

  | Scope (def, exp) ->                   case eval ([evalScope (enterScope (state), def), world], exp) of

                                          [[n_state, n_world], value] ->
                                          [[leaveScope (n_state), n_world], value]

                                          esac


  | Call (f, args) ->                     case lookup (state, f) of

                                          Fun (a, exp) -> case evalList (config, args) of

                                          [[state_1, world_1], value_1] -> 

                                          case exp of

                                          External ->

                                          case evalBuiltin (f, value_1, world_1) of

                                          [v, n_world] -> [[state_1, n_world], v]

                                          esac

                                          | _ ->

                                          case eval ([evalVal (enterFunction (state_1), a, value_1), world_1], exp) of

                                          [[state_2, world_2], value_2] -> 
                                          [[leaveFunction (state_1, getGlobal (state_2)), world_2], value_2]

                                          esac
                                          esac  
                                          esac
                                          esac              
                                          
  
 

  | String (value) ->                     [config, value]

  | Array (args) ->                       case evalList (config, args) of

                                          [n_c, value] -> [n_c, listArray (value)]
                                        
                                          esac

  | Elem (e, i) ->                        case evalList (config, { e, i }) of

                                          [n_c, { l, value }] -> [n_c, l[value]]

                                          esac

  | ElemRef (e, i) ->                     case evalList (config, { e, i }) of

                                          [n_c, { l, value }] -> [n_c, ElemRef (l, value)]

                                          esac

  | Builtin (f, args) ->                  case evalList (config, args) of

                                            [[n_state, world_1], vals] ->

                                          case evalBuiltin (f, vals, world_1) of

                                            [value, world_2] ->
                                            
                                            [[n_state, world_2], value]

                                          esac
                                          esac

  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read", Fun ({}, External)).addName ("write", Fun (singleton ("a"), External)) , createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
