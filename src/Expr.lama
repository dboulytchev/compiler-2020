-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalDefs(state, defs) {
    foldl(fun(acc, def) {
        case def of
            Local(names) -> addNames(acc, names)
          | Fun(fn, args, body) -> addFunction(acc, fn, args, body)  
        esac
    }, state, defs)
}

fun amendState(state, names, values) {
    foldl(fun (acc, [name, value]) {
        acc.addName(name, Var(value))
    }, state, zip(names, values))
}

fun chain(cfg, expr1, expr2) {
    case eval(cfg, expr1) of [cNew, _] -> eval(cNew, expr2) esac
}

fun eval (c@[s, w],expr) { case expr of
    Const(value) -> [c, value]
  | Var(name) -> checkVar(s, name); [c, case lookup(s, name) of Var(value) -> value esac]
  | Ref(name) -> checkVar(s, name); [c, Ref(name)]
  | Binop(op, left, right) -> case evalList(c, {left, right}) of
      [cNext, {leftResult, rightResult}] -> [cNext, evalOp(op, leftResult, rightResult)]
  esac
  | Skip -> [c,BOTTOM]
  | Assn(left, right) -> case evalList(c, {left, right}) of
      [[sNext, wNext], {Ref(name), value}] -> [[sNext <- [name, Var(value)], wNext], value]
  esac
  | Read(name) -> checkVar(s, name); case readWorld(w) of 
      [value, wNew] -> [[s <- [name, Var(value)], wNew], BOTTOM]
  esac
  | Write(value) -> case eval(c, value) of
      [[sNew, wNew], result] -> [[sNew, writeWorld(result, wNew)], BOTTOM]
  esac
  | Seq(stmt1, stmt2) -> case eval(c, stmt1) of
      [cNew, _] -> eval(cNew, stmt2)
  esac
  | If(cond, onTrue, onFalse) -> case eval(c, cond) of
      [cNew, value] -> eval(cNew, if value == 0 then onFalse else onTrue fi)
  esac
  | While(cond, body) -> case eval(c, cond) of
      [cNew, value] -> if value == 0 then [cNew,BOTTOM] else chain(cNew, body, expr) fi
  esac
  | Repeat(body, cond) -> case eval(c, body) of
      [cBody, _] -> case eval (cBody, cond) of
          [cCond, value] -> if value == 0 then eval(cCond, expr) else [cCond, BOTTOM] fi
      esac
  esac
  | Ignore(stmt) -> case eval(c, stmt) of
      [cNew, _] -> [cNew, BOTTOM]
  esac
  | Scope(defs, expr) -> case eval([evalDefs(enterScope(s), defs), w], expr) of
      [[sNew, wNew], result] -> [[leaveScope(sNew), wNew], result]
  esac
  | Call(name, args) -> checkFun(s, name); case lookup(s, name) of
      Fun(sig, body) -> case evalList(c, args) of
          [[sArgs, wArgs], resultArgs] -> case eval([amendState(enterFunction(sArgs), sig, resultArgs), wArgs], body) of
              [[sBody, wBody], resultBody] -> [[leaveFunction(sArgs, getGlobal(sBody)), wBody], resultBody]
          esac
      esac                
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
