-- Expression evaluator

import List;
import State;

public fun evalBinop (op, l, r) {
	case op of
    "+"  -> l + r
  | "-"  -> l - r
  | "*"  -> l * r
  | "/"  -> l / r
  | "%"  -> l % r
  | "<"  -> l < r
  | "<=" -> l <= r
  | ">"  -> l > r
  | ">=" -> l >= r
  | "==" -> l == r
  | "!=" -> l != r
  | "!!" -> l !! r
  | "&&" -> l && r
	esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (s, expr) {
  case expr of
    Const (x)        -> x
  | Var   (x)        -> s (x)
  | Binop (op, l, r) -> evalBinop (op, evalExpr (s, l), evalExpr (s, r))
  esac
}