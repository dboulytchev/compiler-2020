-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (st, expr) {
  case expr of
    Var (a)            -> st (a)
  | Const (a)          -> a
  | Binop ("+",  a, b) -> evalExpr (st, a) +  evalExpr (st, b)
  | Binop ("-",  a, b) -> evalExpr (st, a) -  evalExpr (st, b)
  | Binop ("*",  a, b) -> evalExpr (st, a) *  evalExpr (st, b)
  | Binop ("/",  a, b) -> evalExpr (st, a) /  evalExpr (st, b)
  | Binop ("%",  a, b) -> evalExpr (st, a) %  evalExpr (st, b)
  | Binop ("==", a, b) -> evalExpr (st, a) == evalExpr (st, b)
  | Binop ("!=", a, b) -> evalExpr (st, a) != evalExpr (st, b)
  | Binop ("<",  a, b) -> evalExpr (st, a) <  evalExpr (st, b)
  | Binop ("<=", a, b) -> evalExpr (st, a) <= evalExpr (st, b)
  | Binop (">",  a, b) -> evalExpr (st, a) >  evalExpr (st, b)
  | Binop (">=", a, b) -> evalExpr (st, a) >= evalExpr (st, b)
  | Binop ("&&", a, b) -> evalExpr (st, a) && evalExpr (st, b)
  | Binop ("!!", a, b) -> evalExpr (st, a) !! evalExpr (st, b)
  esac
}
