-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}


fun addDefs (state, defList) {
  foldl (
      fun (state, df) {
          case df of
            Local (varList) -> state.addNames (varList) 
          | Fun (name, args, body) -> state.addFunction (name, args, body)
          esac
      }, state, defList
  )
}

fun eval (conf@[state, world], expr) {
  case expr of 
    Const (x) -> [conf, x]
  | Var (x) -> [conf, state.lookup (x)]
  | Ref (x) -> [conf, Ref (x)]
  | Ignore (expr) -> 
      case eval(conf, expr) of 
        [conf, val]  -> [conf, Bottom]
      esac
  | Binop (op, l, r) -> 
      case evalList (conf, {l, r}) of 
        [conf, {lEvaled, rEvaled}] -> [conf, evalOp (op, lEvaled, rEvaled)]
      esac
  | Skip -> [conf, Bottom]
  | Assn (leftExpr, rightExpr) -> 
      case evalList (conf, {leftExpr, rightExpr}) of 
        [newConf@[state, world], {valLeft, valRight}] -> 
          case valLeft of 
            Ref (varName) -> [[state <- [varName, valRight], world], valRight]
          esac
      esac
  | Read (varName) -> 
      case readWorld (world) of 
        [val, newWorld] -> [[state <- [varName, val], newWorld], val]
      esac
  | Write (expr) -> 
      case eval (conf, expr) of 
        [[state, world], val] -> [[state, writeWorld (val, world)], Bottom]
      esac
  | Seq (s1, s2) -> 
      case evalList (conf, {s1, s2}) of 
        [conf, {_, retval}]  -> [conf, retval]
      esac 
  | If (condExpr, trueBodyExpr, falseBodyExpr) -> 
      case eval (conf, condExpr) of
        [conf, val] -> if val != 0
                       then eval (conf, trueBodyExpr)
                       else eval (conf, falseBodyExpr)
                       fi
      esac
  | While (condExpr, bodyExpr) -> 
      case eval (conf, condExpr) of
        [conf, val] -> if val != 0
                       then case eval (conf, bodyExpr) of 
                              [conf, _] -> eval (conf, While (condExpr, bodyExpr))
                            esac
                       else [conf, Bottom]
                       fi
      esac
  | Repeat (bodyExpr, condExpr) -> 
      case eval (conf, bodyExpr) of 
        [conf, val] -> eval (conf, While (Binop ("==", Const (0), condExpr), bodyExpr))
      esac

  | Scope (defList, expr) -> 
      case state.enterScope of
        state ->
          case addDefs (state, defList) of 
            state -> 
              case eval ([state, world], expr) of 
                [c@[state, world], val] -> 
                  [[state.leaveScope, world], val]
              esac
          esac
      esac
  | Call (funcName, args) ->
      case state.lookup (funcName) of 
        Fun (canArgs, body) -> 
          case evalList (conf, args) of 
            [[state1, world], argVals] -> 
              case eval(
                  [foldl (fun (st, [argName, argVal]) { st.addName (argName, argVal) }, state1.enterFunction, zip(canArgs, argVals)), world]
                , body
              ) of
                [c@[state2, world], val] -> 
                  [[state1.leaveFunction (state2.getGlobal), world], val]
              esac
          esac
        | x -> failure(x.string)
      esac
  esac 
} 

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  -- failure (expr.string);
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
