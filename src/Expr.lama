-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

public fun eval (c@[state, world], expr) {
  (*printf ("Expr: %s\nState: %s\nWorld: %s\n", expr.string, state.string, world.string);*)
  case expr of
    Var (a)          -> [c, state (a)]
  | Const (a)        -> [c, a]
  | Binop (op, a, b) -> case evalList (c, {a, b}) of
                          [c, a : b : {}] -> [c, evalOp (op, a, b)]
                        esac
  | Assn (a, b)      -> case evalList (c, {a, b}) of
                          [[state, world], Ref (a) : b : {}] -> [[state <- [a, b], world], b]
                        esac
  | Ref (a)          -> [c, Ref (a)]
  | Seq (a, b)       -> case eval (c, a) of
                          [c, _] -> eval (c, b)
                        esac
  | Skip             -> [c, Void]
  | Read (Ref (a))   -> case readWorld (world) of 
                          [n, world] -> [[state <- [a, n], world], Void]
                        esac
  | Write (e)        -> case eval (c, e) of
                          [[state, world], v] -> [[state, writeWorld (v, world)], Void]
                        esac
  | If (e, s1, s2)   -> case eval (c, e) of
                          [c, n] -> if n != 0 then eval (c, s1) else eval (c, s2) fi
                        esac
  | While (e, s)     -> case eval (c, e) of
                          [c, n] -> if n != 0 then [eval (eval (c, s) [0], expr) [0], Void] else [c, Void] fi
                        esac
  | Repeat (s, e)    -> case eval (c, s) of
                          [c, _] -> eval (c, While (Binop ("==", e, Const (0)), s))
                        esac
  | Ignore (e)       -> case eval (c, e) of
                          [c, _] -> [c, Void]
                        esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
