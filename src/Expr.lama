-- Expression evaluator

import List;
import State;

local ops = {
  ["+", infix +],
  ["-", infix -],
  ["*", infix *],
  ["/", infix /],
  ["%", infix %],
  ["==", infix ==],
  ["!=", infix !=],
  ["<", infix <],
  ["<=", infix <=],
  [">", infix >],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

public fun evalBinop(op, left, right){
  case assoc (ops, op) of
    Some (f) -> f(left, right)
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (st, expr) {
  case expr of
    Const (x) -> x 
    | Var (x) -> st (x) 
    | Binop (op, l, r) -> evalBinop (op, evalExpr (st, l), evalExpr (st, r) )
  esac
}
