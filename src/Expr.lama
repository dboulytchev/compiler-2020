-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[state, world], expr) {
  case expr of
      Const(val)      -> [c, val]
    | Var(var)        -> [c, state(var)]
    | Ref(ref)        -> [c, Ref(ref)]
    | Binop(op, lhs, rhs)    ->  case evalList(c, {lhs, rhs}) of
                                      [c1, {lRes, rRes}] -> [c1, evalOp(op, lRes, rRes)]
                                  esac
    | Skip            -> [c, BOTTOM]
    | Assn(var, exp)  -> case evalList(c, {var, exp}) of
                            [[newState, new_w], {Ref (lVal), rVal}] -> [[newState <- [lVal, rVal], new_w], rVal]
                        esac
    | Read(x)         -> case readWorld(world) of
                            [val, new_w] -> [[state <- [x, val], new_w], BOTTOM]
                        esac
    | Write(expr)     -> case eval(c, expr) of
                            [[newState, new_w], val] -> [[newState, writeWorld(val, new_w)], BOTTOM]
                         esac
    | Seq(a, b)       -> case eval(c, a) of
                            [c1, _] -> eval(c1, b)
                         esac
    | If(x, a, b)    ->  case eval(c, x) of
                                              [c1, 0] -> eval(c1, b)
                                            | [c1, _] -> eval(c1, a)
                                        esac
    | While(x, b)    ->  case eval(c, x) of
                            [c1, 0] -> [c1, BOTTOM]
                          | [c1, _] -> case eval(c1, b) of
                                          [c2, _] -> eval(c2, expr)
                                       esac
                        esac
    | Repeat(a, x) -> case eval(c, a) of
                          [c1, _] -> case eval (c1, x) of
                                       [c2, 0] -> eval(c2, expr)
                                     | [c2, _] -> [c2, BOTTOM]
                                     esac
                      esac

    | Ignore(state) -> case eval(c, state) of
                            [c1, _] -> [c1, BOTTOM]
                        esac
    esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
