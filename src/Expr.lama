-- Expression evaluator

import List;
import State;

public fun sym2fun (sym) {
  case sym of
    "+"  -> infix  +
  | "-"  -> infix  -
  | "*"  -> infix  *
  | "/"  -> infix  /
  | "%"  -> infix  %
  | "==" -> infix ==
  | "!=" -> infix != 
  | "<"  -> infix  <
  | "<=" -> infix <=
  | ">"  -> infix  >
  | ">=" -> infix >=
  | "&&" -> infix &&
  | "!!" -> infix !!
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (st, expr) {
  case expr of
    Var (a)            -> st (a)
  | Const (a)          -> a
  | Binop (op,  a, b) -> (sym2fun (op)) (evalExpr (st, a), evalExpr (st, b))
  esac
}
