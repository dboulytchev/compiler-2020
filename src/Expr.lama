-- Expression evaluator

import List;
import State;

public fun applyInfixOp (op, l, r) {
  case op of
      "+"  -> l + r
    | "-"  -> l - r
    | "*"  -> l * r
    | "/"  -> l / r
    | "%"  -> l % r
    | "==" -> l == r
    | "!=" -> l != r
    | "<=" -> l <= r
    | "<"  -> l <  r
    | ">=" -> l >= r
    | ">"  -> l >  r
    | "&&" -> l && r
    | "!!" -> l !! r
    | _    -> failure ("Unknown operator %s\n", op.string)
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
      Const(x)        -> x
    | Var(x)          -> st(x)
    | Binop(op, l, r) -> op.applyInfixOp(evalExpr(st, l), evalExpr(st, r))
  esac
}
