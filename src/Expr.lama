-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addNamesValues (state, names, vals) {
  foldl (fun (st, [name, val]) {addName(st, name, Var(val))}, state, zip(names, vals))
}

fun evalDefs(state, defs) {
  foldl(fun(st, def) {
    case def of
        Local(names)          -> addNames(st, names)
      | Fun(name, args, body) -> addFunction(st, name, args, body)
    esac
  }, state, defs)
}

fun eval (c@[st, w], expr) {
  case expr of
      Const (x)         -> [c, x]
    | Var(x)            ->
        st.checkVar(x);
        case lookup(st, x) of
          Var(val) -> [c, val]
        esac
    | Binop(op, l, r)   -> 
        case evalList(c, {l, r}) of 
          [c, {lRes, rRes}] -> [c, evalOp(op, lRes, rRes)]
        esac
    | Ref(x)            -> [c, Ref(x)]
    | Ignore(expr)      -> 
        case eval(c, expr) of
          [c, _]  -> [c, Bottom]
        esac
    | Skip              -> [c, Bottom]
    | Assn(to, val)     -> 
        case evalList(c, {to, val}) of 
          [c2@[st, w], {toRes, valRes}] -> 
            case toRes of 
              Ref(x) -> --printf("%s := %s\n", x.string, valRes.string);
              [[st <- [x, Var(valRes)], w], valRes]
            esac
        esac
    | Read(x)           -> 
        case readWorld(w) of 
          [val, w] -> [[st <- [x, Var(val)], w], val]
        esac  
    | Write(expr)       -> 
        case eval(c, expr) of 
          [[st, w], val] -> [[st, writeWorld(val, w)], Bottom]
        esac
    | Seq(s1, s2)       -> 
        case evalList(c, {s1, s2}) of 
          [c, {_, val}]  -> [c, val]
        esac    
    | If(cond, s1, s2)  -> 
        case eval(c, cond) of
          [c, val] -> if val
                        then eval(c, s1)
                        else eval(c, s2)
                      fi
        esac
    | While(cond, s)    -> 
        case eval(c, cond) of
          [c, val] -> if val
                        then
                          case eval(c, s) of 
                            [c, _] -> eval(c, While(cond, s))
                          esac
                        else [c, Bottom]
                      fi
        esac
    | Repeat(s, cond) -> 
        case eval(c, s) of 
          [c, _] -> eval(c, While(Binop("==",Const (0),cond), s))
        esac
    | Scope(defs, e) ->
        case eval([evalDefs(enterScope(st), defs), w], e) of 
          [[s2, w], res] -> [[leaveScope(s2), w], res]
        esac
    | Call (f, args) ->
        checkFun(st, f);
        case lookup(st, f) of
          Fun (as, e) ->
            case evalList(c, args) of
              [[s1, w], expr] -> case eval ([addNamesValues(enterFunction(s1), as, expr), w], e) of
                                  [[s2, w], expr] -> [[leaveFunction(s1, getGlobal(s2)), w], expr]
                                 esac
            esac                
        esac
    | _ -> failure("Unknown expression %s\n", expr.string)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState(), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
