-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (state, expr)
{
  case expr of
    Var(value) -> state(value)
  | Const(value) -> value   
  | Binop(operation, l, r) -> evalBinOp(operation, evalExpr(state, l), evalExpr(state, r))
  esac
}

public fun evalBinOp(oper, l, r)
{
  case operation of
    "+" -> l + r
  | "-" -> l - r
  | "*" -> l * r
  | "/" -> l / r
  | "%" -> l % r
  | "<" -> l < r
  | "<=" -> l <= r
  | ">" -> l > r
  | ">=" -> l >= r
  | "==" -> l ++ r
  | "!=" -> l != r
  | "!!" -> l !! r
  | "&&" -> l && r
  esac
}

