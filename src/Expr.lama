-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (state, expr)
{
  case expr of
    Var(x) -> state(x)
  | Const(x) -> x   
  | Binop(operation, left, right) -> evalBinop(operation, evalExpr(state, left), evalExpr(state, right))
  esac
}

public fun evalBinop(operation, left, right)
{
  case operation of
    "+" -> left + right
  | "-" -> left - right
  | "*" -> left * right
  | "/" -> left / right
  | "%" -> left % right
  | "<" -> left < right
  | "<=" -> left <= right
  | ">" -> left > right
  | ">=" -> left >= right
  | "==" -> left ++ right
  | "!=" -> left != right
  | "!!" -> left !! right
  | "&&" -> left && right
  esac
}
