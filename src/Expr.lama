-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[state, world], expression) {
  case expression of
      Const (value) -> [c, value]
    | Var (variable) -> [c, state (variable)]
    | Ref (reference) -> [c, Ref (reference)]
    | Binop (operation, left, right) -> case evalList (c, { left, right }) of
                                          [c1, { first, second }] -> [c1, evalOp (operation, first, second)]
                                        esac
    | Skip -> [c, BOTTOM]
    | Assn (variable, expression) -> case evalList (c, { variable, expression }) of
                                       [[newState, new_w], { Ref (lValue), rValue }] -> [[newState <- [lValue, rValue], new_w], rValue]
                                     esac
    | Read (x) -> case readWorld (world) of
                    [value, new_w] -> [[state <- [x, value], new_w], BOTTOM]
                  esac
    | Write (expression) -> case eval (c, expression) of
                        [[newState, new_w], value] -> [[newState, writeWorld (value, new_w)], BOTTOM]
                      esac
    | Seq (a, b) -> case eval (c, a) of
                      [c1, _] -> eval (c1, b)
                    esac
    | If (x, a, b) ->  case eval (c, x) of
                           [c1, 0] -> eval (c1, b)
                         | [c1, _] -> eval (c1, a)
                       esac
    | While (x, b) ->  case eval (c, x) of
                           [c1, 0] -> [c1, BOTTOM]
                         | [c1, _] -> case eval (c1, b) of
                                        [c2, _] -> eval (c2, expression)
                                      esac
                        esac
    | Repeat (a, x) -> case eval(c, a) of
                         [c1, _] -> case eval (c1, x) of
                                        [c2, 0] -> eval (c2, expression)
                                      | [c2, _] -> [c2, BOTTOM]
                                    esac
                       esac

    | Ignore (state) -> case eval (c, state) of
                          [c1, _] -> [c1, BOTTOM]
                        esac
    esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
