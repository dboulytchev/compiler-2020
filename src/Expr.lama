-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalDefs (s, defs) {
  fun evalDef (s, def) {
    case def of
      Local (xs) -> addNames (s, xs)
    | Fun (f, args, e) -> addFunction (s, f, args, e)  
    esac
  }

  foldl(evalDef, s, defs)
}

fun addNamedValues (s, names, vals) {
  fun addNamedValue (s, [name, val]) {
    s.addName (name, Var (val))
  }

  foldl (addNamedValue, s, zip (names, vals))
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (x, e) ->
      case evalList (c, {x, e}) of
        [[ns, nw], {Ref (xv), ev}] -> [[ns <- [xv, Var (ev)], nw], ev]
      esac
  | Seq (s1, s2) -> 
      case eval (c, s1) of
        [nc, _] -> eval (nc, s2)
      esac
  | Skip -> [c, Void]
  | Read (x) -> checkVar(s, x); case readWorld (w) of [val, nw] -> [[s <- [x, Var (val)], nw], Void] esac
  | Write (e) ->
      case eval (c, e) of
        [[ns, nw], val] -> [[ns, writeWorld (val, nw)], Void]
      esac
  | If (e, s1, s2) -> 
      case eval (c, e) of
        [nc, cond] -> eval (nc, if cond then s1 else s2 fi)
      esac
  | While (e, body) ->
      case eval (c, e) of
        [c, cond] ->
          if cond then
            case eval (c, body) of 
              [c, _] -> eval (c, expr) 
            esac
          else [c, Void] fi 
      esac
  | Repeat (body, e) -> 
      case eval (c, body) of
        [c, _] -> 
          case eval (c, e) of
            [c, cond] ->
              if cond == 0 then eval (c, expr) else [c, Void] fi
          esac
      esac
  | Var (x) -> checkVar (s, x); [c, case lookup (s, x) of Var (v) -> v esac]
  | Ref (x) -> checkVar (s, x); [c, Ref (x)]
  | Const (x) -> [c, x]
  | Binop (op, l, r) ->
      case evalList (c, {l, r}) of
        [nc, {lv, rv}] -> [nc, evalOp (op, lv, rv)]
      esac
  | Scope (defs, e) -> 
      case eval ([evalDefs (enterScope (s), defs), w], e) of
        [[s1, w1], ev] -> [[leaveScope (s1), w1], ev]
      esac
  | Call (f, args) -> 
      checkFun (s, f);
      case lookup (s, f) of
        Fun (as, e) ->
          case evalList (c, args) of
            [[s1, w1], cv] -> 
              case eval ([addNamedValues (enterFunction (s1), as, cv), w1], e) of
                [[s2, w2], vv] -> [[leaveFunction (s1, getGlobal (s2)), w2], vv]
              esac
          esac                
      esac
  | Ignore (x) -> 
      case eval (c, x) of
        [nc, _] -> [nc, Void]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}