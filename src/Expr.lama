-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalBinOperation(operation, first, second) {
  case operation of
    "+" -> first + second
  | "-" -> first - second
  | "*" -> first * second
  | "/" -> first / second
  | "%" -> first % second
  | "<" -> first < second
  | ">" -> first > second
  | "==" -> first == second
  | "!=" -> first != second
  | ">=" -> first >= second
  | "<=" -> first <= second
  | "&&" -> first && second
  | "!!" -> first !! second
  esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var (s) -> st (s)
  | Const (i) -> i
  | Binop (operation, first, second) -> evalBinOperation (operation, evalExpr (st, first), evalExpr (st, second))
  esac
}
