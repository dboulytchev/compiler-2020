-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

fun addNamesWithValues (state, names, values) {
  foldl (fun (s, [name, value]) {s.addName (name, Var (value))}, state, zip(names, values))
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalD (st, defs) {
  case defs of
    {} -> st
  | def : defs ->
      case def of
        Local(names) -> evalD(st.addNames(names), defs)
      | Fun(name, args, body) -> evalD(st.addFunction(name, args, body), defs)
      esac
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Const(x) -> [c, x]
  | Var(x) ->
      -- st.checkVar(x);
      case st.lookup(x) of
        Var(x) -> [c, x]
      esac
  | Ref(x) ->   [c, Ref(x)]
  | Skip ->     [c, Bottom]
  | Ignore(x) -> 
      case eval(c, x) of
        [c_new, _] -> [c_new, Bottom]
      esac
  | Binop(op, l, r) ->
      case evalList(c, {l, r}) of
        [c_new, {l_val, r_val}] -> [c_new, evalOp(op, l_val, r_val)]
      esac
  | Read(x) ->
      -- st.checkVar(x);
      case readWorld(w) of 
        [val, w] -> [[st <- [x, Var(val)], w], Bottom]
      esac
  | Write(e) ->
      case eval(c, e) of
        [[st, w], val] -> [[st, writeWorld(val, w)], Bottom]
      esac
  | Seq(s1, s2) -> 
    case eval(c, s1) of
      [c, _] -> eval(c, s2)
    esac
  | Assn(l, r) ->
      case evalList(c, {l, r}) of
        [[st, w], {Ref(l_val), r_val}] -> [[st <- [l_val, Var(r_val)], w], r_val]
      esac

  | Scope(defs, e) ->
      case evalD(enterScope(st), defs) of st ->
        case eval([st, w], e) of
          [[st, w], res] -> [[leaveScope(st), w], res]
        esac
      esac

  | If(exp, s1, s2) -> 
      case eval(c, exp) of
        [c_new, cond] -> eval(c_new, if cond then s1 else s2 fi)
      esac

  | While(e, s) ->
      case eval(c, e) of
        [c, cond] ->
          if cond then
            case eval(c, s) of [c, _] -> eval(c, expr) esac
          else
            [c, Void]
          fi 
      esac
  | Repeat(s, e) -> 
      case eval(c, s) of
        [c, _] -> 
          case eval(c, e) of
            [c, cond] ->
              if cond == 0
                then eval(c, expr)
                else [c, Void]
              fi
          esac
      esac
    | Call(f, args) -> 
      -- checkFun(st, f);
      case st.lookup(f) of
        Fun (frml_args, e) ->
          case evalList (c, args) of
            [[s1, w], args_values] -> 
              case eval ([s1.enterFunction.addNamesWithValues(frml_args, args_values), w], e) of
                [[s2, w], res] -> [[s1.leaveFunction(s2.getGlobal), w], res]
              esac
          esac
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
