-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
 case expr of
      Const(x) -> x
     |Var(x) -> st(x)
     |Binop(opr , l , r) -> evaluateBINOP(opr, evalExpr(st,l) , evalExpr(st,r))
  esac
}

public fun evaluateBINOP(opr , l , r){

       case opr of
       	     "+" -> l+r
	    |"-" -> l-r
	    |"*" -> l*r
	    |"/" -> l/r
	    |"%" -> l%r
	    |"==" -> l==r
	    |"!=" -> l!=r
	    |">" -> l>r
	    |"<" -> l<r
	    |">=" -> l>=r
	    |"<=" -> l<=r
	    |"&&" -> l&&r
	    |"!!" -> l!!r
	esac

}