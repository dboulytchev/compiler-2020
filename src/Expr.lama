-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of 
    Var(x) -> st(x)
  | Const(n) -> n
  | Binop(op, left, right) -> callBinOp(op, evalExpr(st, left), evalExpr(st, right))
  esac
}

public fun callBinOp (op, left, right){
  case op of 
    "+" -> left + right
  | "-" -> left - right
  | "*" -> left * right
  | "/" -> left / right
  | "%" -> left % right
  | "<" -> left < right
  | ">" -> left > right
  | "<=" -> left <= right
  | ">=" -> left >= right
  | "==" -> left == right
  | "!=" -> left != right
  | "!!" -> left !! right
  | "&&" -> left && right
  esac
}
