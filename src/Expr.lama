-- Expression evaluator

import List;
import State;


--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (state, expr) {
  case expr of
    Const(value) -> value
  | Var(name) -> state(name)
  | Binop(op, left, right) -> evalBinary(op, evalExpr(state, left), evalExpr(state, right))
  esac
}

public fun evalBinary (op, left, right) {
  case op of 
    "+" -> left + right
  | "-" -> left - right
  | "*" -> left * right 
  | "/" -> left / right
  | "%" -> left % right
  | "==" -> left == right
  | "!=" -> left != right
  | "<"  -> left < right
  | ">"  -> left > right
  | "<=" -> left <= right
  | ">=" -> left >= right
  | "&&" -> left && right
  | "!!" -> left !! right
  esac
}

