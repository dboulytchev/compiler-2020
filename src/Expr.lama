-- Expression evaluator

import List;
import Collection;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (state, expression) {
  local operandsMap = listMap ( 
    ["+", infix +]:
    ["-", infix -]:
    ["*", infix *]:
    ["/", infix /]:
    ["%", infix %]:
    ["==", infix ==]:
    ["!=", infix !=]:
    ["<=", infix <=]:
    ["<", infix <]:
    [">=", infix >=]:
    [">", infix >]:
    ["&&", infix &&]:
    ["!!", infix !!]:{}
  );
  case expression of
    Var (name) -> state (name)
  | Const (value) -> value
  | Binop (operand, expression1, expression2) -> 
    case findMap(operandsMap, operand) of
      Some (operandF) -> operandF (evalExpr (state, expression1), evalExpr (state, expression2))
    | None -> failure (stringcat ("Unknown operand " : operand : "\n" : {}))
    esac
  esac
}
