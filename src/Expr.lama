-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalScope (s, ds) {
  foldl (fun (s, d) {
                      case d of
                        Local (xs) -> s.addNames (xs)
                      | Fun (f, a, e) -> s.addFunction (f, a, e)  
                      esac
                    }, s, ds)
}

fun evalVal (st, ns, vs) {
  foldl (fun (s, [n, v]) { s.addName (n, Var (v)) }, st, zip(ns, vs))
}

fun eval (c@[s, w], expr) {
  case expr of
    Const (x) -> [c, x]
  | Var (x) -> checkVar (s, x); [c, case lookup (s, x) of
                                      Var (nx) -> nx
                                    esac]
  | Ref (x) -> checkVar (s, x); [c, Ref (x)]
  | Assn (l, r) -> case evalList (c, { l, r }) of
                     [[ns, nw], { Ref (nl), nr }] -> [[ns <- [nl, Var (nr)], nw], nr]
                   esac
  | Read (x) -> checkVar (s, x);
                case readWorld (w) of
                  [v, nw] -> [[s <- [x, Var (v)], nw], BOTTOM]
                esac
  | Write (e) -> case eval (c, e) of
                   [[ns, nw], v] -> [[ns, writeWorld (v, nw)], BOTTOM]
                 esac
  | Binop (op, l, r) -> case evalList (c, { l, r }) of
                          [nc, { nl, nr }] -> [nc, evalOp (op, nl, nr)]
                        esac
  | Skip -> [c, BOTTOM]
  | Ignore (s) -> case eval (c, s) of
                    [nc, _] -> [nc, BOTTOM]
                  esac
  | Seq (s1, s2) -> case eval (c, s1) of
                      [nc, _] -> eval (nc, s2)
                    esac
  | If (e, s1, s2) -> case eval (c, e) of
                        [nc, 0] -> eval (nc, s2)
                      | [nc, _] -> eval (nc, s1)
                      esac
  | While (e, s1) -> case eval (c, e) of
                       [nc1, 0] -> [nc1, BOTTOM]
                     | [nc1, _] -> case eval (nc1, s1) of
                                    [nc2, _] -> eval (nc2, expr)
                                  esac
                     esac
  | Repeat (s1, e) -> case eval (c, s1) of
                        [nc1, _] -> case eval (nc1, e) of
                                     [nc2, 0] -> eval (nc2, expr)
                                   | [nc2, _] -> [nc2, BOTTOM]
                                   esac
                      esac
  | Scope (d, e) -> case eval ([evalScope (enterScope (s), d), w], e) of
                      [[ns, nw], v] -> [[leaveScope (ns), nw], v]
                    esac
  | Call (f, as) -> checkFun (s, f); case lookup (s, f) of
                                       Fun (a, e) -> case evalList (c, as) of
                                                       [[ns1, nw1], nv1] -> case eval ([evalVal (enterFunction (ns1), a, nv1), nw1], e) of
                                                                              [[ns2, nw2], nv2] -> [[leaveFunction (ns1, getGlobal (ns2)), nw2], nv2]
                                                                            esac
                                                     esac                
                                     esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
