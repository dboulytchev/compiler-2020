-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (cfg@[state, world], expr) {
  case expr of 
    Const(value) -> [cfg, value]
  | Var(name) -> [cfg, state(name)]
  | Ref(name) -> [cfg, Ref(name)]
  | Ignore (expr) -> 
      case eval(cfg, expr) of 
        [cfg, value]  -> [cfg, Bottom]
      esac
  | Binop (op, left, right) -> 
      case evalList(cfg, {left, right}) of 
        [cfg, {leftValue, rightValue}] -> [cfg, evalOp(op, leftValue, rightValue)]
      esac
  | Skip -> [cfg, Bottom]
  | Assn (left, right) -> 
      case evalList(cfg, {left, right}) of 
        [[newState, newWorld], {leftValue, rightValue}] -> 
          case leftValue of 
            Ref(name) -> [[newState <- [name, rightValue], newWorld], rightValue]
          esac
      esac
  | Read (name) -> 
      case readWorld(world) of 
        [value, newWorld] -> [[state <- [name, value], newWorld], value]
      esac
  | Write (value) -> 
      case eval(cfg, value) of 
        [[state, world], result] -> [[state, writeWorld(result, world)], Bottom]
      esac
  | Seq (stmt1, stmt2) -> 
      case evalList (cfg, {stmt1, stmt2}) of 
        [cfg, {_, value}]  -> [cfg, value]
      esac 
  | If (cond, onTrue, onFalse) -> 
      case eval (cfg, cond) of
        [cfg, value] -> eval (cfg, if value != 0 then onTrue else onFalse fi)
      esac
  | While (cond, body) -> 
      case eval (cfg, cond) of
        [cfg, value] -> if value != 0
                      then case eval (cfg, body) of 
                             [cfg, _] -> eval (cfg, While (cond, body))
                           esac
                      else [cfg, Bottom]
                      fi
      esac
  | Repeat (body, cond) ->
      case eval (cfg, body) of
        [cfg, _] -> eval (cfg, While (Binop ("==", Const (0), cond), body))
      esac
  esac
} 

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

