-- Expression evaluator

import List;
import State;

-- Implementation of binary operation
public fun binOp(op, left, right) {
  case op of
    "+"  -> left +  right
  | "-"  -> left -  right
  | "*"  -> left *  right
  | "/"  -> left /  right
  | "%"  -> left %  right
  | "==" -> left == right
  | "!=" -> left != right
  | "<"  -> left <  right
  | "<=" -> left <= right
  | ">"  -> left >  right
  | ">=" -> left >= right
  | "&&" -> left && right
  | "!!" -> left !! right
  esac
}


-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (state, expr) {
  case expr of
    Binop (op, left, right) -> binOp(op, evalExpr(state, left), evalExpr(state, right))
  | Const (val)             -> val
  | Var   (val)             -> state(val)
  | _                       -> failure("Wrong Expr")
  esac
}