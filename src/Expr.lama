-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalScope (s, ds) {
  foldl (fun (s, d) {
                      case d of
                        Local (xs) -> s.addNames (xs)
                      | Fun (f, a, e) -> s.addFunction (f, a, e)  
                      esac
                    }, s, ds)
}

fun evalVal (st, ns, vs) {
  foldl (fun (s, [n, v]) { s.addName (n, Val (v)) }, st, zip (ns, vs))
}

fun eval (c@[s, w], expr) {
  case expr of
    Const (x) -> [c, x]
  | Var (x) -> [c, case lookup (s, x) of
                     Val (nx) -> nx
                   esac]
  | Ref (x) -> [c, Ref (x)]
  | Assn (l, r) -> case evalList (c, { l, r }) of
                     [[ns, nw], { Ref (nl), nr }] -> [[ns <- [nl, Val (nr)], nw], nr]
                   | [nc, { ElemRef (a, i), v }] -> a[i] := v; [nc, v]
                   esac
  | Binop (op, l, r) -> case evalList (c, { l, r }) of
                          [nc, { nl, nr }] -> [nc, evalOp (op, nl, nr)]
                        esac
  | Skip -> [c, BOTTOM]
  | Ignore (s) -> case eval (c, s) of
                    [nc, _] -> [nc, BOTTOM]
                  esac
  | Seq (s1, s2) -> case eval (c, s1) of
                      [nc, _] -> eval (nc, s2)
                    esac
  | If (e, s1, s2) -> case eval (c, e) of
                        [nc, 0] -> eval (nc, s2)
                      | [nc, _] -> eval (nc, s1)
                      esac
  | While (e, s1) -> case eval (c, e) of
                       [nc1, 0] -> [nc1, BOTTOM]
                     | [nc1, _] -> case eval (nc1, s1) of
                                    [nc2, _] -> eval (nc2, expr)
                                  esac
                     esac
  | Repeat (s1, e) -> case eval (c, s1) of
                        [nc1, _] -> case eval (nc1, e) of
                                     [nc2, 0] -> eval (nc2, expr)
                                   | [nc2, _] -> [nc2, BOTTOM]
                                   esac
                      esac
  | Scope (d, e) -> case eval ([evalScope (enterScope (s), d), w], e) of
                      [[ns, nw], v] -> [[leaveScope (ns), nw], v]
                    esac
  | Call (f, args) -> case lookupFun (s, f) of
                        Fun (as, e) ->
                          case evalList (c, args) of
                            [[ns1, nw1], vs] -> 
                              case e of
                                External ->
                                  case evalBuiltin (f, vs, nw1) of
                                    [v, nw] -> [[ns1, nw], v]
                                  esac
                                | _ ->
                                  case eval ([evalVal (enterFunction (ns1), as, vs), nw1], e) of
                                    [[ns2, nw2], v] -> [[leaveFunction (ns1, getGlobal (ns2)), nw2], v]
                                  esac
                              esac
                          esac                
                      esac
  | String (x) -> [c, x]
  | Array (as) -> case evalList (c, as) of
                    [nc, v] -> [nc, listArray (v)]
                  esac
  | Elem (e, i) -> case evalList (c, { e, i }) of
                     [nc, { l, v }] -> [nc, l[v]]
                   esac
  | ElemRef (e, i) -> case evalList (c, { e, i }) of
                        [nc, { l, v }] -> [nc, ElemRef (l, v)]
                      esac
  | Builtin (f, as) -> case evalList (c, as) of
                         [[ns, nw1], vs] ->
                           case evalBuiltin (f, vs, nw1) of
                             [v, nw2] -> [[ns, nw2], v]
                           esac
                       esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read", Fun ({}, External)).addName ("write", Fun (singleton ("a"), External)) , createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
