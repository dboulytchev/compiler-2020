-- Expression evaluator

import List;
import State;

public fun evalBinop (operation, l, r) {
	case operation of
		"+"    -> l + r
		| "-"  -> l - r
		| "*"  -> l * r
		| "/"  -> l / r
		| "%"  -> l % r
		| "==" -> l == r
		| "!=" -> l != r
		| ">"  -> l > r
		| ">=" -> l >= r
		| "<"  -> l < r
		| "<=" -> l <= r
		| "!!" -> l !! r
		| "&&" -> l && r
	esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  	case expr of
		Const          (c) 			-> c
		| Var          (x) 			-> st (x)
		| Binop (operation, l, r) 	-> evalBinop(operation, evalExpr(st, l), evalExpr(st, r))
	esac
}
