-- Expression evaluator

import List;
import Collection;
import State;

local operandsMap = listMap (
  ["+", infix +]:
  ["-", infix -]:
  ["*", infix *]:
  ["/", infix /]:
  ["%", infix %]:
  ["==", infix ==]:
  ["!=", infix !=]:
  ["<=", infix <=]:
  ["<", infix <]:
  [">=", infix >=]:
  [">", infix >]:
  ["&&", infix &&]:
  ["!!", infix !!]:{}
);

public fun evalOperand(operand (*string*), left_value (*int*), right_value (*int*)) {
  case findMap(operandsMap, operand) of
    Some (operandF) -> operandF (left_value, right_value)
  | None -> failure (stringcat ("Unknown operand " : operand : "\n" : {}))
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (state, expression) {
  case expression of
    Var (name) -> state (name)
  | Const (value) -> value
  | Binop (operand, expression1, expression2) -> evalOperand (operand, evalExpr (state, expression1), evalExpr (state, expression2))
  esac
}
