-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalDefs(s, defs) {
  foldl (fun (s, def) {
              case def of
                Fun (f, args, e) -> addFunction(s, f, args, e)  
              | Local (xs)       -> addNames(s, xs)
              esac
            }, s, defs
        )
}

fun addNamesValues (state, names, vals) {
  foldl (fun (s, [name, val]) {s.addName (name, Var (val))}, state, zip(names, vals))
}

fun eval (c@[s, w], expr) {
  case expr of
    Var(var) -> checkVar(s, var); [c, case lookup(s, var) of Var (v) -> v esac]
  | Const(val) -> [c, val]
  | Binop(op, lhs, rhs) -> case evalList(c, {lhs, rhs}) of
                          [c1, {vv, v}] -> [c1, evalOp(op, vv, v)]
                        esac
  | Ref(ref) -> checkVar(s, ref); [c, Ref (ref)]
  | Skip -> [c, BOTTOM]
  | Assn(lhs, rhs) -> case evalList(c, {lhs, rhs}) of
                     [[s1, w1], {Ref (vv), v}] -> [[s1 <- [vv, Var (v)], w1], v]
                   esac
  | Read(x) -> checkVar(s, x);
                case readWorld(w) of 
                  [z, wd] -> [[s <- [x, Var (z)], wd], BOTTOM]
                esac              
  | Write(expr) -> case eval(c, expr) of
                   [[s1, w1], v] -> [[s1, writeWorld(v, w1)], BOTTOM]
                 esac
  | Seq(a, b) -> case eval(c, a) of
                      [c1, _] -> eval(c1, b)
                    esac
  | If(x, a, b) -> case eval(c, x) of
                        [c1, 0] -> eval(c1, b)
                      | [c1, _] -> eval(c1, a)
                      esac
  | While(x, a) -> case eval(c, x) of
                       [c1, 0] -> [c1, BOTTOM]
                     | [c1, _] -> case eval(c1, a) of [c2, _] -> eval(c2, expr) esac
                     esac
  | Repeat(a, x) -> case eval(c, a) of
                        [c1, _] -> case eval (c1, x) of
                                     [c2, 0] -> eval(c2, expr)
                                   | [c2, _] -> [c2, BOTTOM]
                                   esac
                      esac

  | Ignore(s) -> case eval(c, s) of [c1, _] -> [c1, BOTTOM] esac 
  | Scope(defs, e) -> case eval([evalDefs(enterScope(s), defs), w], e) of
                         [[s1, w1], vv] -> [[leaveScope(s1), w1], vv]
                       esac
  | Call(f, args) -> checkFun(s, f);
                      case lookup(s, f) of
                        Fun (as, e) ->
                          case evalList(c, args) of
                            [[s1, w1], vs] -> case eval ([addNamesValues(enterFunction(s1), as, vs), w1], e) of
                                                [[s2, w2], vv] -> [[leaveFunction(s1, getGlobal(s2)), w2], vv]
                                              esac
                          esac                
                      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
