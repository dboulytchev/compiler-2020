-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (s1, s2) -> case evalList (c, {s1, s2}) of
                      [[s1, w1], {Ref (ss1), ss2}] -> [[s1 <- [ss1, ss2], w1], ss2]
                     esac
  | Seq (s1, s2) -> case eval (c, s1) of [c, _] -> eval(c, s2) esac
  | Skip -> [c, Void]
  | Read (x) -> case readWorld (w) of  [n, w] -> [[s <- [x, n], w], Void] esac
  | Write (e) -> case eval (c, e) of [[s, w], n] -> [[s, writeWorld (n, w)], Void] esac
  | If (s1, s2, s3) -> case eval (c, s1) of
                        [c1, 0] -> eval (c1, s3)
                      | [c1, _] -> eval (c1, s2)
                      esac
  | While (s1, s2) -> case eval (c, s1) of
                        [c, 0] -> [c, Void]
                      | [c, _] -> case eval (c, s2) of [c, _] -> eval (c, expr) esac
                      esac
  | Repeat (s1, s2) -> case eval (c, s1) of
                        [c1, _] -> case eval (c1, s2) of
                                      [c2, 0] -> eval (c2, expr)
                                    | [c2, _] -> [c2, Void]
                                   esac
                       esac
  | Var (x) -> [c, s (x)]
  | Ref (x) -> [c, Ref (x)]
  | Const (n) -> [c, n]
  | Binop (op, lhs, rhs) -> case evalList (c, {lhs, rhs}) of [c1, {lhs, rhs}] -> [c1, evalOp (op, lhs, rhs)] esac
  | Ignore (s) -> case eval (c, s) of [c, _] -> [c, Void] esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
