-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var(var)            -> var.st
  | Const(val)          -> val
  | Binop(op, lhs, rhs) -> evalBinop(op, evalExpr(st, lhs), evalExpr(st, rhs))
  | _                   -> failure ("evalExpr for this expression not implemented\n")
  esac
}

public fun evalBinop (op, lhs, rhs) {
  case op of
    "+"  -> lhs + rhs
  | "-"  -> lhs - rhs
  | "*"  -> lhs * rhs
  | "/"  -> lhs / rhs
  | "%"  -> lhs % rhs
  | "==" -> lhs == rhs
  | "!=" -> lhs != rhs
  | "<"  -> lhs < rhs
  | "<=" -> lhs <= rhs
  | ">"  -> lhs > rhs
  | ">=" -> lhs >= rhs
  | "&&" -> lhs && rhs
  | "!!" -> lhs !! rhs
  esac
}
