-- X86 codegeneration interface
-- We use stack machine programs as intermediate representation
import SM;
import Collection;
import List;
import Util;
import Manifest;

-- Assembler language interface
-- The registers: 
local regs = ["%ebx", "%ecx", "%esi", "%edi", "%eax", "%edx", "%ebp", "%esp"];

-- We can not freely operate with all register; only with 4 by now
local nRegs = regs.length - 5;

-- For convenience we define the following synonyms for the registers: 
local ebx = R (0),
      ecx = R (1),
      esi = R (2),
      edi = R (3),
      eax = R (4),
      edx = R (5),
      ebp = R (6),
      esp = R (7);

-- We need to know the word size to calculate offsets correctly
local wordSize = 4;

-- We need to distinguish the following operand types: 
--    R (int)    -- hard register                    
--    S (int)    -- a position on the hardware stack 
--    M (string) -- a named memory location          
--    L (int)    -- an immediate operand             

-- Some x86 instruction (we do not need all of them):
--   Mov   (opnd, opnd)         -- copies a value from the first to the second operand  
--   Binop (string, opnd, opnd) -- makes a binary operation; note, the first operand   
--                                 designates x86 operator, not the source language one
--   IDiv  (opnd)               -- x86 integer division, see instruction set reference 
--   Cltd                       -- see instruction set reference           
--   Set   (string, string)     -- sets a value from flags; the first operand is the   
--                                 suffix, which determines the value being set, the
--                                 the second --- (sub)register name 
--   Push  (opnd)               -- pushes the operand on the hardware stack
--   Pop   (opnd)               -- pops from the hardware stack to the operand
--   Call  (string)             -- calls a function by its name 
--   Ret                        -- returns from a function
--   Meta  (string)             -- metainformation (declarations, etc.)
                                                               
-- Machine instruction printer
fun insnString (insn) {
  
  fun binopString (op) {
    case op of
      "+"   -> "addl"
    | "-"   -> "subl"
    | "*"   -> "imull"
    | "&&"  -> "andl"
    | "!!"  -> "orl" 
    | "^"   -> "xorl"
    | "cmp" -> "cmpl"
    esac
  }

  fun opndString (opnd) {
    case opnd of
      R (i) -> regs [i]
    | S (i) -> sprintf ("-%d(%%ebp)", (i+1) * wordSize)
    | M (x) -> x
    | L (i) -> sprintf ("$%d", i)
    esac
  }
  
  case insn of
    Cltd               -> "\tcltd\n"
  | Set   (suf, s)     -> sprintf ("\tset%s\t%s\n", suf, s)
  | IDiv  (s1)         -> sprintf ("\tidivl\t%s\n", opndString (s1))
  | Binop (op, s1, s2) -> sprintf ("\t%s\t%s,\t%s\n", binopString (op), opndString (s1), opndString (s2))
  | Mov   (s1, s2)     -> sprintf ("\tmovl\t%s,\t%s\n", opndString (s1), opndString (s2))
  | Push  (s)          -> sprintf ("\tpushl\t%s\n", opndString (s))
  | Pop   (s)          -> sprintf ("\tpopl\t%s\n", opndString (s))
  | Ret                -> "\tret\n"
  | Call  (p)          -> sprintf ("\tcall\t%s\n", p)
  | Meta  (m)          -> m
  esac
}

-- Environment for symbolic interpreter
-- An environment holds
--    a symbolic stack
--    a maximal stack depth reached so far
--    a set of global variable names

fun makeEnv (stack, stackSlots, globals) {
  -- Returns an internal name for a global variable
  fun globalName (name) {
    "global_" ++ name
  }

  -- Returns a string representation of the environment
  fun envString () {
    sprintf ("Stack     : %s\nStackSlots: %d\nGlobals   : %s\n", stack.string, stackSlots, elements (globals).string)
  }
  
  -- Allocates a new position on the symbolic stack;
  -- returns a pair: a location for allocated item and
  -- an updated environment
  fun allocate () {
    case 
      case stack of
        {}        -> [ebx, 0]
      | S (n) : _ -> [S (n+1), n+2]
      | R (n) : _ -> if n < nRegs then [R (n+1), stackSlots] else [S (0), 1] fi
      | _         -> [S (0), 1]
      esac
    of [x, n] -> [x, makeEnv (x : stack, if n > stackSlots then n else stackSlots fi, globals)]esac
  }

  -- Pushes an item on the symbolic state; returns an updated envirtonment
  fun push (y) {
    makeEnv (y : stack, stackSlots, globals)
  }

  -- Pops one item from the symbolic stack; returns a pair: a popped
  -- item and an updated environment
  fun pop () {
    case stack of
      x : stack -> [x, makeEnv (stack, stackSlots, globals)]
    esac
  }

  -- Pops two items from the symbolic stack; returns a triple:
  -- popped items and an undated environment
  fun pop2 () {
    case stack of
      x : y : stack -> [x, y, makeEnv (stack, stackSlots, globals)]
    esac
  }

  -- Adds a global variable; returns an updated environment
  fun addGlobal (name) {
    makeEnv (stack, stackSlots, addSet (globals, globalName (name)))
  }

  -- References a global variable
  fun loc (name) {
    M (globalName (name))
  }
  
  -- Gets a list of global variables from the environment
  fun getGlobals () {
    globals.elements
  }

  -- Gets a maximal stack size from the environment
  fun getStackSize () {
    stackSlots
  }

  [envString, allocate, push, pop, pop2, addGlobal, loc, getGlobals, getStackSize]
}

-- Exported accessors
fun envString (env) {
  env [0] ()
}

fun allocate (env) {
  env [1] ()
}

fun push (env, x) {
  env [2] (x)
}

fun pop (env) {
  env [3] ()
}

fun pop2 (env) {
  env [4] ()
}

fun addGlobal (env, name) {
  env [5] (name)
}

fun loc (env, name) {
  env [6] (name)
}

fun getGlobals (env) {
  env [7] ()
}

fun getStackSize (env) {
  env [8] ()
}

-- Creates an initial environment
fun initEnv () {
  makeEnv (0, emptySet (), {})
}

-- Codegeneration helper functions
-- Generates code section
fun codeSection (text) {
  Meta ("\t.text\n") : text
}

-- Generates data section
fun dataSection (text) {
  Meta ("\t.data\n") : text
}

-- Generates data definition
fun dataDef (name) {
  singleton (Meta (sprintf ("%s:\t.int\t0\n", name)))
}

-- Generates function prologue
fun prologue (size) {
  {Push  (ebp),
   Mov   (esp, ebp),
   Binop ("-", L (wordSize*size), esp)}
}

-- Generates function epilogue
fun epilogue () {
  {Mov   (ebp, esp),
   Pop   (ebp),
   Binop ("^", eax, eax),
   Ret}
}

-- Checks if an operand resides on a stack
fun stackOpnd (opnd) {
  case opnd of
    S (_) -> true
  | _     -> false
  esac      
}

-- Checks if an operand resides in memory
fun memOpnd (opnd) {
  case opnd of
    S (_) -> true
  | M (_) -> true
  | _     -> false
  esac
}

-- Checks if an operand resides in memory
fun isRegOpnd (opnd) {
  case opnd of
    R (_) -> true
  | _     -> false
  esac
}

-- Generates a move between locations, using
-- intermediate register if needed
fun move (from, to) {
  if memOpnd (from) && memOpnd (to)
  then {Mov (from, eax), Mov (eax, to)}
  else singleton (Mov (from, to))
  fi
}

-- Generates a binop between locations, using
-- intermediate register if needed
fun binop (op, src, dest) {
  if memOpnd (dest) && memOpnd (src)
  then {Mov (src, eax), Binop(op, eax, dest)}
  else singleton (Binop(op, src, dest))
  fi
}

-- Gets a suffix for Set instruction from
-- source language comparison operator
fun suffix (op) {
  case op of
    "<"  -> "l"
  | "<=" -> "le"
  | "==" -> "e"
  | "!=" -> "ne"
  | ">=" -> "ge"
  | ">"  -> "g"
  esac
}

fun setZero(item) {
  case item of
    R(_) -> Binop("^", item, item)
  | S(_) -> Mov(L(0), item)
  esac
}

fun isSimpleArith(opr) {
  case opr of
    "+" -> true
  | "-" -> true
  | "^" -> true
  | _   -> false
  esac
}

fun isLogical(opr) {
  case opr of
    "&&" -> true
  | "!!" -> true
  | _    -> false
  esac
}

fun isComparison(opr) {
  case opr of
    "<"  -> true
  | "<=" -> true
  | ">"  -> true
  | ">=" -> true
  | "==" -> true
  | "!=" -> true
  | _    -> false
  esac
}

(**
 * @returns list of x86 instructions resulted from compilation
 *          of `s opr d` expression
 * @type    [String, MemLoc, MemLoc] -> {Instr}
*)
fun compileBinop(opr, s, d) {
  if   opr.isSimpleArith then 
    binop(opr, s, d)
  elif opr.isLogical then
    {setZero(eax), Binop("cmp", s, eax), Set(suffix("!="), "%al"), -- %al := s != 0
     setZero(edx), Binop("cmp", d, edx), Set(suffix("!="), "%dl"), -- %dl := d != 0
     Binop(opr, edx, eax), Mov(eax, d)}
  elif opr.isComparison then
     -- V only %edx is allowed here, %eax is already used in comparison
     --                 V --- %eax used here
     setZero(edx) : binop("cmp", s, d) +++ {Set(suffix(opr), "%dl"), Mov(edx, d)}
  else
    case opr of
      "*" -> if   d.isRegOpnd 
             then singleton(Binop("*", s, d)) 
             else {Mov(d, eax), Binop("*", s, eax), Mov(eax, d)} 
             fi 
    | "/" -> {Mov(d, eax), Cltd, IDiv(s), Mov(eax, d)}
    | "%" -> {Mov(d, eax), Cltd, IDiv(s), Mov(edx, d)}
    | _ -> failure("Unknown operator: %s\n", opr)
    esac
  fi
}

-- Compiles stack machine code into a list of x86 instructions. Takes an environment
-- and stack machine code, returns an updated environment and x86 code.
fun compile (env, code) {
  fun compile (env, code) {
    foldl (fun ([env, scode], i) {
      local code = scode : singleton (Meta ("# " ++ showSMInsn (i) ++ "\n"));
      case i of
        READ ->
          case env.allocate of
            [s, env] -> [env, code : {Call ("Lread"), Mov (eax, s)}]
          esac             
      | WRITE ->
          case env.pop of
            [s, env] -> [env, code : {Push (s), Call ("Lwrite"), Pop (eax)}]
          esac
      | CONST(n) -> 
        case env.allocate of
          [s, env] -> [env, code : singleton(Mov(L(n), s))]
        esac
      | LD(var) ->
          case env.addGlobal(var).allocate of
            [s, env] -> [env, code : move(env.loc(var), s)]
          esac
      | ST(var) ->
          case env.addGlobal(var).pop of
            [s, env] -> [env, code : move(s, env.loc(var))]
          esac
      | BINOP(opr) ->
          case env.pop2 of
            [s, d, env] -> [env.push(d), code : compileBinop(opr, s, d)]
          esac
      esac
    }, [env, {}], code)
  }

  compile (env, code) 
}


-- A top-level codegeneration function. Takes a driver's environment and a stack machine program,
-- compiles the program into machine code, and compiles the machine code into an executable
public fun compileX86 (args, code) {
  case compile (initEnv (), code) of
    [env, code] ->
       local asmFile = args.getBaseName ++ ".s",
             runtime = case getEnv ("LAMA_RUNTIME") of
                         #unboxed -> "../runtime/"
                       | path     -> path
                       esac ++ "/runtime.o";
       
       fwrite (asmFile,
               map (insnString, 
                    deepFlatten ({
                      Meta ("\t.global\tmain\n"),
                      dataSection (
                        map (dataDef, getGlobals (env))
                      ),
                      codeSection ({
                        Meta ("main:\n"),
                        prologue (getStackSize (env)),
                        code,
                        epilogue ()})
                    })).stringcat);
                    
       system ({"gcc -g -m32 -o ", args.getBaseName, " ", runtime, " ", asmFile}.stringcat)
  esac
}
