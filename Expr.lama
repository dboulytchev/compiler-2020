-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Const (x) -> [c, x]
  | Var (x) -> [c, s(x)]
  | Ref (x) -> [c, Ref (x)]
  | Binop (op, l, r) -> case evalList(c, {l, r}) of
                          [c1, {vv, v}] -> [c1, evalOp(op, vv, v)]
                        esac
  
  | Skip -> [c, BOTTOM]
  | Assn (l, r) -> case evalList(c, {l, r}) of
                     [[s1, w1], {Ref (vv), v}] -> [[s1 <- [vv, v], w1], v]
                   esac
  | Read (x) -> case readWorld(w) of 
                  [z, wd] -> [[s <- [x, z], wd], BOTTOM]
                esac              
  | Write (e) -> case eval(c, e) of
                   [[s1, w1], v] -> [[s1, writeWorld(v, w1)], BOTTOM]
                 esac
  | Seq (s1, s2) -> case eval(c, s1) of
                      [c1, _] -> eval(c1, s2)
                    esac
  | If (e, s1, s2) -> case eval(c, e) of
                        [c1, 0] -> eval(c1, s2)
                      | [c1, _] -> eval(c1, s1)
                      esac
  | While (e, s1) -> case eval(c, e) of
                       [c1, 0] -> [c1, BOTTOM]
                     | [c1, _] -> case eval(c1, s1) of [c2, _] -> eval(c2, expr) esac
                     esac
  | Repeat (s1, e) -> case eval(c, s1) of
                        [c1, _] -> case eval (c1, e) of
                                     [c2, 0] -> eval(c2, expr)
                                   | [c2, _] -> [c2, BOTTOM]
                                   esac
                      esac
  
  | Ignore (s) -> case eval(c, s) of [c1, _] -> [c1, BOTTOM] esac 
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
